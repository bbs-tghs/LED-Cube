
LED_Cube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000228c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  0000228c  00002320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000096  00800096  00800096  00002356  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002356  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000348  00000000  00000000  00002386  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002fbf  00000000  00000000  000026ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000afc  00000000  00000000  0000568d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fe7  00000000  00000000  00006189  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000920  00000000  00000000  00007170  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000997  00000000  00000000  00007a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000285f  00000000  00000000  00008427  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000300  00000000  00000000  0000ac86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__vector_10>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__vector_13>
      38:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__vector_14>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 08       	sbc	r0, r12
      56:	3e 08       	sbc	r3, r14
      58:	73 08       	sbc	r7, r3
      5a:	a8 08       	sbc	r10, r8
      5c:	dd 08       	sbc	r13, r13
      5e:	12 09       	sbc	r17, r2
      60:	47 09       	sbc	r20, r7
      62:	cd 0a       	sbc	r12, r29
      64:	e7 0a       	sbc	r14, r23
      66:	01 0b       	sbc	r16, r17
      68:	1b 0b       	sbc	r17, r27
      6a:	30 0b       	sbc	r19, r16
      6c:	4a 0b       	sbc	r20, r26
      6e:	64 0b       	sbc	r22, r20
      70:	7d 0b       	sbc	r23, r29
      72:	66 0d       	add	r22, r6
      74:	7a 0d       	add	r23, r10
      76:	91 0d       	add	r25, r1
      78:	a5 0d       	add	r26, r5
      7a:	b9 0d       	add	r27, r9
      7c:	cd 0d       	add	r28, r13
      7e:	0f 0e       	add	r0, r31
      80:	2a 0e       	add	r2, r26
      82:	3e 0e       	add	r3, r30
      84:	52 0e       	add	r5, r18
      86:	78 0e       	add	r7, r24
      88:	82 0e       	add	r8, r18
      8a:	8c 0e       	add	r8, r28
      8c:	97 0e       	add	r9, r23
      8e:	a2 0e       	add	r10, r18
      90:	ad 0e       	add	r10, r29
      92:	b7 0e       	add	r11, r23
      94:	c1 0e       	add	r12, r17
      96:	cb 0e       	add	r12, r27
      98:	d4 0e       	add	r13, r20

0000009a <__trampolines_end>:
      9a:	42 75       	andi	r20, 0x52	; 82
      9c:	66 66       	ori	r22, 0x66	; 102
      9e:	65 72       	andi	r22, 0x25	; 37
      a0:	20 6f       	ori	r18, 0xF0	; 240
      a2:	76 65       	ori	r23, 0x56	; 86
      a4:	72 66       	ori	r23, 0x62	; 98
      a6:	6c 6f       	ori	r22, 0xFC	; 252
      a8:	77 20       	and	r7, r7
      aa:	65 72       	andi	r22, 0x25	; 37
      ac:	72 6f       	ori	r23, 0xF2	; 242
      ae:	72 3a       	cpi	r23, 0xA2	; 162
      b0:	20 00       	.word	0x0020	; ????

000000b2 <__c.2002>:
      b2:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
      c2:	6f 72 3a 20 00                                      or: .

000000c7 <__c.2000>:
      c7:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
      d7:	3a 20 00                                            : .

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf e5       	ldi	r28, 0x5F	; 95
      e0:	d8 e0       	ldi	r29, 0x08	; 8
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	10 e0       	ldi	r17, 0x00	; 0
      e8:	a0 e6       	ldi	r26, 0x60	; 96
      ea:	b0 e0       	ldi	r27, 0x00	; 0
      ec:	ec e8       	ldi	r30, 0x8C	; 140
      ee:	f2 e2       	ldi	r31, 0x22	; 34
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	a6 39       	cpi	r26, 0x96	; 150
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	a6 e9       	ldi	r26, 0x96	; 150
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	ac 32       	cpi	r26, 0x2C	; 44
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
     110:	0c 94 44 11 	jmp	0x2288	; 0x2288 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <cb_syncFromDriver>:




void cb_syncFromDriver( TCB_DRV573 cb ) {
	switch (cb) {
     118:	81 30       	cpi	r24, 0x01	; 1
     11a:	41 f0       	breq	.+16     	; 0x12c <cb_syncFromDriver+0x14>
     11c:	18 f0       	brcs	.+6      	; 0x124 <cb_syncFromDriver+0xc>
     11e:	82 30       	cpi	r24, 0x02	; 2
     120:	39 f0       	breq	.+14     	; 0x130 <cb_syncFromDriver+0x18>
     122:	08 95       	ret
		case CB_SYNC		: TEST_SIG_ON(TEST_SIG0); asm volatile ("nop"); TEST_SIG_OFF(TEST_SIG0); break;	//Triggerimpuls für Scopc erzeugen, wenn Layer=0 ist
     124:	dc 9a       	sbi	0x1b, 4	; 27
     126:	00 00       	nop
     128:	dc 98       	cbi	0x1b, 4	; 27
     12a:	08 95       	ret
		case CB_DRIVE_ENTER : TEST_SIG_ON(TEST_SIG1);	break;	//Messen der Ausführungszeit der Funktion d573_drive
     12c:	db 9a       	sbi	0x1b, 3	; 27
     12e:	08 95       	ret
		case CB_DRIVE_LEAVE : TEST_SIG_OFF(TEST_SIG1);	break;	//gemessen:  30µs
     130:	db 98       	cbi	0x1b, 3	; 27
     132:	08 95       	ret

00000134 <cmd_getByte>:
	default:	;
	}	
}

//all functions, dealing with the commands via serial port
uint8_t cmd_getByte() {
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
	uint16_t c;
	c = uart_getc();
     138:	0e 94 05 10 	call	0x200a	; 0x200a <uart_getc>
     13c:	ec 01       	movw	r28, r24
	if ((c & 0xFF00) == 0) {	//Byte received
     13e:	88 27       	eor	r24, r24
     140:	89 2b       	or	r24, r25
     142:	11 f4       	brne	.+4      	; 0x148 <cmd_getByte+0x14>
		return( (uint8_t)c );
     144:	8c 2f       	mov	r24, r28
     146:	19 c0       	rjmp	.+50     	; 0x17a <cmd_getByte+0x46>
	} else {					//some error occured
		if ( c & UART_NO_DATA ) {		//no data available
     148:	d0 fd       	sbrc	r29, 0
     14a:	14 c0       	rjmp	.+40     	; 0x174 <cmd_getByte+0x40>
			//not really an error...
		} else {
			//Report the errors
			if ( c & UART_FRAME_ERROR )  {		// Framing Error detected, i.e no stop bit detected
     14c:	d4 ff       	sbrs	r29, 4
     14e:	04 c0       	rjmp	.+8      	; 0x158 <cmd_getByte+0x24>
				uart_puts_P("UART Frame Error: ");
     150:	87 ec       	ldi	r24, 0xC7	; 199
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 43 10 	call	0x2086	; 0x2086 <uart_puts_p>
			}
			if ( c & UART_OVERRUN_ERROR ) {		// Overrun error
     158:	d3 ff       	sbrs	r29, 3
     15a:	04 c0       	rjmp	.+8      	; 0x164 <cmd_getByte+0x30>
				uart_puts_P("UART Overrun Error: ");
     15c:	82 eb       	ldi	r24, 0xB2	; 178
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 43 10 	call	0x2086	; 0x2086 <uart_puts_p>
			}
			if ( c & UART_BUFFER_OVERFLOW ) {	//Buffer overflow
     164:	d1 ff       	sbrs	r29, 1
     166:	08 c0       	rjmp	.+16     	; 0x178 <cmd_getByte+0x44>
				uart_puts_P("Buffer overflow error: ");
     168:	8a e9       	ldi	r24, 0x9A	; 154
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 43 10 	call	0x2086	; 0x2086 <uart_puts_p>
			}
		}
		return( 0 );	//Ok, because we do not use value 0 here
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	03 c0       	rjmp	.+6      	; 0x17a <cmd_getByte+0x46>
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	01 c0       	rjmp	.+2      	; 0x17a <cmd_getByte+0x46>
     178:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret

00000180 <cmd_Command>:


void cmd_Command() {		//Use hex-Mode in hterm for testing
	uint8_t	c;

	c = cmd_getByte();
     180:	0e 94 9a 00 	call	0x134	; 0x134 <cmd_getByte>
	switch (c) {
     184:	88 36       	cpi	r24, 0x68	; 104
     186:	49 f0       	breq	.+18     	; 0x19a <cmd_Command+0x1a>
     188:	88 37       	cpi	r24, 0x78	; 120
     18a:	81 f0       	breq	.+32     	; 0x1ac <cmd_Command+0x2c>
     18c:	8f 33       	cpi	r24, 0x3F	; 63
     18e:	a9 f4       	brne	.+42     	; 0x1ba <cmd_Command+0x3a>
		case 0x3F:	// ?
					uart_puts( "LED-Cube V.01\n" );		//Platzhalter...
     190:	8b e6       	ldi	r24, 0x6B	; 107
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 34 10 	call	0x2068	; 0x2068 <uart_puts>
					break;
     198:	08 95       	ret
		case 0x68:	// H - Halt
					pattern_stop();
     19a:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <pattern_stop>
					cube_clear();
     19e:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
					uart_puts( "halted\n" ); 
     1a2:	8a e7       	ldi	r24, 0x7A	; 122
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 34 10 	call	0x2068	; 0x2068 <uart_puts>
					break;
     1aa:	08 95       	ret
					
		case 0x78:	// x - Execute
					pattern_start( P_RUNNING_POINT );
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <pattern_start>
					uart_puts( "started\n" );
     1b2:	82 e8       	ldi	r24, 0x82	; 130
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 34 10 	call	0x2068	; 0x2068 <uart_puts>
     1ba:	08 95       	ret

000001bc <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1bc:	2f ef       	ldi	r18, 0xFF	; 255
     1be:	82 e5       	ldi	r24, 0x52	; 82
     1c0:	97 e0       	ldi	r25, 0x07	; 7
     1c2:	21 50       	subi	r18, 0x01	; 1
     1c4:	80 40       	sbci	r24, 0x00	; 0
     1c6:	90 40       	sbci	r25, 0x00	; 0
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0x6>
     1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x10>
     1cc:	00 00       	nop

int main(void)
{	
	
	_delay_ms(150);
	drv_init();
     1ce:	0e 94 97 06 	call	0xd2e	; 0xd2e <drv_init>
	drv_Register_Callback( &cb_syncFromDriver );
     1d2:	8c e8       	ldi	r24, 0x8C	; 140
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 02 06 	call	0xc04	; 0xc04 <drv_Register_Callback>
	
	
	timerInit();				//den Hardware-Timer initialisieren und starten
     1da:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <timerInit>
	uart_init( UART_BAUD_SELECT_DOUBLE_SPEED(UART_BAUD_RATE,F_CPU) );
     1de:	87 e6       	ldi	r24, 0x67	; 103
     1e0:	90 e8       	ldi	r25, 0x80	; 128
     1e2:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <uart_init>

	sei();
     1e6:	78 94       	sei
	uart_puts( "LED-Cube V.01\n" );
     1e8:	8b e6       	ldi	r24, 0x6B	; 107
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 34 10 	call	0x2068	; 0x2068 <uart_puts>
	
	TEST_CONFIG;
     1f0:	8a b3       	in	r24, 0x1a	; 26
     1f2:	8c 61       	ori	r24, 0x1C	; 28
     1f4:	8a bb       	out	0x1a, r24	; 26
	TEST_ALL_OFF;
     1f6:	8b b3       	in	r24, 0x1b	; 27
     1f8:	83 7e       	andi	r24, 0xE3	; 227
     1fa:	8b bb       	out	0x1b, r24	; 27
	
	pattern_start( P_RUNNING_POINT );		//Testweise starten		P_RUNNING_POINT
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <pattern_start>
	
    while(1)
    {

		//Eingabe:
		cmd_Command();		//handle commands received via serial port
     202:	0e 94 c0 00 	call	0x180	; 0x180 <cmd_Command>
		
		
		if (timerFlags.flags.bMilli) {
     206:	80 91 e0 00 	lds	r24, 0x00E0
     20a:	80 ff       	sbrs	r24, 0
     20c:	04 c0       	rjmp	.+8      	; 0x216 <main+0x5a>
			drv_drive();					//Multiplexing der Layer erzeugen und Daten eines Layers in die Latches schreiben
     20e:	0e 94 16 06 	call	0xc2c	; 0xc2c <drv_drive>
			timerClearMilli();
     212:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <timerClearMilli>
		}
        
		
		if (timerFlags.flags.bCenti) {
     216:	80 91 e0 00 	lds	r24, 0x00E0
     21a:	83 ff       	sbrs	r24, 3
     21c:	04 c0       	rjmp	.+8      	; 0x226 <main+0x6a>
			// alle 10 ms
			pattern_do();
     21e:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <pattern_do>
			timerClearCenti();
     222:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <timerClearCenti>
		}
	
	
		if (timerFlags.flags.bDezi) {
     226:	80 91 e0 00 	lds	r24, 0x00E0
     22a:	84 ff       	sbrs	r24, 4
     22c:	ea cf       	rjmp	.-44     	; 0x202 <main+0x46>
			// alle 100 ms
			timerClearDezi();
     22e:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <timerClearDezi>
     232:	e7 cf       	rjmp	.-50     	; 0x202 <main+0x46>

00000234 <sortAsc>:
 @brief Interne Funktion
		Sorgt dafür, das x1 stets kleiner, höchstens gleich x2 ist und vertauchst die Werte der Parameter ggf.
*/
void sortAsc( uint8_t *x1, uint8_t *x2 ) {
	uint8_t tmp;
	if ((*x1) > (*x2)) {
     234:	fc 01       	movw	r30, r24
     236:	20 81       	ld	r18, Z
     238:	fb 01       	movw	r30, r22
     23a:	30 81       	ld	r19, Z
     23c:	32 17       	cp	r19, r18
     23e:	18 f4       	brcc	.+6      	; 0x246 <sortAsc+0x12>
		tmp = *x1;
		*x2 = *x1;
     240:	20 83       	st	Z, r18
		*x1 = tmp;
     242:	fc 01       	movw	r30, r24
     244:	20 83       	st	Z, r18
     246:	08 95       	ret

00000248 <cube_clear>:
	}
}


//clear the entire LED map
void cube_clear() {
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	0f c0       	rjmp	.+30     	; 0x270 <cube_clear+0x28>
	uint8_t col, layer;
	
	for (layer=0; layer<CUBE_MAX_LAYERS; layer++) {
		for(col=0; col<CUBE_MAX_COLS; col++) {
			cube[layer][col] = 0;
     252:	f9 01       	movw	r30, r18
     254:	e8 0f       	add	r30, r24
     256:	f9 1f       	adc	r31, r25
     258:	ef 51       	subi	r30, 0x1F	; 31
     25a:	ff 4f       	sbci	r31, 0xFF	; 255
     25c:	10 82       	st	Z, r1
     25e:	01 96       	adiw	r24, 0x01	; 1
//clear the entire LED map
void cube_clear() {
	uint8_t col, layer;
	
	for (layer=0; layer<CUBE_MAX_LAYERS; layer++) {
		for(col=0; col<CUBE_MAX_COLS; col++) {
     260:	88 30       	cpi	r24, 0x08	; 8
     262:	91 05       	cpc	r25, r1
     264:	b1 f7       	brne	.-20     	; 0x252 <cube_clear+0xa>
     266:	4f 5f       	subi	r20, 0xFF	; 255
     268:	5f 4f       	sbci	r21, 0xFF	; 255

//clear the entire LED map
void cube_clear() {
	uint8_t col, layer;
	
	for (layer=0; layer<CUBE_MAX_LAYERS; layer++) {
     26a:	48 30       	cpi	r20, 0x08	; 8
     26c:	51 05       	cpc	r21, r1
     26e:	51 f0       	breq	.+20     	; 0x284 <cube_clear+0x3c>
	}
}


//clear the entire LED map
void cube_clear() {
     270:	87 2f       	mov	r24, r23
     272:	96 2f       	mov	r25, r22
	uint8_t col, layer;
	
	for (layer=0; layer<CUBE_MAX_LAYERS; layer++) {
		for(col=0; col<CUBE_MAX_COLS; col++) {
			cube[layer][col] = 0;
     274:	9a 01       	movw	r18, r20
     276:	22 0f       	add	r18, r18
     278:	33 1f       	adc	r19, r19
     27a:	22 0f       	add	r18, r18
     27c:	33 1f       	adc	r19, r19
     27e:	22 0f       	add	r18, r18
     280:	33 1f       	adc	r19, r19
     282:	e7 cf       	rjmp	.-50     	; 0x252 <cube_clear+0xa>
     284:	08 95       	ret

00000286 <cube_inRange>:
 @result		= 1, wenn die Werte innerhalb der Feldgrenzen liegen, sonst 0
				
*/

uint8_t cube_inRange( uint8_t x, uint8_t y, uint8_t z) {
	if (x < CUBE_MAX_ROWS && 
     286:	88 30       	cpi	r24, 0x08	; 8
     288:	38 f4       	brcc	.+14     	; 0x298 <cube_inRange+0x12>
     28a:	68 30       	cpi	r22, 0x08	; 8
     28c:	38 f4       	brcc	.+14     	; 0x29c <cube_inRange+0x16>
		y < CUBE_MAX_COLS && 
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	48 30       	cpi	r20, 0x08	; 8
     292:	28 f0       	brcs	.+10     	; 0x29e <cube_inRange+0x18>
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	08 95       	ret
		z < CUBE_MAX_LAYERS) {
		return 1;
	} else 	{	// Mind. eine Koordinate liegt außerhalb
		return 0;
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret
     29c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     29e:	08 95       	ret

000002a0 <cube_setVoxel>:
/** 
 @brief Ein Voxel einschalten.
		
 @param	x,y,z	Die Parameter der drei Achsen
*/
void cube_setVoxel( uint8_t x, uint8_t y, uint8_t z ) {
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	c8 2f       	mov	r28, r24
     2a8:	16 2f       	mov	r17, r22
     2aa:	d4 2f       	mov	r29, r20
	if (cube_inRange(x,y,z)) {
     2ac:	0e 94 43 01 	call	0x286	; 0x286 <cube_inRange>
     2b0:	88 23       	and	r24, r24
     2b2:	a1 f0       	breq	.+40     	; 0x2dc <cube_setVoxel+0x3c>
		cube[z][y] |= (1 << x);	
     2b4:	e1 2f       	mov	r30, r17
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	88 e0       	ldi	r24, 0x08	; 8
     2ba:	d8 9f       	mul	r29, r24
     2bc:	e0 0d       	add	r30, r0
     2be:	f1 1d       	adc	r31, r1
     2c0:	11 24       	eor	r1, r1
     2c2:	ef 51       	subi	r30, 0x1F	; 31
     2c4:	ff 4f       	sbci	r31, 0xFF	; 255
     2c6:	40 81       	ld	r20, Z
     2c8:	21 e0       	ldi	r18, 0x01	; 1
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	c9 01       	movw	r24, r18
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <cube_setVoxel+0x34>
     2d0:	88 0f       	add	r24, r24
     2d2:	99 1f       	adc	r25, r25
     2d4:	ca 95       	dec	r28
     2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <cube_setVoxel+0x30>
     2d8:	84 2b       	or	r24, r20
     2da:	80 83       	st	Z, r24
	}
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	08 95       	ret

000002e4 <cube_clearVoxel>:

void cube_clearVoxel( uint8_t x, uint8_t y, uint8_t z ) {
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	c8 2f       	mov	r28, r24
     2ec:	16 2f       	mov	r17, r22
     2ee:	d4 2f       	mov	r29, r20
	if (cube_inRange(x,y,z)) {
     2f0:	0e 94 43 01 	call	0x286	; 0x286 <cube_inRange>
     2f4:	88 23       	and	r24, r24
     2f6:	a9 f0       	breq	.+42     	; 0x322 <cube_clearVoxel+0x3e>
		cube[z][y] &= ~(1 << x);
     2f8:	e1 2f       	mov	r30, r17
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	88 e0       	ldi	r24, 0x08	; 8
     2fe:	d8 9f       	mul	r29, r24
     300:	e0 0d       	add	r30, r0
     302:	f1 1d       	adc	r31, r1
     304:	11 24       	eor	r1, r1
     306:	ef 51       	subi	r30, 0x1F	; 31
     308:	ff 4f       	sbci	r31, 0xFF	; 255
     30a:	40 81       	ld	r20, Z
     30c:	21 e0       	ldi	r18, 0x01	; 1
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	c9 01       	movw	r24, r18
     312:	02 c0       	rjmp	.+4      	; 0x318 <cube_clearVoxel+0x34>
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	ca 95       	dec	r28
     31a:	e2 f7       	brpl	.-8      	; 0x314 <cube_clearVoxel+0x30>
     31c:	80 95       	com	r24
     31e:	84 23       	and	r24, r20
     320:	80 83       	st	Z, r24
	}
}
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	1f 91       	pop	r17
     328:	08 95       	ret

0000032a <cube_getVoxel>:
 @param	x,y,z	Die Parameter der drei Achsen
 
 @return	0 = Voxel ist ausgeschaltet
			1 = voxel ist eingeschaltet
*/
uint8_t	cube_getVoxel( uint8_t x, uint8_t y, uint8_t z ) {
     32a:	1f 93       	push	r17
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	c8 2f       	mov	r28, r24
     332:	16 2f       	mov	r17, r22
     334:	d4 2f       	mov	r29, r20
	uint8_t res;
	res = 0;
	if (cube_inRange(x,y,z))	{
     336:	0e 94 43 01 	call	0x286	; 0x286 <cube_inRange>
     33a:	88 23       	and	r24, r24
     33c:	99 f0       	breq	.+38     	; 0x364 <cube_getVoxel+0x3a>
		if (cube[z][y] & (1 << x))	{
     33e:	e1 2f       	mov	r30, r17
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	88 e0       	ldi	r24, 0x08	; 8
     344:	d8 9f       	mul	r29, r24
     346:	e0 0d       	add	r30, r0
     348:	f1 1d       	adc	r31, r1
     34a:	11 24       	eor	r1, r1
     34c:	ef 51       	subi	r30, 0x1F	; 31
     34e:	ff 4f       	sbci	r31, 0xFF	; 255
     350:	20 81       	ld	r18, Z
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	c9 01       	movw	r24, r18
     356:	02 c0       	rjmp	.+4      	; 0x35c <cube_getVoxel+0x32>
     358:	95 95       	asr	r25
     35a:	87 95       	ror	r24
     35c:	ca 95       	dec	r28
     35e:	e2 f7       	brpl	.-8      	; 0x358 <cube_getVoxel+0x2e>
     360:	81 70       	andi	r24, 0x01	; 1
     362:	01 c0       	rjmp	.+2      	; 0x366 <cube_getVoxel+0x3c>
 @return	0 = Voxel ist ausgeschaltet
			1 = voxel ist eingeschaltet
*/
uint8_t	cube_getVoxel( uint8_t x, uint8_t y, uint8_t z ) {
	uint8_t res;
	res = 0;
     364:	80 e0       	ldi	r24, 0x00	; 0
		if (cube[z][y] & (1 << x))	{
			res = 1;
		}
	}
	return (res);	
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	08 95       	ret

0000036e <cube_setPlaneX>:

void cube_setPlaneX( uint8_t x ) {
	uint8_t y,z;
	if (x < CUBE_MAX_ROWS)	{
     36e:	88 30       	cpi	r24, 0x08	; 8
     370:	28 f5       	brcc	.+74     	; 0x3bc <cube_setPlaneX+0x4e>
		for (z=0; z < CUBE_MAX_LAYERS; z++)		{
			for (y=0; y < CUBE_MAX_COLS; y++)			{
				cube[z][y] |= (1 << x);
     372:	71 e0       	ldi	r23, 0x01	; 1
     374:	01 c0       	rjmp	.+2      	; 0x378 <cube_setPlaneX+0xa>
     376:	77 0f       	add	r23, r23
     378:	8a 95       	dec	r24
     37a:	ea f7       	brpl	.-6      	; 0x376 <cube_setPlaneX+0x8>
     37c:	40 e0       	ldi	r20, 0x00	; 0
     37e:	50 e0       	ldi	r21, 0x00	; 0
		}
	}
	return (res);	
}

void cube_setPlaneX( uint8_t x ) {
     380:	b0 e0       	ldi	r27, 0x00	; 0
     382:	a0 e0       	ldi	r26, 0x00	; 0
     384:	11 c0       	rjmp	.+34     	; 0x3a8 <cube_setPlaneX+0x3a>
	uint8_t y,z;
	if (x < CUBE_MAX_ROWS)	{
		for (z=0; z < CUBE_MAX_LAYERS; z++)		{
			for (y=0; y < CUBE_MAX_COLS; y++)			{
				cube[z][y] |= (1 << x);
     386:	f9 01       	movw	r30, r18
     388:	e8 0f       	add	r30, r24
     38a:	f9 1f       	adc	r31, r25
     38c:	ef 51       	subi	r30, 0x1F	; 31
     38e:	ff 4f       	sbci	r31, 0xFF	; 255
     390:	60 81       	ld	r22, Z
     392:	67 2b       	or	r22, r23
     394:	60 83       	st	Z, r22
     396:	01 96       	adiw	r24, 0x01	; 1

void cube_setPlaneX( uint8_t x ) {
	uint8_t y,z;
	if (x < CUBE_MAX_ROWS)	{
		for (z=0; z < CUBE_MAX_LAYERS; z++)		{
			for (y=0; y < CUBE_MAX_COLS; y++)			{
     398:	88 30       	cpi	r24, 0x08	; 8
     39a:	91 05       	cpc	r25, r1
     39c:	a1 f7       	brne	.-24     	; 0x386 <cube_setPlaneX+0x18>
     39e:	4f 5f       	subi	r20, 0xFF	; 255
     3a0:	5f 4f       	sbci	r21, 0xFF	; 255
}

void cube_setPlaneX( uint8_t x ) {
	uint8_t y,z;
	if (x < CUBE_MAX_ROWS)	{
		for (z=0; z < CUBE_MAX_LAYERS; z++)		{
     3a2:	48 30       	cpi	r20, 0x08	; 8
     3a4:	51 05       	cpc	r21, r1
     3a6:	51 f0       	breq	.+20     	; 0x3bc <cube_setPlaneX+0x4e>
		}
	}
	return (res);	
}

void cube_setPlaneX( uint8_t x ) {
     3a8:	8b 2f       	mov	r24, r27
     3aa:	9a 2f       	mov	r25, r26
	uint8_t y,z;
	if (x < CUBE_MAX_ROWS)	{
		for (z=0; z < CUBE_MAX_LAYERS; z++)		{
			for (y=0; y < CUBE_MAX_COLS; y++)			{
				cube[z][y] |= (1 << x);
     3ac:	9a 01       	movw	r18, r20
     3ae:	22 0f       	add	r18, r18
     3b0:	33 1f       	adc	r19, r19
     3b2:	22 0f       	add	r18, r18
     3b4:	33 1f       	adc	r19, r19
     3b6:	22 0f       	add	r18, r18
     3b8:	33 1f       	adc	r19, r19
     3ba:	e5 cf       	rjmp	.-54     	; 0x386 <cube_setPlaneX+0x18>
     3bc:	08 95       	ret

000003be <cube_clearPlaneX>:
	}	
}

void cube_clearPlaneX( uint8_t x ) {
	uint8_t y,z;
	if (x < CUBE_MAX_ROWS)	{
     3be:	88 30       	cpi	r24, 0x08	; 8
     3c0:	50 f5       	brcc	.+84     	; 0x416 <cube_clearPlaneX+0x58>
		for (z=0; z < CUBE_MAX_LAYERS; z++)		{
			for (y=0; y < CUBE_MAX_COLS; y++)			{
				cube[z][y] &= ~(1 << x);
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	a9 01       	movw	r20, r18
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <cube_clearPlaneX+0x10>
     3ca:	44 0f       	add	r20, r20
     3cc:	55 1f       	adc	r21, r21
     3ce:	8a 95       	dec	r24
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <cube_clearPlaneX+0xc>
     3d2:	74 2f       	mov	r23, r20
     3d4:	70 95       	com	r23
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}	
}

void cube_clearPlaneX( uint8_t x ) {
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	a0 e0       	ldi	r26, 0x00	; 0
     3de:	11 c0       	rjmp	.+34     	; 0x402 <cube_clearPlaneX+0x44>
	uint8_t y,z;
	if (x < CUBE_MAX_ROWS)	{
		for (z=0; z < CUBE_MAX_LAYERS; z++)		{
			for (y=0; y < CUBE_MAX_COLS; y++)			{
				cube[z][y] &= ~(1 << x);
     3e0:	f9 01       	movw	r30, r18
     3e2:	e8 0f       	add	r30, r24
     3e4:	f9 1f       	adc	r31, r25
     3e6:	ef 51       	subi	r30, 0x1F	; 31
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	60 81       	ld	r22, Z
     3ec:	67 23       	and	r22, r23
     3ee:	60 83       	st	Z, r22
     3f0:	01 96       	adiw	r24, 0x01	; 1

void cube_clearPlaneX( uint8_t x ) {
	uint8_t y,z;
	if (x < CUBE_MAX_ROWS)	{
		for (z=0; z < CUBE_MAX_LAYERS; z++)		{
			for (y=0; y < CUBE_MAX_COLS; y++)			{
     3f2:	88 30       	cpi	r24, 0x08	; 8
     3f4:	91 05       	cpc	r25, r1
     3f6:	a1 f7       	brne	.-24     	; 0x3e0 <cube_clearPlaneX+0x22>
     3f8:	4f 5f       	subi	r20, 0xFF	; 255
     3fa:	5f 4f       	sbci	r21, 0xFF	; 255
}

void cube_clearPlaneX( uint8_t x ) {
	uint8_t y,z;
	if (x < CUBE_MAX_ROWS)	{
		for (z=0; z < CUBE_MAX_LAYERS; z++)		{
     3fc:	48 30       	cpi	r20, 0x08	; 8
     3fe:	51 05       	cpc	r21, r1
     400:	51 f0       	breq	.+20     	; 0x416 <cube_clearPlaneX+0x58>
			}
		}
	}	
}

void cube_clearPlaneX( uint8_t x ) {
     402:	8b 2f       	mov	r24, r27
     404:	9a 2f       	mov	r25, r26
	uint8_t y,z;
	if (x < CUBE_MAX_ROWS)	{
		for (z=0; z < CUBE_MAX_LAYERS; z++)		{
			for (y=0; y < CUBE_MAX_COLS; y++)			{
				cube[z][y] &= ~(1 << x);
     406:	9a 01       	movw	r18, r20
     408:	22 0f       	add	r18, r18
     40a:	33 1f       	adc	r19, r19
     40c:	22 0f       	add	r18, r18
     40e:	33 1f       	adc	r19, r19
     410:	22 0f       	add	r18, r18
     412:	33 1f       	adc	r19, r19
     414:	e5 cf       	rjmp	.-54     	; 0x3e0 <cube_clearPlaneX+0x22>
     416:	08 95       	ret

00000418 <cube_setPlaneY>:
	}
}

void cube_setPlaneY( uint8_t y ) {
	uint8_t z;
	if (y < CUBE_MAX_COLS)	{
     418:	88 30       	cpi	r24, 0x08	; 8
     41a:	a8 f4       	brcc	.+42     	; 0x446 <cube_setPlaneY+0x2e>
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
		for (z=0; z < CUBE_MAX_LAYERS; z++)	{
			cube[z][y] = 0xff;
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	4f ef       	ldi	r20, 0xFF	; 255
     424:	f9 01       	movw	r30, r18
     426:	ee 0f       	add	r30, r30
     428:	ff 1f       	adc	r31, r31
     42a:	ee 0f       	add	r30, r30
     42c:	ff 1f       	adc	r31, r31
     42e:	ee 0f       	add	r30, r30
     430:	ff 1f       	adc	r31, r31
     432:	e8 0f       	add	r30, r24
     434:	f9 1f       	adc	r31, r25
     436:	ef 51       	subi	r30, 0x1F	; 31
     438:	ff 4f       	sbci	r31, 0xFF	; 255
     43a:	40 83       	st	Z, r20
     43c:	2f 5f       	subi	r18, 0xFF	; 255
     43e:	3f 4f       	sbci	r19, 0xFF	; 255
}

void cube_setPlaneY( uint8_t y ) {
	uint8_t z;
	if (y < CUBE_MAX_COLS)	{
		for (z=0; z < CUBE_MAX_LAYERS; z++)	{
     440:	28 30       	cpi	r18, 0x08	; 8
     442:	31 05       	cpc	r19, r1
     444:	79 f7       	brne	.-34     	; 0x424 <cube_setPlaneY+0xc>
     446:	08 95       	ret

00000448 <cube_clearPlaneY>:
	}
}

void cube_clearPlaneY( uint8_t y ) {
	uint8_t z;
	if (y < CUBE_MAX_COLS)	{
     448:	88 30       	cpi	r24, 0x08	; 8
     44a:	a0 f4       	brcc	.+40     	; 0x474 <cube_clearPlaneY+0x2c>
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	30 e0       	ldi	r19, 0x00	; 0
		for (z=0; z < CUBE_MAX_LAYERS; z++)	{
			cube[z][y] = 0x00;
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	f9 01       	movw	r30, r18
     454:	ee 0f       	add	r30, r30
     456:	ff 1f       	adc	r31, r31
     458:	ee 0f       	add	r30, r30
     45a:	ff 1f       	adc	r31, r31
     45c:	ee 0f       	add	r30, r30
     45e:	ff 1f       	adc	r31, r31
     460:	e8 0f       	add	r30, r24
     462:	f9 1f       	adc	r31, r25
     464:	ef 51       	subi	r30, 0x1F	; 31
     466:	ff 4f       	sbci	r31, 0xFF	; 255
     468:	10 82       	st	Z, r1
     46a:	2f 5f       	subi	r18, 0xFF	; 255
     46c:	3f 4f       	sbci	r19, 0xFF	; 255
}

void cube_clearPlaneY( uint8_t y ) {
	uint8_t z;
	if (y < CUBE_MAX_COLS)	{
		for (z=0; z < CUBE_MAX_LAYERS; z++)	{
     46e:	28 30       	cpi	r18, 0x08	; 8
     470:	31 05       	cpc	r19, r1
     472:	79 f7       	brne	.-34     	; 0x452 <cube_clearPlaneY+0xa>
     474:	08 95       	ret

00000476 <cube_setPlaneZ>:
	}
}

void cube_setPlaneZ( uint8_t z ) {
	uint8_t y;
	if (z < CUBE_MAX_LAYERS ) {
     476:	88 30       	cpi	r24, 0x08	; 8
     478:	a8 f4       	brcc	.+42     	; 0x4a4 <cube_setPlaneZ+0x2e>
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
		for (y=0; y<CUBE_MAX_COLS; y++) {
			cube[z][y] = 0xFF;	
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	4f ef       	ldi	r20, 0xFF	; 255
     48e:	fc 01       	movw	r30, r24
     490:	e2 0f       	add	r30, r18
     492:	f3 1f       	adc	r31, r19
     494:	ef 51       	subi	r30, 0x1F	; 31
     496:	ff 4f       	sbci	r31, 0xFF	; 255
     498:	40 83       	st	Z, r20
     49a:	2f 5f       	subi	r18, 0xFF	; 255
     49c:	3f 4f       	sbci	r19, 0xFF	; 255
}

void cube_setPlaneZ( uint8_t z ) {
	uint8_t y;
	if (z < CUBE_MAX_LAYERS ) {
		for (y=0; y<CUBE_MAX_COLS; y++) {
     49e:	28 30       	cpi	r18, 0x08	; 8
     4a0:	31 05       	cpc	r19, r1
     4a2:	a9 f7       	brne	.-22     	; 0x48e <cube_setPlaneZ+0x18>
     4a4:	08 95       	ret

000004a6 <cube_clearPlaneZ>:
	}
}

void cube_clearPlaneZ( uint8_t z ) {
	uint8_t y;
	if (z < CUBE_MAX_LAYERS ) {
     4a6:	88 30       	cpi	r24, 0x08	; 8
     4a8:	a0 f4       	brcc	.+40     	; 0x4d2 <cube_clearPlaneZ+0x2c>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
		for (y=0; y<CUBE_MAX_COLS; y++) {
			cube[z][y] = 0x00;
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	88 0f       	add	r24, r24
     4b2:	99 1f       	adc	r25, r25
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	fc 01       	movw	r30, r24
     4be:	e2 0f       	add	r30, r18
     4c0:	f3 1f       	adc	r31, r19
     4c2:	ef 51       	subi	r30, 0x1F	; 31
     4c4:	ff 4f       	sbci	r31, 0xFF	; 255
     4c6:	10 82       	st	Z, r1
     4c8:	2f 5f       	subi	r18, 0xFF	; 255
     4ca:	3f 4f       	sbci	r19, 0xFF	; 255
}

void cube_clearPlaneZ( uint8_t z ) {
	uint8_t y;
	if (z < CUBE_MAX_LAYERS ) {
		for (y=0; y<CUBE_MAX_COLS; y++) {
     4cc:	28 30       	cpi	r18, 0x08	; 8
     4ce:	31 05       	cpc	r19, r1
     4d0:	a9 f7       	brne	.-22     	; 0x4bc <cube_clearPlaneZ+0x16>
     4d2:	08 95       	ret

000004d4 <cube_shift>:
	}
	cube_setRow( layer, 0, append );
}


void cube_shift( TAXIS c, int8_t direction ) {
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
uint8_t y,z;	
	if (direction < 0) { direction = -1; } else { direction = 1; }
     4e0:	66 23       	and	r22, r22
     4e2:	14 f4       	brge	.+4      	; 0x4e8 <cube_shift+0x14>
     4e4:	cf ef       	ldi	r28, 0xFF	; 255
     4e6:	01 c0       	rjmp	.+2      	; 0x4ea <cube_shift+0x16>
     4e8:	c1 e0       	ldi	r28, 0x01	; 1
	switch (c) {
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	89 f1       	breq	.+98     	; 0x550 <cube_shift+0x7c>
     4ee:	20 f0       	brcs	.+8      	; 0x4f8 <cube_shift+0x24>
     4f0:	82 30       	cpi	r24, 0x02	; 2
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <cube_shift+0x22>
     4f4:	6d c0       	rjmp	.+218    	; 0x5d0 <cube_shift+0xfc>
     4f6:	cd c0       	rjmp	.+410    	; 0x692 <cube_shift+0x1be>
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	50 e0       	ldi	r21, 0x00	; 0
}


void cube_shift( TAXIS c, int8_t direction ) {
uint8_t y,z;	
	if (direction < 0) { direction = -1; } else { direction = 1; }
     4fc:	a0 e0       	ldi	r26, 0x00	; 0
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	1d c0       	rjmp	.+58     	; 0x53c <cube_shift+0x68>
	switch (c) {
		case AXIS_X:	for (z=0; z<CUBE_MAX_Z; z++) {
							for( y=0; y<CUBE_MAX_Y; y++) {
								if (direction == 1) {
     502:	c1 30       	cpi	r28, 0x01	; 1
     504:	49 f4       	brne	.+18     	; 0x518 <cube_shift+0x44>
									cube[z][y] = cube[z][y] << 1;
     506:	f9 01       	movw	r30, r18
     508:	e8 0f       	add	r30, r24
     50a:	f9 1f       	adc	r31, r25
     50c:	ef 51       	subi	r30, 0x1F	; 31
     50e:	ff 4f       	sbci	r31, 0xFF	; 255
     510:	60 81       	ld	r22, Z
     512:	66 0f       	add	r22, r22
     514:	60 83       	st	Z, r22
     516:	08 c0       	rjmp	.+16     	; 0x528 <cube_shift+0x54>
								} else {
									cube[z][y] = cube[z][y] >> 1;
     518:	f9 01       	movw	r30, r18
     51a:	e8 0f       	add	r30, r24
     51c:	f9 1f       	adc	r31, r25
     51e:	ef 51       	subi	r30, 0x1F	; 31
     520:	ff 4f       	sbci	r31, 0xFF	; 255
     522:	60 81       	ld	r22, Z
     524:	66 95       	lsr	r22
     526:	60 83       	st	Z, r22
     528:	01 96       	adiw	r24, 0x01	; 1
void cube_shift( TAXIS c, int8_t direction ) {
uint8_t y,z;	
	if (direction < 0) { direction = -1; } else { direction = 1; }
	switch (c) {
		case AXIS_X:	for (z=0; z<CUBE_MAX_Z; z++) {
							for( y=0; y<CUBE_MAX_Y; y++) {
     52a:	88 30       	cpi	r24, 0x08	; 8
     52c:	91 05       	cpc	r25, r1
     52e:	49 f7       	brne	.-46     	; 0x502 <cube_shift+0x2e>
     530:	4f 5f       	subi	r20, 0xFF	; 255
     532:	5f 4f       	sbci	r21, 0xFF	; 255

void cube_shift( TAXIS c, int8_t direction ) {
uint8_t y,z;	
	if (direction < 0) { direction = -1; } else { direction = 1; }
	switch (c) {
		case AXIS_X:	for (z=0; z<CUBE_MAX_Z; z++) {
     534:	48 30       	cpi	r20, 0x08	; 8
     536:	51 05       	cpc	r21, r1
     538:	09 f4       	brne	.+2      	; 0x53c <cube_shift+0x68>
     53a:	ab c0       	rjmp	.+342    	; 0x692 <cube_shift+0x1be>
}


void cube_shift( TAXIS c, int8_t direction ) {
uint8_t y,z;	
	if (direction < 0) { direction = -1; } else { direction = 1; }
     53c:	8a 2f       	mov	r24, r26
     53e:	97 2f       	mov	r25, r23
		case AXIS_X:	for (z=0; z<CUBE_MAX_Z; z++) {
							for( y=0; y<CUBE_MAX_Y; y++) {
								if (direction == 1) {
									cube[z][y] = cube[z][y] << 1;
								} else {
									cube[z][y] = cube[z][y] >> 1;
     540:	9a 01       	movw	r18, r20
     542:	22 0f       	add	r18, r18
     544:	33 1f       	adc	r19, r19
     546:	22 0f       	add	r18, r18
     548:	33 1f       	adc	r19, r19
     54a:	22 0f       	add	r18, r18
     54c:	33 1f       	adc	r19, r19
     54e:	d9 cf       	rjmp	.-78     	; 0x502 <cube_shift+0x2e>


void cube_shift( TAXIS c, int8_t direction ) {
uint8_t y,z;	
	if (direction < 0) { direction = -1; } else { direction = 1; }
	switch (c) {
     550:	a0 e0       	ldi	r26, 0x00	; 0
     552:	b0 e0       	ldi	r27, 0x00	; 0
								}
							}
						}
						break;
		case AXIS_Y:	for (z=0; z < CUBE_MAX_Z; z++) {	
							if (direction == 1) {
     554:	00 e0       	ldi	r16, 0x00	; 0
     556:	10 e0       	ldi	r17, 0x00	; 0
     558:	c1 30       	cpi	r28, 0x01	; 1
     55a:	59 f4       	brne	.+22     	; 0x572 <cube_shift+0x9e>
								for( y=CUBE_MAX_Y-1; y < 0; y--) {
									cube[z][y] = cube[z][y-1];
								}
								cube[z][0] = 0;
     55c:	fd 01       	movw	r30, r26
     55e:	ee 0f       	add	r30, r30
     560:	ff 1f       	adc	r31, r31
     562:	ee 0f       	add	r30, r30
     564:	ff 1f       	adc	r31, r31
     566:	ee 0f       	add	r30, r30
     568:	ff 1f       	adc	r31, r31
     56a:	ef 51       	subi	r30, 0x1F	; 31
     56c:	ff 4f       	sbci	r31, 0xFF	; 255
     56e:	10 82       	st	Z, r1
     570:	2a c0       	rjmp	.+84     	; 0x5c6 <cube_shift+0xf2>
								}
							}
						}
						break;
		case AXIS_Y:	for (z=0; z < CUBE_MAX_Z; z++) {	
							if (direction == 1) {
     572:	20 2f       	mov	r18, r16
     574:	31 2f       	mov	r19, r17
									cube[z][y] = cube[z][y-1];
								}
								cube[z][0] = 0;
							} else {
								for( y=0; y < CUBE_MAX_Y-1; y++) {
									cube[z][y] = cube[z][y+1];
     576:	ea 2e       	mov	r14, r26
     578:	fb 2e       	mov	r15, r27
     57a:	bd 01       	movw	r22, r26
     57c:	66 0f       	add	r22, r22
     57e:	77 1f       	adc	r23, r23
     580:	66 0f       	add	r22, r22
     582:	77 1f       	adc	r23, r23
     584:	66 0f       	add	r22, r22
     586:	77 1f       	adc	r23, r23
     588:	4e 2d       	mov	r20, r14
     58a:	5f 2d       	mov	r21, r15
     58c:	c9 01       	movw	r24, r18
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	fb 01       	movw	r30, r22
     592:	e8 0f       	add	r30, r24
     594:	f9 1f       	adc	r31, r25
     596:	ef 51       	subi	r30, 0x1F	; 31
     598:	ff 4f       	sbci	r31, 0xFF	; 255
     59a:	d0 81       	ld	r29, Z
     59c:	26 0f       	add	r18, r22
     59e:	37 1f       	adc	r19, r23
     5a0:	f9 01       	movw	r30, r18
     5a2:	ef 51       	subi	r30, 0x1F	; 31
     5a4:	ff 4f       	sbci	r31, 0xFF	; 255
     5a6:	d0 83       	st	Z, r29
								for( y=CUBE_MAX_Y-1; y < 0; y--) {
									cube[z][y] = cube[z][y-1];
								}
								cube[z][0] = 0;
							} else {
								for( y=0; y < CUBE_MAX_Y-1; y++) {
     5a8:	87 30       	cpi	r24, 0x07	; 7
     5aa:	91 05       	cpc	r25, r1
     5ac:	11 f0       	breq	.+4      	; 0x5b2 <cube_shift+0xde>
     5ae:	9c 01       	movw	r18, r24
     5b0:	eb cf       	rjmp	.-42     	; 0x588 <cube_shift+0xb4>
									cube[z][y] = cube[z][y+1];
								}
								cube[z][CUBE_MAX_Y-1] = 0;
     5b2:	fa 01       	movw	r30, r20
     5b4:	ee 0f       	add	r30, r30
     5b6:	ff 1f       	adc	r31, r31
     5b8:	ee 0f       	add	r30, r30
     5ba:	ff 1f       	adc	r31, r31
     5bc:	ee 0f       	add	r30, r30
     5be:	ff 1f       	adc	r31, r31
     5c0:	ef 51       	subi	r30, 0x1F	; 31
     5c2:	ff 4f       	sbci	r31, 0xFF	; 255
     5c4:	17 82       	std	Z+7, r1	; 0x07
     5c6:	11 96       	adiw	r26, 0x01	; 1
									cube[z][y] = cube[z][y] >> 1;
								}
							}
						}
						break;
		case AXIS_Y:	for (z=0; z < CUBE_MAX_Z; z++) {	
     5c8:	a8 30       	cpi	r26, 0x08	; 8
     5ca:	b1 05       	cpc	r27, r1
     5cc:	29 f6       	brne	.-118    	; 0x558 <cube_shift+0x84>
     5ce:	61 c0       	rjmp	.+194    	; 0x692 <cube_shift+0x1be>
								}
								cube[z][CUBE_MAX_Y-1] = 0;
							}
						}
						break;
		case AXIS_Z:	if (direction == 1) {
     5d0:	c1 30       	cpi	r28, 0x01	; 1
     5d2:	29 f0       	breq	.+10     	; 0x5de <cube_shift+0x10a>
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	c0 e0       	ldi	r28, 0x00	; 0
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	44 c0       	rjmp	.+136    	; 0x666 <cube_shift+0x192>
     5de:	66 e0       	ldi	r22, 0x06	; 6
     5e0:	70 e0       	ldi	r23, 0x00	; 0
								}
							}
						}
						break;
		case AXIS_Y:	for (z=0; z < CUBE_MAX_Z; z++) {	
							if (direction == 1) {
     5e2:	c0 e0       	ldi	r28, 0x00	; 0
     5e4:	b0 e0       	ldi	r27, 0x00	; 0
     5e6:	13 c0       	rjmp	.+38     	; 0x60e <cube_shift+0x13a>
						}
						break;
		case AXIS_Z:	if (direction == 1) {
							for ( z=CUBE_MAX_Z-1; z>0; z-- ){
								for (y=0; y<CUBE_MAX_Y; y++) {
									cube[z][y] = cube[z-1][y];
     5e8:	fa 01       	movw	r30, r20
     5ea:	e8 0f       	add	r30, r24
     5ec:	f9 1f       	adc	r31, r25
     5ee:	ef 51       	subi	r30, 0x1F	; 31
     5f0:	ff 4f       	sbci	r31, 0xFF	; 255
     5f2:	a0 81       	ld	r26, Z
     5f4:	f9 01       	movw	r30, r18
     5f6:	e8 0f       	add	r30, r24
     5f8:	f9 1f       	adc	r31, r25
     5fa:	ef 51       	subi	r30, 0x1F	; 31
     5fc:	ff 4f       	sbci	r31, 0xFF	; 255
     5fe:	a0 83       	st	Z, r26
     600:	01 96       	adiw	r24, 0x01	; 1
							}
						}
						break;
		case AXIS_Z:	if (direction == 1) {
							for ( z=CUBE_MAX_Z-1; z>0; z-- ){
								for (y=0; y<CUBE_MAX_Y; y++) {
     602:	88 30       	cpi	r24, 0x08	; 8
     604:	91 05       	cpc	r25, r1
     606:	81 f7       	brne	.-32     	; 0x5e8 <cube_shift+0x114>
     608:	61 50       	subi	r22, 0x01	; 1
     60a:	71 09       	sbc	r23, r1
     60c:	98 f0       	brcs	.+38     	; 0x634 <cube_shift+0x160>
								}
							}
						}
						break;
		case AXIS_Y:	for (z=0; z < CUBE_MAX_Z; z++) {	
							if (direction == 1) {
     60e:	8c 2f       	mov	r24, r28
     610:	9b 2f       	mov	r25, r27
						}
						break;
		case AXIS_Z:	if (direction == 1) {
							for ( z=CUBE_MAX_Z-1; z>0; z-- ){
								for (y=0; y<CUBE_MAX_Y; y++) {
									cube[z][y] = cube[z-1][y];
     612:	ab 01       	movw	r20, r22
     614:	44 0f       	add	r20, r20
     616:	55 1f       	adc	r21, r21
     618:	44 0f       	add	r20, r20
     61a:	55 1f       	adc	r21, r21
     61c:	44 0f       	add	r20, r20
     61e:	55 1f       	adc	r21, r21
     620:	9b 01       	movw	r18, r22
     622:	2f 5f       	subi	r18, 0xFF	; 255
     624:	3f 4f       	sbci	r19, 0xFF	; 255
     626:	22 0f       	add	r18, r18
     628:	33 1f       	adc	r19, r19
     62a:	22 0f       	add	r18, r18
     62c:	33 1f       	adc	r19, r19
     62e:	22 0f       	add	r18, r18
     630:	33 1f       	adc	r19, r19
     632:	da cf       	rjmp	.-76     	; 0x5e8 <cube_shift+0x114>
								}
							}
							cube_clearPlaneZ( 0 );					
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	0e 94 53 02 	call	0x4a6	; 0x4a6 <cube_clearPlaneZ>
     63a:	2b c0       	rjmp	.+86     	; 0x692 <cube_shift+0x1be>
						} else {
							for ( z=0; z < CUBE_MAX_Z-1; z++ ){
								for (y=0; y<CUBE_MAX_Y; y++) {
									cube[z][y] = cube[z+1][y];
     63c:	fa 01       	movw	r30, r20
     63e:	e8 0f       	add	r30, r24
     640:	f9 1f       	adc	r31, r25
     642:	ef 51       	subi	r30, 0x1F	; 31
     644:	ff 4f       	sbci	r31, 0xFF	; 255
     646:	a0 81       	ld	r26, Z
     648:	f9 01       	movw	r30, r18
     64a:	e8 0f       	add	r30, r24
     64c:	f9 1f       	adc	r31, r25
     64e:	ef 51       	subi	r30, 0x1F	; 31
     650:	ff 4f       	sbci	r31, 0xFF	; 255
     652:	a0 83       	st	Z, r26
     654:	01 96       	adiw	r24, 0x01	; 1
								}
							}
							cube_clearPlaneZ( 0 );					
						} else {
							for ( z=0; z < CUBE_MAX_Z-1; z++ ){
								for (y=0; y<CUBE_MAX_Y; y++) {
     656:	88 30       	cpi	r24, 0x08	; 8
     658:	91 05       	cpc	r25, r1
     65a:	81 f7       	brne	.-32     	; 0x63c <cube_shift+0x168>
     65c:	6f 5f       	subi	r22, 0xFF	; 255
     65e:	7f 4f       	sbci	r23, 0xFF	; 255
									cube[z][y] = cube[z-1][y];
								}
							}
							cube_clearPlaneZ( 0 );					
						} else {
							for ( z=0; z < CUBE_MAX_Z-1; z++ ){
     660:	68 30       	cpi	r22, 0x08	; 8
     662:	71 05       	cpc	r23, r1
     664:	99 f0       	breq	.+38     	; 0x68c <cube_shift+0x1b8>
								}
								cube[z][CUBE_MAX_Y-1] = 0;
							}
						}
						break;
		case AXIS_Z:	if (direction == 1) {
     666:	8c 2f       	mov	r24, r28
     668:	9b 2f       	mov	r25, r27
							}
							cube_clearPlaneZ( 0 );					
						} else {
							for ( z=0; z < CUBE_MAX_Z-1; z++ ){
								for (y=0; y<CUBE_MAX_Y; y++) {
									cube[z][y] = cube[z+1][y];
     66a:	ab 01       	movw	r20, r22
     66c:	44 0f       	add	r20, r20
     66e:	55 1f       	adc	r21, r21
     670:	44 0f       	add	r20, r20
     672:	55 1f       	adc	r21, r21
     674:	44 0f       	add	r20, r20
     676:	55 1f       	adc	r21, r21
     678:	9b 01       	movw	r18, r22
     67a:	21 50       	subi	r18, 0x01	; 1
     67c:	31 09       	sbc	r19, r1
     67e:	22 0f       	add	r18, r18
     680:	33 1f       	adc	r19, r19
     682:	22 0f       	add	r18, r18
     684:	33 1f       	adc	r19, r19
     686:	22 0f       	add	r18, r18
     688:	33 1f       	adc	r19, r19
     68a:	d8 cf       	rjmp	.-80     	; 0x63c <cube_shift+0x168>
								}
							}
							cube_clearPlaneZ( CUBE_MAX_Z-1 );
     68c:	87 e0       	ldi	r24, 0x07	; 7
     68e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <cube_clearPlaneZ>
						}
						break;
	}	

}
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	ff 90       	pop	r15
     69c:	ef 90       	pop	r14
     69e:	08 95       	ret

000006a0 <cube_setLineX>:
		case AXIS_Y :	cube_clearPlaneY( i ); break;
		case AXIS_Z :	cube_clearPlaneZ( i ); break;
	}
}

void cube_setLineX( uint8_t y, uint8_t z ) {
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	18 2f       	mov	r17, r24
     6a8:	d6 2f       	mov	r29, r22
	uint8_t x;
	for (x=0; x<CUBE_MAX_X; x++) cube_setVoxel(x,y,z);
     6aa:	c0 e0       	ldi	r28, 0x00	; 0
     6ac:	4d 2f       	mov	r20, r29
     6ae:	61 2f       	mov	r22, r17
     6b0:	8c 2f       	mov	r24, r28
     6b2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
     6b6:	cf 5f       	subi	r28, 0xFF	; 255
     6b8:	c8 30       	cpi	r28, 0x08	; 8
     6ba:	c1 f7       	brne	.-16     	; 0x6ac <cube_setLineX+0xc>
}
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	08 95       	ret

000006c4 <cube_clearLineX>:

void cube_clearLineX( uint8_t y, uint8_t z ) {
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	18 2f       	mov	r17, r24
     6cc:	d6 2f       	mov	r29, r22
	uint8_t x;
	for (x=0; x<CUBE_MAX_X; x++) cube_clearVoxel(x,y,z);
     6ce:	c0 e0       	ldi	r28, 0x00	; 0
     6d0:	4d 2f       	mov	r20, r29
     6d2:	61 2f       	mov	r22, r17
     6d4:	8c 2f       	mov	r24, r28
     6d6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <cube_clearVoxel>
     6da:	cf 5f       	subi	r28, 0xFF	; 255
     6dc:	c8 30       	cpi	r28, 0x08	; 8
     6de:	c1 f7       	brne	.-16     	; 0x6d0 <cube_clearLineX+0xc>
}
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	08 95       	ret

000006e8 <cube_bitLine>:
 
 @result		Ein Byte, dessen Bits von start bis end gesetzt sind
*/

uint8_t cube_bitLine (uint8_t start, uint8_t end)  {
	return ((0xFF << start) & ~(0xFF << (end+1)));
     6e8:	6f 5f       	subi	r22, 0xFF	; 255
     6ea:	2f ef       	ldi	r18, 0xFF	; 255
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	a9 01       	movw	r20, r18
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <cube_bitLine+0xe>
     6f2:	44 0f       	add	r20, r20
     6f4:	55 1f       	adc	r21, r21
     6f6:	6a 95       	dec	r22
     6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <cube_bitLine+0xa>
     6fa:	ba 01       	movw	r22, r20
     6fc:	60 95       	com	r22
     6fe:	a9 01       	movw	r20, r18
     700:	02 c0       	rjmp	.+4      	; 0x706 <cube_bitLine+0x1e>
     702:	44 0f       	add	r20, r20
     704:	55 1f       	adc	r21, r21
     706:	8a 95       	dec	r24
     708:	e2 f7       	brpl	.-8      	; 0x702 <cube_bitLine+0x1a>
     70a:	ca 01       	movw	r24, r20
}
     70c:	86 23       	and	r24, r22
     70e:	08 95       	ret

00000710 <cube_Filled>:
    x = ((x >> 4) & 0x0f) | ((x << 4) & 0xf0);
    return x;	
}

//ausgefüllter Würfel
void cube_Filled( uint8_t x1, uint8_t y1, uint8_t z1, uint8_t x2, uint8_t y2, uint8_t z2 ) {
     710:	bf 92       	push	r11
     712:	cf 92       	push	r12
     714:	df 92       	push	r13
     716:	ef 92       	push	r14
     718:	ff 92       	push	r15
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	00 d0       	rcall	.+0      	; 0x724 <cube_Filled+0x14>
     724:	00 d0       	rcall	.+0      	; 0x726 <cube_Filled+0x16>
     726:	00 d0       	rcall	.+0      	; 0x728 <cube_Filled+0x18>
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	89 83       	std	Y+1, r24	; 0x01
     72e:	6a 83       	std	Y+2, r22	; 0x02
     730:	4b 83       	std	Y+3, r20	; 0x03
     732:	2c 83       	std	Y+4, r18	; 0x04
     734:	0d 83       	std	Y+5, r16	; 0x05
     736:	ee 82       	std	Y+6, r14	; 0x06
	uint8_t iy,iz;
	
	sortAsc( &x1, &x2 );
     738:	be 01       	movw	r22, r28
     73a:	6c 5f       	subi	r22, 0xFC	; 252
     73c:	7f 4f       	sbci	r23, 0xFF	; 255
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	0e 94 1a 01 	call	0x234	; 0x234 <sortAsc>
	sortAsc( &y1, &y2 );
     746:	be 01       	movw	r22, r28
     748:	6b 5f       	subi	r22, 0xFB	; 251
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	ce 01       	movw	r24, r28
     74e:	02 96       	adiw	r24, 0x02	; 2
     750:	0e 94 1a 01 	call	0x234	; 0x234 <sortAsc>
	sortAsc( &z1, &z2 );
     754:	be 01       	movw	r22, r28
     756:	6a 5f       	subi	r22, 0xFA	; 250
     758:	7f 4f       	sbci	r23, 0xFF	; 255
     75a:	ce 01       	movw	r24, r28
     75c:	03 96       	adiw	r24, 0x03	; 3
     75e:	0e 94 1a 01 	call	0x234	; 0x234 <sortAsc>
	
	for (iz=z1; iz <= z2; iz++)	{
     762:	0b 81       	ldd	r16, Y+3	; 0x03
     764:	ee 80       	ldd	r14, Y+6	; 0x06
     766:	e0 16       	cp	r14, r16
     768:	10 f1       	brcs	.+68     	; 0x7ae <cube_Filled+0x9e>
		for (iy=y1; iy <= y2; iy++) {
     76a:	fa 80       	ldd	r15, Y+2	; 0x02
     76c:	1d 81       	ldd	r17, Y+5	; 0x05
			cube[iz][iy] |= cube_bitLine( x1, x2 );
     76e:	bc 80       	ldd	r11, Y+4	; 0x04
     770:	c9 80       	ldd	r12, Y+1	; 0x01
	sortAsc( &x1, &x2 );
	sortAsc( &y1, &y2 );
	sortAsc( &z1, &z2 );
	
	for (iz=z1; iz <= z2; iz++)	{
		for (iy=y1; iy <= y2; iy++) {
     772:	df 2c       	mov	r13, r15
     774:	1f 15       	cp	r17, r15
     776:	c0 f0       	brcs	.+48     	; 0x7a8 <cube_Filled+0x98>
			cube[iz][iy] |= cube_bitLine( x1, x2 );
     778:	6b 2d       	mov	r22, r11
     77a:	8c 2d       	mov	r24, r12
     77c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <cube_bitLine>
	sortAsc( &x1, &x2 );
	sortAsc( &y1, &y2 );
	sortAsc( &z1, &z2 );
	
	for (iz=z1; iz <= z2; iz++)	{
		for (iy=y1; iy <= y2; iy++) {
     780:	9d 2d       	mov	r25, r13
			cube[iz][iy] |= cube_bitLine( x1, x2 );
     782:	20 2f       	mov	r18, r16
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	22 0f       	add	r18, r18
     788:	33 1f       	adc	r19, r19
     78a:	22 0f       	add	r18, r18
     78c:	33 1f       	adc	r19, r19
     78e:	22 0f       	add	r18, r18
     790:	33 1f       	adc	r19, r19
     792:	f9 01       	movw	r30, r18
     794:	e9 0f       	add	r30, r25
     796:	f1 1d       	adc	r31, r1
     798:	ef 51       	subi	r30, 0x1F	; 31
     79a:	ff 4f       	sbci	r31, 0xFF	; 255
     79c:	40 81       	ld	r20, Z
     79e:	48 2b       	or	r20, r24
     7a0:	40 83       	st	Z, r20
	sortAsc( &x1, &x2 );
	sortAsc( &y1, &y2 );
	sortAsc( &z1, &z2 );
	
	for (iz=z1; iz <= z2; iz++)	{
		for (iy=y1; iy <= y2; iy++) {
     7a2:	9f 5f       	subi	r25, 0xFF	; 255
     7a4:	19 17       	cp	r17, r25
     7a6:	a8 f7       	brcc	.-22     	; 0x792 <cube_Filled+0x82>
	
	sortAsc( &x1, &x2 );
	sortAsc( &y1, &y2 );
	sortAsc( &z1, &z2 );
	
	for (iz=z1; iz <= z2; iz++)	{
     7a8:	0f 5f       	subi	r16, 0xFF	; 255
     7aa:	e0 16       	cp	r14, r16
     7ac:	18 f7       	brcc	.-58     	; 0x774 <cube_Filled+0x64>
		for (iy=y1; iy <= y2; iy++) {
			cube[iz][iy] |= cube_bitLine( x1, x2 );
		}
	}	
}
     7ae:	26 96       	adiw	r28, 0x06	; 6
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	bf 90       	pop	r11
     7cc:	08 95       	ret

000007ce <cube_Walls>:


//Seiten eines Würfel
void cube_Walls( uint8_t x1, uint8_t y1, uint8_t z1, uint8_t x2, uint8_t y2, uint8_t z2 ) {
     7ce:	4f 92       	push	r4
     7d0:	5f 92       	push	r5
     7d2:	6f 92       	push	r6
     7d4:	7f 92       	push	r7
     7d6:	8f 92       	push	r8
     7d8:	9f 92       	push	r9
     7da:	af 92       	push	r10
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	00 d0       	rcall	.+0      	; 0x7f0 <cube_Walls+0x22>
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <cube_Walls+0x24>
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <cube_Walls+0x26>
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	89 83       	std	Y+1, r24	; 0x01
     7fa:	6a 83       	std	Y+2, r22	; 0x02
     7fc:	4b 83       	std	Y+3, r20	; 0x03
     7fe:	2c 83       	std	Y+4, r18	; 0x04
     800:	0d 83       	std	Y+5, r16	; 0x05
     802:	ee 82       	std	Y+6, r14	; 0x06
	uint8_t iy,iz;
	
	sortAsc( &x1, &x2 );
     804:	be 01       	movw	r22, r28
     806:	6c 5f       	subi	r22, 0xFC	; 252
     808:	7f 4f       	sbci	r23, 0xFF	; 255
     80a:	ce 01       	movw	r24, r28
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	0e 94 1a 01 	call	0x234	; 0x234 <sortAsc>
	sortAsc( &y1, &y2 );
     812:	be 01       	movw	r22, r28
     814:	6b 5f       	subi	r22, 0xFB	; 251
     816:	7f 4f       	sbci	r23, 0xFF	; 255
     818:	ce 01       	movw	r24, r28
     81a:	02 96       	adiw	r24, 0x02	; 2
     81c:	0e 94 1a 01 	call	0x234	; 0x234 <sortAsc>
	sortAsc( &z1, &z2 );
     820:	be 01       	movw	r22, r28
     822:	6a 5f       	subi	r22, 0xFA	; 250
     824:	7f 4f       	sbci	r23, 0xFF	; 255
     826:	ce 01       	movw	r24, r28
     828:	03 96       	adiw	r24, 0x03	; 3
     82a:	0e 94 1a 01 	call	0x234	; 0x234 <sortAsc>
	
	for (iz=z1; iz <= z2; iz++)	{
     82e:	7b 80       	ldd	r7, Y+3	; 0x03
     830:	6e 80       	ldd	r6, Y+6	; 0x06
     832:	67 14       	cp	r6, r7
     834:	08 f4       	brcc	.+2      	; 0x838 <cube_Walls+0x6a>
     836:	45 c0       	rjmp	.+138    	; 0x8c2 <__stack+0x63>
		for (iy=y1; iy <= y2; iy++) {
     838:	aa 80       	ldd	r10, Y+2	; 0x02
     83a:	cd 80       	ldd	r12, Y+5	; 0x05
			
			if (iy == y1 || iy == y2 || iz == z1 || iz == z2) {
				cube[iz][iy] = cube_bitLine(x1,x2);
			} else	{
				cube[iz][iy] |= ((0x01 << x1) | (0x01 << x2));
     83c:	99 80       	ldd	r9, Y+1	; 0x01
     83e:	8c 80       	ldd	r8, Y+4	; 0x04
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	9c 01       	movw	r18, r24
     846:	08 2c       	mov	r0, r8
     848:	02 c0       	rjmp	.+4      	; 0x84e <cube_Walls+0x80>
     84a:	22 0f       	add	r18, r18
     84c:	33 1f       	adc	r19, r19
     84e:	0a 94       	dec	r0
     850:	e2 f7       	brpl	.-8      	; 0x84a <cube_Walls+0x7c>
     852:	09 2c       	mov	r0, r9
     854:	02 c0       	rjmp	.+4      	; 0x85a <cube_Walls+0x8c>
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	0a 94       	dec	r0
     85c:	e2 f7       	brpl	.-8      	; 0x856 <cube_Walls+0x88>
     85e:	52 2e       	mov	r5, r18
     860:	58 2a       	or	r5, r24
	
	sortAsc( &x1, &x2 );
	sortAsc( &y1, &y2 );
	sortAsc( &z1, &z2 );
	
	for (iz=z1; iz <= z2; iz++)	{
     862:	b7 2c       	mov	r11, r7
		for (iy=y1; iy <= y2; iy++) {
     864:	4a 2c       	mov	r4, r10
     866:	ca 14       	cp	r12, r10
     868:	48 f1       	brcs	.+82     	; 0x8bc <__stack+0x5d>
     86a:	d4 2c       	mov	r13, r4
			
			if (iy == y1 || iy == y2 || iz == z1 || iz == z2) {
				cube[iz][iy] = cube_bitLine(x1,x2);
     86c:	eb 2c       	mov	r14, r11
     86e:	f1 2c       	mov	r15, r1
     870:	ee 0c       	add	r14, r14
     872:	ff 1c       	adc	r15, r15
     874:	ee 0c       	add	r14, r14
     876:	ff 1c       	adc	r15, r15
     878:	ee 0c       	add	r14, r14
     87a:	ff 1c       	adc	r15, r15
	sortAsc( &z1, &z2 );
	
	for (iz=z1; iz <= z2; iz++)	{
		for (iy=y1; iy <= y2; iy++) {
			
			if (iy == y1 || iy == y2 || iz == z1 || iz == z2) {
     87c:	da 14       	cp	r13, r10
     87e:	31 f0       	breq	.+12     	; 0x88c <__stack+0x2d>
     880:	cd 14       	cp	r12, r13
     882:	21 f0       	breq	.+8      	; 0x88c <__stack+0x2d>
     884:	b7 14       	cp	r11, r7
     886:	11 f0       	breq	.+4      	; 0x88c <__stack+0x2d>
     888:	6b 10       	cpse	r6, r11
     88a:	0d c0       	rjmp	.+26     	; 0x8a6 <__stack+0x47>
				cube[iz][iy] = cube_bitLine(x1,x2);
     88c:	0d 2d       	mov	r16, r13
     88e:	10 e0       	ldi	r17, 0x00	; 0
     890:	68 2d       	mov	r22, r8
     892:	89 2d       	mov	r24, r9
     894:	0e 94 74 03 	call	0x6e8	; 0x6e8 <cube_bitLine>
     898:	f8 01       	movw	r30, r16
     89a:	ee 0d       	add	r30, r14
     89c:	ff 1d       	adc	r31, r15
     89e:	ef 51       	subi	r30, 0x1F	; 31
     8a0:	ff 4f       	sbci	r31, 0xFF	; 255
     8a2:	80 83       	st	Z, r24
     8a4:	08 c0       	rjmp	.+16     	; 0x8b6 <__stack+0x57>
			} else	{
				cube[iz][iy] |= ((0x01 << x1) | (0x01 << x2));
     8a6:	f7 01       	movw	r30, r14
     8a8:	ed 0d       	add	r30, r13
     8aa:	f1 1d       	adc	r31, r1
     8ac:	ef 51       	subi	r30, 0x1F	; 31
     8ae:	ff 4f       	sbci	r31, 0xFF	; 255
     8b0:	80 81       	ld	r24, Z
     8b2:	85 29       	or	r24, r5
     8b4:	80 83       	st	Z, r24
	sortAsc( &x1, &x2 );
	sortAsc( &y1, &y2 );
	sortAsc( &z1, &z2 );
	
	for (iz=z1; iz <= z2; iz++)	{
		for (iy=y1; iy <= y2; iy++) {
     8b6:	d3 94       	inc	r13
     8b8:	cd 14       	cp	r12, r13
     8ba:	00 f7       	brcc	.-64     	; 0x87c <__stack+0x1d>
	
	sortAsc( &x1, &x2 );
	sortAsc( &y1, &y2 );
	sortAsc( &z1, &z2 );
	
	for (iz=z1; iz <= z2; iz++)	{
     8bc:	b3 94       	inc	r11
     8be:	6b 14       	cp	r6, r11
     8c0:	90 f6       	brcc	.-92     	; 0x866 <__stack+0x7>
			} else	{
				cube[iz][iy] |= ((0x01 << x1) | (0x01 << x2));
			}
		}
	}
}
     8c2:	26 96       	adiw	r28, 0x06	; 6
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	cd bf       	out	0x3d, r28	; 61
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	df 90       	pop	r13
     8dc:	cf 90       	pop	r12
     8de:	bf 90       	pop	r11
     8e0:	af 90       	pop	r10
     8e2:	9f 90       	pop	r9
     8e4:	8f 90       	pop	r8
     8e6:	7f 90       	pop	r7
     8e8:	6f 90       	pop	r6
     8ea:	5f 90       	pop	r5
     8ec:	4f 90       	pop	r4
     8ee:	08 95       	ret

000008f0 <cube_Edges>:

//Kanten eines Würfel
void cube_Edges( uint8_t x1, uint8_t y1, uint8_t z1, uint8_t x2, uint8_t y2, uint8_t z2 ) {
     8f0:	df 92       	push	r13
     8f2:	ef 92       	push	r14
     8f4:	ff 92       	push	r15
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	00 d0       	rcall	.+0      	; 0x900 <cube_Edges+0x10>
     900:	00 d0       	rcall	.+0      	; 0x902 <cube_Edges+0x12>
     902:	00 d0       	rcall	.+0      	; 0x904 <cube_Edges+0x14>
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	89 83       	std	Y+1, r24	; 0x01
     90a:	6a 83       	std	Y+2, r22	; 0x02
     90c:	4b 83       	std	Y+3, r20	; 0x03
     90e:	2c 83       	std	Y+4, r18	; 0x04
     910:	0d 83       	std	Y+5, r16	; 0x05
     912:	ee 82       	std	Y+6, r14	; 0x06
	uint8_t iy,iz;
	
	sortAsc( &x1, &x2 );
     914:	be 01       	movw	r22, r28
     916:	6c 5f       	subi	r22, 0xFC	; 252
     918:	7f 4f       	sbci	r23, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	0e 94 1a 01 	call	0x234	; 0x234 <sortAsc>
	sortAsc( &y1, &y2 );
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	ce 01       	movw	r24, r28
     92a:	02 96       	adiw	r24, 0x02	; 2
     92c:	0e 94 1a 01 	call	0x234	; 0x234 <sortAsc>
	sortAsc( &z1, &z2 );
     930:	be 01       	movw	r22, r28
     932:	6a 5f       	subi	r22, 0xFA	; 250
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	ce 01       	movw	r24, r28
     938:	03 96       	adiw	r24, 0x03	; 3
     93a:	0e 94 1a 01 	call	0x234	; 0x234 <sortAsc>
	
	// Linien entlang der X-Achse
	cube[z1][y1] = cube_bitLine(x1,x2);
     93e:	eb 80       	ldd	r14, Y+3	; 0x03
     940:	f1 2c       	mov	r15, r1
     942:	da 80       	ldd	r13, Y+2	; 0x02
     944:	0d 2d       	mov	r16, r13
     946:	10 e0       	ldi	r17, 0x00	; 0
     948:	6c 81       	ldd	r22, Y+4	; 0x04
     94a:	89 81       	ldd	r24, Y+1	; 0x01
     94c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <cube_bitLine>
     950:	a7 01       	movw	r20, r14
     952:	44 0f       	add	r20, r20
     954:	55 1f       	adc	r21, r21
     956:	44 0f       	add	r20, r20
     958:	55 1f       	adc	r21, r21
     95a:	44 0f       	add	r20, r20
     95c:	55 1f       	adc	r21, r21
     95e:	fa 01       	movw	r30, r20
     960:	e0 0f       	add	r30, r16
     962:	f1 1f       	adc	r31, r17
     964:	ef 51       	subi	r30, 0x1F	; 31
     966:	ff 4f       	sbci	r31, 0xFF	; 255
     968:	80 83       	st	Z, r24
	cube[z1][y2] = cube_bitLine(x1,x2);
     96a:	9d 81       	ldd	r25, Y+5	; 0x05
     96c:	29 2f       	mov	r18, r25
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	42 0f       	add	r20, r18
     972:	53 1f       	adc	r21, r19
     974:	fa 01       	movw	r30, r20
     976:	ef 51       	subi	r30, 0x1F	; 31
     978:	ff 4f       	sbci	r31, 0xFF	; 255
     97a:	80 83       	st	Z, r24
	cube[z2][y1] = cube_bitLine(x1,x2);
     97c:	4e 81       	ldd	r20, Y+6	; 0x06
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	44 0f       	add	r20, r20
     982:	55 1f       	adc	r21, r21
     984:	44 0f       	add	r20, r20
     986:	55 1f       	adc	r21, r21
     988:	44 0f       	add	r20, r20
     98a:	55 1f       	adc	r21, r21
     98c:	04 0f       	add	r16, r20
     98e:	15 1f       	adc	r17, r21
     990:	f8 01       	movw	r30, r16
     992:	ef 51       	subi	r30, 0x1F	; 31
     994:	ff 4f       	sbci	r31, 0xFF	; 255
     996:	80 83       	st	Z, r24
	cube[z2][y2] = cube_bitLine(x1,x2);
     998:	24 0f       	add	r18, r20
     99a:	35 1f       	adc	r19, r21
     99c:	f9 01       	movw	r30, r18
     99e:	ef 51       	subi	r30, 0x1F	; 31
     9a0:	ff 4f       	sbci	r31, 0xFF	; 255
     9a2:	80 83       	st	Z, r24

	// Linien entlang der Y-Achse
	for (iy=y1; iy <= y2; iy++)	{
     9a4:	9d 15       	cp	r25, r13
     9a6:	c0 f0       	brcs	.+48     	; 0x9d8 <cube_Edges+0xe8>
		cube_setVoxel(x1,iy,z1);
     9a8:	4b 81       	ldd	r20, Y+3	; 0x03
     9aa:	6d 2d       	mov	r22, r13
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
		cube_setVoxel(x1,iy,z2);
     9b2:	4e 81       	ldd	r20, Y+6	; 0x06
     9b4:	6d 2d       	mov	r22, r13
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
		cube_setVoxel(x2,iy,z1);
     9bc:	4b 81       	ldd	r20, Y+3	; 0x03
     9be:	6d 2d       	mov	r22, r13
     9c0:	8c 81       	ldd	r24, Y+4	; 0x04
     9c2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
		cube_setVoxel(x2,iy,z2);
     9c6:	4e 81       	ldd	r20, Y+6	; 0x06
     9c8:	6d 2d       	mov	r22, r13
     9ca:	8c 81       	ldd	r24, Y+4	; 0x04
     9cc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
	cube[z1][y2] = cube_bitLine(x1,x2);
	cube[z2][y1] = cube_bitLine(x1,x2);
	cube[z2][y2] = cube_bitLine(x1,x2);

	// Linien entlang der Y-Achse
	for (iy=y1; iy <= y2; iy++)	{
     9d0:	d3 94       	inc	r13
     9d2:	8d 81       	ldd	r24, Y+5	; 0x05
     9d4:	8d 15       	cp	r24, r13
     9d6:	40 f7       	brcc	.-48     	; 0x9a8 <cube_Edges+0xb8>
		cube_setVoxel(x2,iy,z1);
		cube_setVoxel(x2,iy,z2);
	}

	// Linien entlang der Z-Achse
	for (iz=z1; iz <= z2; iz++) {
     9d8:	1b 81       	ldd	r17, Y+3	; 0x03
     9da:	8e 81       	ldd	r24, Y+6	; 0x06
     9dc:	81 17       	cp	r24, r17
     9de:	c0 f0       	brcs	.+48     	; 0xa10 <cube_Edges+0x120>
		cube_setVoxel(x1,y1,iz);
     9e0:	41 2f       	mov	r20, r17
     9e2:	6a 81       	ldd	r22, Y+2	; 0x02
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
		cube_setVoxel(x1,y2,iz);
     9ea:	41 2f       	mov	r20, r17
     9ec:	6d 81       	ldd	r22, Y+5	; 0x05
     9ee:	89 81       	ldd	r24, Y+1	; 0x01
     9f0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
		cube_setVoxel(x2,y1,iz);
     9f4:	41 2f       	mov	r20, r17
     9f6:	6a 81       	ldd	r22, Y+2	; 0x02
     9f8:	8c 81       	ldd	r24, Y+4	; 0x04
     9fa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
		cube_setVoxel(x2,y2,iz);
     9fe:	41 2f       	mov	r20, r17
     a00:	6d 81       	ldd	r22, Y+5	; 0x05
     a02:	8c 81       	ldd	r24, Y+4	; 0x04
     a04:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
		cube_setVoxel(x2,iy,z1);
		cube_setVoxel(x2,iy,z2);
	}

	// Linien entlang der Z-Achse
	for (iz=z1; iz <= z2; iz++) {
     a08:	1f 5f       	subi	r17, 0xFF	; 255
     a0a:	8e 81       	ldd	r24, Y+6	; 0x06
     a0c:	81 17       	cp	r24, r17
     a0e:	40 f7       	brcc	.-48     	; 0x9e0 <cube_Edges+0xf0>
		cube_setVoxel(x1,y1,iz);
		cube_setVoxel(x1,y2,iz);
		cube_setVoxel(x2,y1,iz);
		cube_setVoxel(x2,y2,iz);
	}	
}
     a10:	26 96       	adiw	r28, 0x06	; 6
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	08 95       	ret

00000a2c <cube_Line>:
	cube[layer][col] = data;
}


// Parameetr im Bereich von 0..7
void cube_Line(  uint8_t x1, uint8_t y1, uint8_t z1, uint8_t x2, uint8_t y2, uint8_t z2  ) {
     a2c:	3f 92       	push	r3
     a2e:	4f 92       	push	r4
     a30:	5f 92       	push	r5
     a32:	6f 92       	push	r6
     a34:	7f 92       	push	r7
     a36:	8f 92       	push	r8
     a38:	9f 92       	push	r9
     a3a:	af 92       	push	r10
     a3c:	bf 92       	push	r11
     a3e:	cf 92       	push	r12
     a40:	df 92       	push	r13
     a42:	ef 92       	push	r14
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
    int8_t ax, ay, az;
    int8_t sx, sy, sz;
	int8_t  x,  y,  z;
	int8_t xd, yd, zd; 	
	
    dx = x2 - x1;
     a4e:	52 2f       	mov	r21, r18
     a50:	58 1b       	sub	r21, r24
    dy = y2 - y1;
     a52:	30 2f       	mov	r19, r16
     a54:	36 1b       	sub	r19, r22
    dz = z2 - z1;
     a56:	9e 2d       	mov	r25, r14
     a58:	94 1b       	sub	r25, r20
	
    ax = ABS(dx) << 1;
     a5a:	c5 2f       	mov	r28, r21
     a5c:	dd 27       	eor	r29, r29
     a5e:	c7 fd       	sbrc	r28, 7
     a60:	d0 95       	com	r29
     a62:	dd 23       	and	r29, r29
     a64:	1c f4       	brge	.+6      	; 0xa6c <cube_Line+0x40>
     a66:	d1 95       	neg	r29
     a68:	c1 95       	neg	r28
     a6a:	d1 09       	sbc	r29, r1
     a6c:	cc 0f       	add	r28, r28
     a6e:	dd 1f       	adc	r29, r29
     a70:	fc 2f       	mov	r31, r28
    ay = ABS(dy) << 1;
     a72:	c3 2e       	mov	r12, r19
     a74:	dd 24       	eor	r13, r13
     a76:	c7 fc       	sbrc	r12, 7
     a78:	d0 94       	com	r13
     a7a:	dd 20       	and	r13, r13
     a7c:	1c f4       	brge	.+6      	; 0xa84 <cube_Line+0x58>
     a7e:	d1 94       	neg	r13
     a80:	c1 94       	neg	r12
     a82:	d1 08       	sbc	r13, r1
     a84:	cc 0c       	add	r12, r12
     a86:	dd 1c       	adc	r13, r13
     a88:	ec 2d       	mov	r30, r12
    az = ABS(dz) << 1;	
     a8a:	a9 2e       	mov	r10, r25
     a8c:	bb 24       	eor	r11, r11
     a8e:	a7 fc       	sbrc	r10, 7
     a90:	b0 94       	com	r11
     a92:	bb 20       	and	r11, r11
     a94:	1c f4       	brge	.+6      	; 0xa9c <cube_Line+0x70>
     a96:	b1 94       	neg	r11
     a98:	a1 94       	neg	r10
     a9a:	b1 08       	sbc	r11, r1
     a9c:	aa 0c       	add	r10, r10
     a9e:	bb 1c       	adc	r11, r11
     aa0:	7a 2d       	mov	r23, r10
	
    sx = (dx < 0) ? -1 : dx>0 ? 1 : 0;		//Vorzeichen von dx liefern
     aa2:	55 23       	and	r21, r21
     aa4:	34 f0       	brlt	.+12     	; 0xab2 <cube_Line+0x86>
     aa6:	77 24       	eor	r7, r7
     aa8:	73 94       	inc	r7
     aaa:	15 16       	cp	r1, r21
     aac:	24 f0       	brlt	.+8      	; 0xab6 <cube_Line+0x8a>
     aae:	71 2c       	mov	r7, r1
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <cube_Line+0x8a>
     ab2:	77 24       	eor	r7, r7
     ab4:	7a 94       	dec	r7
    sy = (dy < 0) ? -1 : dy>0 ? 1 : 0;
     ab6:	33 23       	and	r19, r19
     ab8:	34 f0       	brlt	.+12     	; 0xac6 <cube_Line+0x9a>
     aba:	66 24       	eor	r6, r6
     abc:	63 94       	inc	r6
     abe:	13 16       	cp	r1, r19
     ac0:	24 f0       	brlt	.+8      	; 0xaca <cube_Line+0x9e>
     ac2:	61 2c       	mov	r6, r1
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <cube_Line+0x9e>
     ac6:	66 24       	eor	r6, r6
     ac8:	6a 94       	dec	r6
    sz = (dz < 0) ? -1 : dz>0 ? 1 : 0;
     aca:	99 23       	and	r25, r25
     acc:	34 f0       	brlt	.+12     	; 0xada <cube_Line+0xae>
     ace:	55 24       	eor	r5, r5
     ad0:	53 94       	inc	r5
     ad2:	19 16       	cp	r1, r25
     ad4:	24 f0       	brlt	.+8      	; 0xade <cube_Line+0xb2>
     ad6:	51 2c       	mov	r5, r1
     ad8:	02 c0       	rjmp	.+4      	; 0xade <cube_Line+0xb2>
     ada:	55 24       	eor	r5, r5
     adc:	5a 94       	dec	r5
	
    x = x1;
     ade:	f8 2e       	mov	r15, r24
    y = y1;
     ae0:	96 2e       	mov	r9, r22
    z = z1;	
     ae2:	84 2e       	mov	r8, r20
	
    if (ax >= MAX(ay, az))  {          /* x dominant */
     ae4:	8c 2d       	mov	r24, r12
     ae6:	e7 17       	cp	r30, r23
     ae8:	0c f4       	brge	.+2      	; 0xaec <cube_Line+0xc0>
     aea:	8a 2d       	mov	r24, r10
     aec:	f8 17       	cp	r31, r24
     aee:	2c f1       	brlt	.+74     	; 0xb3a <cube_Line+0x10e>
	    yd = ay - (ax >> 1);
     af0:	4c 2c       	mov	r4, r12
     af2:	8c 2f       	mov	r24, r28
     af4:	85 95       	asr	r24
     af6:	c8 1a       	sub	r12, r24
	    zd = az - (ax >> 1);
     af8:	3a 2c       	mov	r3, r10
     afa:	a8 1a       	sub	r10, r24
	    for (;;)  {
		    cube_setVoxel(x, y, z);
		    if (x == x2) return;
     afc:	02 2f       	mov	r16, r18
     afe:	10 e0       	ldi	r17, 0x00	; 0
	
    if (ax >= MAX(ay, az))  {          /* x dominant */
	    yd = ay - (ax >> 1);
	    zd = az - (ax >> 1);
	    for (;;)  {
		    cube_setVoxel(x, y, z);
     b00:	b8 2c       	mov	r11, r8
     b02:	df 2c       	mov	r13, r15
     b04:	48 2d       	mov	r20, r8
     b06:	69 2d       	mov	r22, r9
     b08:	8f 2d       	mov	r24, r15
     b0a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
		    if (x == x2) return;
     b0e:	8f 2d       	mov	r24, r15
     b10:	99 27       	eor	r25, r25
     b12:	87 fd       	sbrc	r24, 7
     b14:	90 95       	com	r25
     b16:	80 17       	cp	r24, r16
     b18:	91 07       	cpc	r25, r17
     b1a:	09 f4       	brne	.+2      	; 0xb1e <cube_Line+0xf2>
     b1c:	61 c0       	rjmp	.+194    	; 0xbe0 <cube_Line+0x1b4>
		    if (yd >= 0) {
     b1e:	cc 20       	and	r12, r12
     b20:	14 f0       	brlt	.+4      	; 0xb26 <cube_Line+0xfa>
			    y += sy;
     b22:	96 0c       	add	r9, r6
			    yd -= ax;
     b24:	cc 1a       	sub	r12, r28
		    }
		    if (zd >= 0) {
     b26:	aa 20       	and	r10, r10
     b28:	1c f0       	brlt	.+6      	; 0xb30 <cube_Line+0x104>
			    z += sz;
     b2a:	8b 2c       	mov	r8, r11
     b2c:	85 0c       	add	r8, r5
			    zd -= ax;
     b2e:	ac 1a       	sub	r10, r28
		    }
		    x += sx;
     b30:	fd 2c       	mov	r15, r13
     b32:	f7 0c       	add	r15, r7
		    yd += ay;
     b34:	c4 0c       	add	r12, r4
		    zd += az;
     b36:	a3 0c       	add	r10, r3
	    }
     b38:	e3 cf       	rjmp	.-58     	; 0xb00 <cube_Line+0xd4>
    } else if (ay >= MAX(ax, az))  {          /* y dominant */
     b3a:	8c 2f       	mov	r24, r28
     b3c:	f7 17       	cp	r31, r23
     b3e:	0c f4       	brge	.+2      	; 0xb42 <cube_Line+0x116>
     b40:	8a 2d       	mov	r24, r10
     b42:	e8 17       	cp	r30, r24
     b44:	1c f1       	brlt	.+70     	; 0xb8c <cube_Line+0x160>
	    xd = ax - (ay >> 1);
     b46:	4c 2e       	mov	r4, r28
     b48:	8c 2d       	mov	r24, r12
     b4a:	85 95       	asr	r24
     b4c:	c8 1b       	sub	r28, r24
	    zd = az - (ay >> 1);
     b4e:	3a 2c       	mov	r3, r10
     b50:	a8 1a       	sub	r10, r24
	    for (;;) {
		    cube_setVoxel(x, y, z);
		    if (y == y2) return;
     b52:	10 e0       	ldi	r17, 0x00	; 0
	    }
    } else if (ay >= MAX(ax, az))  {          /* y dominant */
	    xd = ax - (ay >> 1);
	    zd = az - (ay >> 1);
	    for (;;) {
		    cube_setVoxel(x, y, z);
     b54:	e8 2c       	mov	r14, r8
     b56:	d9 2d       	mov	r29, r9
     b58:	48 2d       	mov	r20, r8
     b5a:	69 2d       	mov	r22, r9
     b5c:	8f 2d       	mov	r24, r15
     b5e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
		    if (y == y2) return;
     b62:	89 2d       	mov	r24, r9
     b64:	99 27       	eor	r25, r25
     b66:	87 fd       	sbrc	r24, 7
     b68:	90 95       	com	r25
     b6a:	80 17       	cp	r24, r16
     b6c:	91 07       	cpc	r25, r17
     b6e:	c1 f1       	breq	.+112    	; 0xbe0 <cube_Line+0x1b4>
		    if (xd >= 0) {
     b70:	cc 23       	and	r28, r28
     b72:	14 f0       	brlt	.+4      	; 0xb78 <cube_Line+0x14c>
			    x += sx;
     b74:	f7 0c       	add	r15, r7
			    xd -= ay;
     b76:	cc 19       	sub	r28, r12
		    }
		    if (zd >= 0) {
     b78:	aa 20       	and	r10, r10
     b7a:	1c f0       	brlt	.+6      	; 0xb82 <cube_Line+0x156>
			    z += sz;
     b7c:	8e 2c       	mov	r8, r14
     b7e:	85 0c       	add	r8, r5
			    zd -= ay;
     b80:	ac 18       	sub	r10, r12
		    }
		    y += sy;
     b82:	9d 2e       	mov	r9, r29
     b84:	96 0c       	add	r9, r6
		    xd += ax;
     b86:	c4 0d       	add	r28, r4
		    zd += az;
     b88:	a3 0c       	add	r10, r3
	    }
     b8a:	e4 cf       	rjmp	.-56     	; 0xb54 <cube_Line+0x128>
    } else if (az >= MAX(ax, ay)) {            /* z dominant */
     b8c:	8c 2f       	mov	r24, r28
     b8e:	ce 17       	cp	r28, r30
     b90:	0c f4       	brge	.+2      	; 0xb94 <cube_Line+0x168>
     b92:	8c 2d       	mov	r24, r12
     b94:	78 17       	cp	r23, r24
     b96:	24 f1       	brlt	.+72     	; 0xbe0 <cube_Line+0x1b4>
	    xd = ax - (az >> 1);
     b98:	4c 2e       	mov	r4, r28
     b9a:	8a 2d       	mov	r24, r10
     b9c:	85 95       	asr	r24
     b9e:	c8 1b       	sub	r28, r24
	    yd = ay - (az >> 1);
     ba0:	3c 2c       	mov	r3, r12
     ba2:	c8 1a       	sub	r12, r24
	    for (;;) {
		    cube_setVoxel(x, y, z);
		    if (z == z2) return;
     ba4:	0e 2d       	mov	r16, r14
     ba6:	10 e0       	ldi	r17, 0x00	; 0
	    }
    } else if (az >= MAX(ax, ay)) {            /* z dominant */
	    xd = ax - (az >> 1);
	    yd = ay - (az >> 1);
	    for (;;) {
		    cube_setVoxel(x, y, z);
     ba8:	d8 2d       	mov	r29, r8
     baa:	e9 2c       	mov	r14, r9
     bac:	48 2d       	mov	r20, r8
     bae:	69 2d       	mov	r22, r9
     bb0:	8f 2d       	mov	r24, r15
     bb2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
		    if (z == z2) return;
     bb6:	88 2d       	mov	r24, r8
     bb8:	99 27       	eor	r25, r25
     bba:	87 fd       	sbrc	r24, 7
     bbc:	90 95       	com	r25
     bbe:	80 17       	cp	r24, r16
     bc0:	91 07       	cpc	r25, r17
     bc2:	71 f0       	breq	.+28     	; 0xbe0 <cube_Line+0x1b4>
		    if (xd >= 0) {
     bc4:	cc 23       	and	r28, r28
     bc6:	14 f0       	brlt	.+4      	; 0xbcc <cube_Line+0x1a0>
			    x += sx;
     bc8:	f7 0c       	add	r15, r7
			    xd -= az;
     bca:	ca 19       	sub	r28, r10
		    }
		    if (yd >= 0) {
     bcc:	cc 20       	and	r12, r12
     bce:	1c f0       	brlt	.+6      	; 0xbd6 <cube_Line+0x1aa>
			    y += sy;
     bd0:	9e 2c       	mov	r9, r14
     bd2:	96 0c       	add	r9, r6
			    yd -= az;
     bd4:	ca 18       	sub	r12, r10
		    }
		    z += sz;
     bd6:	8d 2e       	mov	r8, r29
     bd8:	85 0c       	add	r8, r5
		    xd += ax;
     bda:	c4 0d       	add	r28, r4
		    yd += ay;
     bdc:	c3 0c       	add	r12, r3
	    }
     bde:	e4 cf       	rjmp	.-56     	; 0xba8 <cube_Line+0x17c>
    }
	
	
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	bf 90       	pop	r11
     bf2:	af 90       	pop	r10
     bf4:	9f 90       	pop	r9
     bf6:	8f 90       	pop	r8
     bf8:	7f 90       	pop	r7
     bfa:	6f 90       	pop	r6
     bfc:	5f 90       	pop	r5
     bfe:	4f 90       	pop	r4
     c00:	3f 90       	pop	r3
     c02:	08 95       	ret

00000c04 <drv_Register_Callback>:
drv_callback_t	d573_CB_Handler = NULL;			///@brief Adresse Callback-Routine



void drv_Register_Callback( drv_callback_t cbf ) {
	d573_CB_Handler = cbf;
     c04:	90 93 97 00 	sts	0x0097, r25
     c08:	80 93 96 00 	sts	0x0096, r24
     c0c:	08 95       	ret

00000c0e <drv_clockToLatch>:
}

//interne Funktion, nicht ins H-File aufnehmen
void drv_clockToLatch( uint8_t latch, uint8_t value ) {

	D573_Data_Port = value;			//Datenwort an Eingänge der D-Latches anlegen
     c0e:	68 bb       	out	0x18, r22	; 24
	asm volatile ("nop");
     c10:	00 00       	nop
	D573_Clock_PORT = (1<<latch);	//Clock-Leitung des betreffenden Latches aktivieren
     c12:	21 e0       	ldi	r18, 0x01	; 1
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	a9 01       	movw	r20, r18
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <drv_clockToLatch+0x10>
     c1a:	44 0f       	add	r20, r20
     c1c:	55 1f       	adc	r21, r21
     c1e:	8a 95       	dec	r24
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <drv_clockToLatch+0xc>
     c22:	45 bb       	out	0x15, r20	; 21

	asm volatile ("nop");			//
     c24:	00 00       	nop
//	_delay_us(1);					//

	D573_Clock_PORT = 0;			//Clock-Leitung wieder auf Low setzen
     c26:	15 ba       	out	0x15, r1	; 21

	asm volatile ("nop");			//warte, bis Signal Low-Pegel erreicht hat
     c28:	00 00       	nop
     c2a:	08 95       	ret

00000c2c <drv_drive>:
//	_delay_us(20);					//
	//Das Datenwort an den Eingangen der D-Latches stehen lassen
}

//Methode treibt alle 8 Ebenen an
void drv_drive() {		//call every 1 ms
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
	uint8_t i;

	if (d573_CB_Handler != NULL) { d573_CB_Handler(CB_DRIVE_ENTER); }		//Callback to status report
     c34:	e0 91 96 00 	lds	r30, 0x0096
     c38:	f0 91 97 00 	lds	r31, 0x0097
     c3c:	30 97       	sbiw	r30, 0x00	; 0
     c3e:	11 f0       	breq	.+4      	; 0xc44 <drv_drive+0x18>
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	09 95       	icall
		
	D573_LAYER_OFF;			//Enable-Pin für Ebenenmultiplexer auf 0 -> alle Ebeben ausschalten
     c44:	97 98       	cbi	0x12, 7	; 18
	D573_LATCH_OUT_DIS;		//Latches OE ausschalten, damit Low an Low-Side-Treiber
     c46:	93 9a       	sbi	0x12, 3	; 18
	D573_LAYER_ADR_CLEAR;	//Adressbits E0..E2 auf 0 setzen
     c48:	82 b3       	in	r24, 0x12	; 18
     c4a:	8f 78       	andi	r24, 0x8F	; 143
     c4c:	82 bb       	out	0x12, r24	; 18
	
	d573_layer = ((d573_layer+1) % CUBE_MAX_LAYERS);		//Dieser Layer soll jetzt als nächstes angezeigt werden  (0..7)
     c4e:	80 91 98 00 	lds	r24, 0x0098
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	87 70       	andi	r24, 0x07	; 7
     c58:	90 78       	andi	r25, 0x80	; 128
     c5a:	80 93 98 00 	sts	0x0098, r24

	if ((d573_layer == 0) && (d573_CB_Handler != NULL)) {	//Sync anzeigen, wenn es eine Callback-Funktion gibt
     c5e:	80 91 98 00 	lds	r24, 0x0098
     c62:	81 11       	cpse	r24, r1
     c64:	50 c0       	rjmp	.+160    	; 0xd06 <drv_drive+0xda>
     c66:	e0 91 96 00 	lds	r30, 0x0096
     c6a:	f0 91 97 00 	lds	r31, 0x0097
     c6e:	30 97       	sbiw	r30, 0x00	; 0
     c70:	09 f4       	brne	.+2      	; 0xc74 <drv_drive+0x48>
     c72:	49 c0       	rjmp	.+146    	; 0xd06 <drv_drive+0xda>
		d573_CB_Handler(CB_SYNC);							//Wird nur bei Layer 0 ausgelöst
     c74:	09 95       	icall
     c76:	47 c0       	rjmp	.+142    	; 0xd06 <drv_drive+0xda>
	}
		
	//transfer the content of d573data array to the latches
	for (i=0; i<CUBE_MAX_COLS; i++) {
		if ( (D573_MIRRORMASK & (1<<i) ) > 0 ) {
     c78:	c8 01       	movw	r24, r16
     c7a:	0c 2e       	mov	r0, r28
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <drv_drive+0x56>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <drv_drive+0x52>
     c86:	80 7f       	andi	r24, 0xF0	; 240
     c88:	99 27       	eor	r25, r25
     c8a:	18 16       	cp	r1, r24
     c8c:	19 06       	cpc	r1, r25
     c8e:	a4 f4       	brge	.+40     	; 0xcb8 <drv_drive+0x8c>
			drv_clockToLatch( i, mirror( cube[d573_layer][i] )  );		//Byte an die Eingänge der Latches anlegen; Bitfolge spiegeln wg. falscher Verdrahtung
     c90:	80 91 98 00 	lds	r24, 0x0098
     c94:	fe 01       	movw	r30, r28
     c96:	38 e0       	ldi	r19, 0x08	; 8
     c98:	83 9f       	mul	r24, r19
     c9a:	e0 0d       	add	r30, r0
     c9c:	f1 1d       	adc	r31, r1
     c9e:	11 24       	eor	r1, r1
     ca0:	ef 51       	subi	r30, 0x1F	; 31
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	80 81       	ld	r24, Z
*/

static inline uint8_t mirror( uint8_t b ) {
	uint8_t res;

	asm volatile(   "ldi r25, 8" "\n"
     ca6:	98 e0       	ldi	r25, 0x08	; 8
     ca8:	87 95       	ror	r24
     caa:	66 1f       	adc	r22, r22
     cac:	9a 95       	dec	r25
     cae:	e1 f7       	brne	.-8      	; 0xca8 <drv_drive+0x7c>
	}
		
	//transfer the content of d573data array to the latches
	for (i=0; i<CUBE_MAX_COLS; i++) {
		if ( (D573_MIRRORMASK & (1<<i) ) > 0 ) {
			drv_clockToLatch( i, mirror( cube[d573_layer][i] )  );		//Byte an die Eingänge der Latches anlegen; Bitfolge spiegeln wg. falscher Verdrahtung
     cb0:	8c 2f       	mov	r24, r28
     cb2:	0e 94 07 06 	call	0xc0e	; 0xc0e <drv_clockToLatch>
     cb6:	0e c0       	rjmp	.+28     	; 0xcd4 <drv_drive+0xa8>
		} else {
			drv_clockToLatch( i, cube[d573_layer][i]  );				//Byte an die Eingänge der Latches anlegen
     cb8:	80 91 98 00 	lds	r24, 0x0098
     cbc:	fe 01       	movw	r30, r28
     cbe:	98 e0       	ldi	r25, 0x08	; 8
     cc0:	89 9f       	mul	r24, r25
     cc2:	e0 0d       	add	r30, r0
     cc4:	f1 1d       	adc	r31, r1
     cc6:	11 24       	eor	r1, r1
     cc8:	ef 51       	subi	r30, 0x1F	; 31
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	60 81       	ld	r22, Z
     cce:	8c 2f       	mov	r24, r28
     cd0:	0e 94 07 06 	call	0xc0e	; 0xc0e <drv_clockToLatch>
     cd4:	21 96       	adiw	r28, 0x01	; 1
	if ((d573_layer == 0) && (d573_CB_Handler != NULL)) {	//Sync anzeigen, wenn es eine Callback-Funktion gibt
		d573_CB_Handler(CB_SYNC);							//Wird nur bei Layer 0 ausgelöst
	}
		
	//transfer the content of d573data array to the latches
	for (i=0; i<CUBE_MAX_COLS; i++) {
     cd6:	c8 30       	cpi	r28, 0x08	; 8
     cd8:	d1 05       	cpc	r29, r1
     cda:	71 f6       	brne	.-100    	; 0xc78 <drv_drive+0x4c>
			drv_clockToLatch( i, mirror( cube[d573_layer][i] )  );		//Byte an die Eingänge der Latches anlegen; Bitfolge spiegeln wg. falscher Verdrahtung
		} else {
			drv_clockToLatch( i, cube[d573_layer][i]  );				//Byte an die Eingänge der Latches anlegen
		}
	}
	D573_Data_Port = 0;				//Eingänge der D-Latches auf 0 legen  (obsolete)
     cdc:	18 ba       	out	0x18, r1	; 24
	
	D573_LAYER_PORT = (D573_LAYER_PORT  | (d573_layer << D573_LAYER_E0) );		//Adresse am Ebenenmultiplexer einstellen
     cde:	22 b3       	in	r18, 0x12	; 18
     ce0:	80 91 98 00 	lds	r24, 0x0098
     ce4:	30 e1       	ldi	r19, 0x10	; 16
     ce6:	83 9f       	mul	r24, r19
     ce8:	c0 01       	movw	r24, r0
     cea:	11 24       	eor	r1, r1
     cec:	82 2b       	or	r24, r18
     cee:	82 bb       	out	0x12, r24	; 18
	D573_LATCH_OUT_EN;	//Latches aktivieren, Low-side-Treiber ein
     cf0:	93 98       	cbi	0x12, 3	; 18
	D573_LAYER_ON;		//High-Side-Treiber ein
     cf2:	97 9a       	sbi	0x12, 7	; 18
	
	if (d573_CB_Handler != NULL) { d573_CB_Handler(CB_DRIVE_LEAVE); }
     cf4:	e0 91 96 00 	lds	r30, 0x0096
     cf8:	f0 91 97 00 	lds	r31, 0x0097
     cfc:	30 97       	sbiw	r30, 0x00	; 0
     cfe:	41 f0       	breq	.+16     	; 0xd10 <drv_drive+0xe4>
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	09 95       	icall
     d04:	05 c0       	rjmp	.+10     	; 0xd10 <drv_drive+0xe4>
//	_delay_us(20);					//
	//Das Datenwort an den Eingangen der D-Latches stehen lassen
}

//Methode treibt alle 8 Ebenen an
void drv_drive() {		//call every 1 ms
     d06:	c0 e0       	ldi	r28, 0x00	; 0
     d08:	d0 e0       	ldi	r29, 0x00	; 0
		d573_CB_Handler(CB_SYNC);							//Wird nur bei Layer 0 ausgelöst
	}
		
	//transfer the content of d573data array to the latches
	for (i=0; i<CUBE_MAX_COLS; i++) {
		if ( (D573_MIRRORMASK & (1<<i) ) > 0 ) {
     d0a:	01 e0       	ldi	r16, 0x01	; 1
     d0c:	10 e0       	ldi	r17, 0x00	; 0
     d0e:	b4 cf       	rjmp	.-152    	; 0xc78 <drv_drive+0x4c>
	D573_LAYER_PORT = (D573_LAYER_PORT  | (d573_layer << D573_LAYER_E0) );		//Adresse am Ebenenmultiplexer einstellen
	D573_LATCH_OUT_EN;	//Latches aktivieren, Low-side-Treiber ein
	D573_LAYER_ON;		//High-Side-Treiber ein
	
	if (d573_CB_Handler != NULL) { d573_CB_Handler(CB_DRIVE_LEAVE); }
}
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	08 95       	ret

00000d1a <drv_clearAllLatches>:
	D573_Data_Port = 0;				//Eingänge der D-Latches auf 0 legen  (obsolete)
}


void drv_clearAllLatches() {
	D573_Data_Port = 0;
     d1a:	18 ba       	out	0x18, r1	; 24
	asm volatile ("nop");						//
     d1c:	00 00       	nop
	D573_Clock_PORT = 0xFF;
     d1e:	8f ef       	ldi	r24, 0xFF	; 255
     d20:	85 bb       	out	0x15, r24	; 21
	asm volatile ("nop");						//
     d22:	00 00       	nop
	asm volatile ("nop");						//
     d24:	00 00       	nop
	D573_Clock_PORT = 0;
     d26:	15 ba       	out	0x15, r1	; 21
	asm volatile ("nop");						//
     d28:	00 00       	nop
	D573_Data_Port = 0;
     d2a:	18 ba       	out	0x18, r1	; 24
     d2c:	08 95       	ret

00000d2e <drv_init>:
	d573_CB_Handler = cbf;
}

void drv_init() {

	D573_Data_DDR	= 0xFF;						//output
     d2e:	8f ef       	ldi	r24, 0xFF	; 255
     d30:	87 bb       	out	0x17, r24	; 23
	D573_Data_Port	= 0;						//all off
     d32:	18 ba       	out	0x18, r1	; 24

	D573_Clock_DDR  = 0xFF;						//output
     d34:	84 bb       	out	0x14, r24	; 20
	D573_Clock_PORT = 0;						//all off
     d36:	15 ba       	out	0x15, r1	; 21

	D573_LAYER_DDR  |= (D573_LAYER_MASK);		//PD3..PD7 as output
     d38:	81 b3       	in	r24, 0x11	; 17
     d3a:	88 6f       	ori	r24, 0xF8	; 248
     d3c:	81 bb       	out	0x11, r24	; 17
	D573_LAYER_OFF;								//D573_LAYER_ENABLE	= 0
     d3e:	97 98       	cbi	0x12, 7	; 18
	D573_LATCH_OUT_DIS;							//D573_LATCH_OE = 1
     d40:	93 9a       	sbi	0x12, 3	; 18
	D573_LAYER_ADR_CLEAR;						//D573_LAYER_E0 = 0,	D573_LAYER_E1 = 0,	D573_LAYER_E2 = 0
     d42:	82 b3       	in	r24, 0x12	; 18
     d44:	8f 78       	andi	r24, 0x8F	; 143
     d46:	82 bb       	out	0x12, r24	; 18
	
	drv_clearAllLatches();						//Latches löschen
     d48:	0e 94 8d 06 	call	0xd1a	; 0xd1a <drv_clearAllLatches>
     d4c:	08 95       	ret

00000d4e <pattern_RunningPoint>:
uint16_t		loop;



void pattern_RunningPoint( ) {
	if (delay > 0) {
     d4e:	80 91 29 01 	lds	r24, 0x0129
     d52:	88 23       	and	r24, r24
     d54:	21 f0       	breq	.+8      	; 0xd5e <pattern_RunningPoint+0x10>
		delay--;
     d56:	81 50       	subi	r24, 0x01	; 1
     d58:	80 93 29 01 	sts	0x0129, r24
     d5c:	08 95       	ret
	} else {
		cube_clearVoxel(x,y,z);
     d5e:	40 91 25 01 	lds	r20, 0x0125
     d62:	60 91 28 01 	lds	r22, 0x0128
     d66:	80 91 21 01 	lds	r24, 0x0121
     d6a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <cube_clearVoxel>
		if (!(patternCtrl.bDirZ)) { //Hoch
     d6e:	80 91 2a 01 	lds	r24, 0x012A
     d72:	82 fd       	sbrc	r24, 2
     d74:	39 c0       	rjmp	.+114    	; 0xde8 <pattern_RunningPoint+0x9a>
			if (x<7) {
     d76:	80 91 21 01 	lds	r24, 0x0121
     d7a:	87 30       	cpi	r24, 0x07	; 7
     d7c:	50 f4       	brcc	.+20     	; 0xd92 <pattern_RunningPoint+0x44>
				x++;
     d7e:	8f 5f       	subi	r24, 0xFF	; 255
     d80:	80 93 21 01 	sts	0x0121, r24
				cube_setVoxel(x,y,z);
     d84:	40 91 25 01 	lds	r20, 0x0125
     d88:	60 91 28 01 	lds	r22, 0x0128
     d8c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
     d90:	65 c0       	rjmp	.+202    	; 0xe5c <pattern_RunningPoint+0x10e>
				} else {
				x=0;
     d92:	10 92 21 01 	sts	0x0121, r1
				if (y<7) {
     d96:	60 91 28 01 	lds	r22, 0x0128
     d9a:	67 30       	cpi	r22, 0x07	; 7
     d9c:	48 f4       	brcc	.+18     	; 0xdb0 <pattern_RunningPoint+0x62>
					y++;
     d9e:	6f 5f       	subi	r22, 0xFF	; 255
     da0:	60 93 28 01 	sts	0x0128, r22
					cube_setVoxel(x,y,z);
     da4:	40 91 25 01 	lds	r20, 0x0125
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
     dae:	56 c0       	rjmp	.+172    	; 0xe5c <pattern_RunningPoint+0x10e>
					} else {
					y=0;
     db0:	10 92 28 01 	sts	0x0128, r1
					if (z<7) {
     db4:	40 91 25 01 	lds	r20, 0x0125
     db8:	47 30       	cpi	r20, 0x07	; 7
     dba:	40 f4       	brcc	.+16     	; 0xdcc <pattern_RunningPoint+0x7e>
						z++;
     dbc:	4f 5f       	subi	r20, 0xFF	; 255
     dbe:	40 93 25 01 	sts	0x0125, r20
						cube_setVoxel(x,y,z);
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
     dca:	48 c0       	rjmp	.+144    	; 0xe5c <pattern_RunningPoint+0x10e>
						} else {
						x=7;  y=7;
     dcc:	87 e0       	ldi	r24, 0x07	; 7
     dce:	80 93 21 01 	sts	0x0121, r24
     dd2:	80 93 28 01 	sts	0x0128, r24
						cube_setVoxel(x,y,z);
     dd6:	67 e0       	ldi	r22, 0x07	; 7
     dd8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
						patternCtrl.bDirZ=1;
     ddc:	ea e2       	ldi	r30, 0x2A	; 42
     dde:	f1 e0       	ldi	r31, 0x01	; 1
     de0:	80 81       	ld	r24, Z
     de2:	84 60       	ori	r24, 0x04	; 4
     de4:	80 83       	st	Z, r24
     de6:	3a c0       	rjmp	.+116    	; 0xe5c <pattern_RunningPoint+0x10e>
					}
				}
			}
		} else {	//Runter
			if (x>0) {
     de8:	80 91 21 01 	lds	r24, 0x0121
     dec:	88 23       	and	r24, r24
     dee:	51 f0       	breq	.+20     	; 0xe04 <pattern_RunningPoint+0xb6>
				x--;
     df0:	81 50       	subi	r24, 0x01	; 1
     df2:	80 93 21 01 	sts	0x0121, r24
				cube_setVoxel(x,y,z);
     df6:	40 91 25 01 	lds	r20, 0x0125
     dfa:	60 91 28 01 	lds	r22, 0x0128
     dfe:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
     e02:	2c c0       	rjmp	.+88     	; 0xe5c <pattern_RunningPoint+0x10e>
				} else {
				x=7;
     e04:	87 e0       	ldi	r24, 0x07	; 7
     e06:	80 93 21 01 	sts	0x0121, r24
				if (y>0) {
     e0a:	60 91 28 01 	lds	r22, 0x0128
     e0e:	66 23       	and	r22, r22
     e10:	41 f0       	breq	.+16     	; 0xe22 <pattern_RunningPoint+0xd4>
					y--;
     e12:	61 50       	subi	r22, 0x01	; 1
     e14:	60 93 28 01 	sts	0x0128, r22
					cube_setVoxel(x,y,z);
     e18:	40 91 25 01 	lds	r20, 0x0125
     e1c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
     e20:	1d c0       	rjmp	.+58     	; 0xe5c <pattern_RunningPoint+0x10e>
					} else {
					y=7;
     e22:	87 e0       	ldi	r24, 0x07	; 7
     e24:	80 93 28 01 	sts	0x0128, r24
					if (z>0) {
     e28:	40 91 25 01 	lds	r20, 0x0125
     e2c:	44 23       	and	r20, r20
     e2e:	39 f0       	breq	.+14     	; 0xe3e <pattern_RunningPoint+0xf0>
						z--;
     e30:	41 50       	subi	r20, 0x01	; 1
     e32:	40 93 25 01 	sts	0x0125, r20
						cube_setVoxel(x,y,z);
     e36:	67 e0       	ldi	r22, 0x07	; 7
     e38:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
     e3c:	0f c0       	rjmp	.+30     	; 0xe5c <pattern_RunningPoint+0x10e>
						} else {
						cube_setVoxel(x,y,z);
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	67 e0       	ldi	r22, 0x07	; 7
     e42:	87 e0       	ldi	r24, 0x07	; 7
     e44:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
						patternCtrl.bDirZ=0;
     e48:	ea e2       	ldi	r30, 0x2A	; 42
     e4a:	f1 e0       	ldi	r31, 0x01	; 1
     e4c:	80 81       	ld	r24, Z
     e4e:	8b 7f       	andi	r24, 0xFB	; 251
     e50:	80 83       	st	Z, r24
						patternCtrl.cycles--;		//wird am Ende aller Zyklen = 0
     e52:	eb e2       	ldi	r30, 0x2B	; 43
     e54:	f1 e0       	ldi	r31, 0x01	; 1
     e56:	80 81       	ld	r24, Z
     e58:	81 50       	subi	r24, 0x01	; 1
     e5a:	80 83       	st	Z, r24
					}
				}
			}
		}
		delay = patternDelay;
     e5c:	80 91 24 01 	lds	r24, 0x0124
     e60:	80 93 29 01 	sts	0x0129, r24
     e64:	08 95       	ret

00000e66 <pattern_Planes>:
	}
}


void pattern_Planes() {
	if (delay > 0) {
     e66:	80 91 29 01 	lds	r24, 0x0129
     e6a:	88 23       	and	r24, r24
     e6c:	21 f0       	breq	.+8      	; 0xe76 <pattern_Planes+0x10>
		delay--;
     e6e:	81 50       	subi	r24, 0x01	; 1
     e70:	80 93 29 01 	sts	0x0129, r24
     e74:	08 95       	ret
	} else {
		switch (patternCtrl.state) {
     e76:	80 91 2a 01 	lds	r24, 0x012A
     e7a:	82 95       	swap	r24
     e7c:	86 95       	lsr	r24
     e7e:	87 70       	andi	r24, 0x07	; 7
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	82 30       	cpi	r24, 0x02	; 2
     e84:	91 05       	cpc	r25, r1
     e86:	f1 f1       	breq	.+124    	; 0xf04 <pattern_Planes+0x9e>
     e88:	2c f4       	brge	.+10     	; 0xe94 <pattern_Planes+0x2e>
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	69 f0       	breq	.+26     	; 0xea8 <pattern_Planes+0x42>
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	01 f1       	breq	.+64     	; 0xed2 <pattern_Planes+0x6c>
     e92:	97 c0       	rjmp	.+302    	; 0xfc2 <pattern_Planes+0x15c>
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	91 05       	cpc	r25, r1
     e98:	09 f4       	brne	.+2      	; 0xe9c <pattern_Planes+0x36>
     e9a:	62 c0       	rjmp	.+196    	; 0xf60 <pattern_Planes+0xfa>
     e9c:	0c f4       	brge	.+2      	; 0xea0 <pattern_Planes+0x3a>
     e9e:	47 c0       	rjmp	.+142    	; 0xf2e <pattern_Planes+0xc8>
     ea0:	05 97       	sbiw	r24, 0x05	; 5
     ea2:	09 f4       	brne	.+2      	; 0xea6 <pattern_Planes+0x40>
     ea4:	72 c0       	rjmp	.+228    	; 0xf8a <pattern_Planes+0x124>
     ea6:	8d c0       	rjmp	.+282    	; 0xfc2 <pattern_Planes+0x15c>
			case 0:	cube_clearPlaneX( x );
     ea8:	80 91 21 01 	lds	r24, 0x0121
     eac:	0e 94 df 01 	call	0x3be	; 0x3be <cube_clearPlaneX>
					if (x<7) {	//X-hoch
     eb0:	80 91 21 01 	lds	r24, 0x0121
     eb4:	87 30       	cpi	r24, 0x07	; 7
     eb6:	30 f4       	brcc	.+12     	; 0xec4 <pattern_Planes+0x5e>
						x++;
     eb8:	8f 5f       	subi	r24, 0xFF	; 255
     eba:	80 93 21 01 	sts	0x0121, r24
						cube_setPlaneX( x );
     ebe:	0e 94 b7 01 	call	0x36e	; 0x36e <cube_setPlaneX>
     ec2:	7f c0       	rjmp	.+254    	; 0xfc2 <pattern_Planes+0x15c>
					} else {
						patternCtrl.state = 1;
     ec4:	ea e2       	ldi	r30, 0x2A	; 42
     ec6:	f1 e0       	ldi	r31, 0x01	; 1
     ec8:	80 81       	ld	r24, Z
     eca:	8f 71       	andi	r24, 0x1F	; 31
     ecc:	80 62       	ori	r24, 0x20	; 32
     ece:	80 83       	st	Z, r24
     ed0:	78 c0       	rjmp	.+240    	; 0xfc2 <pattern_Planes+0x15c>
					}
					break;
				
			case 1: cube_clearPlaneX( x );
     ed2:	80 91 21 01 	lds	r24, 0x0121
     ed6:	0e 94 df 01 	call	0x3be	; 0x3be <cube_clearPlaneX>
					if (x>0) {	//X-runter
     eda:	80 91 21 01 	lds	r24, 0x0121
     ede:	88 23       	and	r24, r24
     ee0:	31 f0       	breq	.+12     	; 0xeee <pattern_Planes+0x88>
						x--;
     ee2:	81 50       	subi	r24, 0x01	; 1
     ee4:	80 93 21 01 	sts	0x0121, r24
						cube_setPlaneX( x );
     ee8:	0e 94 b7 01 	call	0x36e	; 0x36e <cube_setPlaneX>
     eec:	6a c0       	rjmp	.+212    	; 0xfc2 <pattern_Planes+0x15c>
					} else {
						patternCtrl.state=2;
     eee:	ea e2       	ldi	r30, 0x2A	; 42
     ef0:	f1 e0       	ldi	r31, 0x01	; 1
     ef2:	80 81       	ld	r24, Z
     ef4:	8f 71       	andi	r24, 0x1F	; 31
     ef6:	80 64       	ori	r24, 0x40	; 64
     ef8:	80 83       	st	Z, r24
						cube_setPlaneY( y );
     efa:	80 91 28 01 	lds	r24, 0x0128
     efe:	0e 94 0c 02 	call	0x418	; 0x418 <cube_setPlaneY>
     f02:	5f c0       	rjmp	.+190    	; 0xfc2 <pattern_Planes+0x15c>
					}
					break;
				
			case 2:	cube_clearPlaneY( y );
     f04:	80 91 28 01 	lds	r24, 0x0128
     f08:	0e 94 24 02 	call	0x448	; 0x448 <cube_clearPlaneY>
					if (y<7) {	//y-hoch
     f0c:	80 91 28 01 	lds	r24, 0x0128
     f10:	87 30       	cpi	r24, 0x07	; 7
     f12:	30 f4       	brcc	.+12     	; 0xf20 <pattern_Planes+0xba>
						y++;
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	80 93 28 01 	sts	0x0128, r24
						cube_setPlaneY( y );
     f1a:	0e 94 0c 02 	call	0x418	; 0x418 <cube_setPlaneY>
     f1e:	51 c0       	rjmp	.+162    	; 0xfc2 <pattern_Planes+0x15c>
					} else {
						patternCtrl.state = 3;
     f20:	ea e2       	ldi	r30, 0x2A	; 42
     f22:	f1 e0       	ldi	r31, 0x01	; 1
     f24:	80 81       	ld	r24, Z
     f26:	8f 71       	andi	r24, 0x1F	; 31
     f28:	80 66       	ori	r24, 0x60	; 96
     f2a:	80 83       	st	Z, r24
     f2c:	4a c0       	rjmp	.+148    	; 0xfc2 <pattern_Planes+0x15c>
					}
					break;
				
			case 3: cube_clearPlaneY( y );
     f2e:	80 91 28 01 	lds	r24, 0x0128
     f32:	0e 94 24 02 	call	0x448	; 0x448 <cube_clearPlaneY>
					if (y>0) {	//y-runter
     f36:	80 91 28 01 	lds	r24, 0x0128
     f3a:	88 23       	and	r24, r24
     f3c:	31 f0       	breq	.+12     	; 0xf4a <pattern_Planes+0xe4>
						y--;
     f3e:	81 50       	subi	r24, 0x01	; 1
     f40:	80 93 28 01 	sts	0x0128, r24
						cube_setPlaneY( y );
     f44:	0e 94 0c 02 	call	0x418	; 0x418 <cube_setPlaneY>
     f48:	3c c0       	rjmp	.+120    	; 0xfc2 <pattern_Planes+0x15c>
					} else {
						patternCtrl.state=4;
     f4a:	ea e2       	ldi	r30, 0x2A	; 42
     f4c:	f1 e0       	ldi	r31, 0x01	; 1
     f4e:	80 81       	ld	r24, Z
     f50:	8f 71       	andi	r24, 0x1F	; 31
     f52:	80 68       	ori	r24, 0x80	; 128
     f54:	80 83       	st	Z, r24
						cube_setPlaneZ( z );
     f56:	80 91 25 01 	lds	r24, 0x0125
     f5a:	0e 94 3b 02 	call	0x476	; 0x476 <cube_setPlaneZ>
     f5e:	31 c0       	rjmp	.+98     	; 0xfc2 <pattern_Planes+0x15c>
					}
					break;
				
			case 4:	cube_clearPlaneZ( z );
     f60:	80 91 25 01 	lds	r24, 0x0125
     f64:	0e 94 53 02 	call	0x4a6	; 0x4a6 <cube_clearPlaneZ>
					if (z<7) {	//z-hoch
     f68:	80 91 25 01 	lds	r24, 0x0125
     f6c:	87 30       	cpi	r24, 0x07	; 7
     f6e:	30 f4       	brcc	.+12     	; 0xf7c <pattern_Planes+0x116>
						z++;
     f70:	8f 5f       	subi	r24, 0xFF	; 255
     f72:	80 93 25 01 	sts	0x0125, r24
						cube_setPlaneZ( z );
     f76:	0e 94 3b 02 	call	0x476	; 0x476 <cube_setPlaneZ>
     f7a:	23 c0       	rjmp	.+70     	; 0xfc2 <pattern_Planes+0x15c>
					} else {
						patternCtrl.state = 5;
     f7c:	ea e2       	ldi	r30, 0x2A	; 42
     f7e:	f1 e0       	ldi	r31, 0x01	; 1
     f80:	80 81       	ld	r24, Z
     f82:	8f 71       	andi	r24, 0x1F	; 31
     f84:	80 6a       	ori	r24, 0xA0	; 160
     f86:	80 83       	st	Z, r24
     f88:	1c c0       	rjmp	.+56     	; 0xfc2 <pattern_Planes+0x15c>
					}
					break;
				
			case 5: cube_clearPlaneZ( z );
     f8a:	80 91 25 01 	lds	r24, 0x0125
     f8e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <cube_clearPlaneZ>
					if (z>0) {	//z-runter
     f92:	80 91 25 01 	lds	r24, 0x0125
     f96:	88 23       	and	r24, r24
     f98:	31 f0       	breq	.+12     	; 0xfa6 <pattern_Planes+0x140>
						z--;
     f9a:	81 50       	subi	r24, 0x01	; 1
     f9c:	80 93 25 01 	sts	0x0125, r24
						cube_setPlaneZ( z );
     fa0:	0e 94 3b 02 	call	0x476	; 0x476 <cube_setPlaneZ>
     fa4:	0e c0       	rjmp	.+28     	; 0xfc2 <pattern_Planes+0x15c>
					} else {
						patternCtrl.state=0;
     fa6:	ea e2       	ldi	r30, 0x2A	; 42
     fa8:	f1 e0       	ldi	r31, 0x01	; 1
     faa:	80 81       	ld	r24, Z
     fac:	8f 71       	andi	r24, 0x1F	; 31
     fae:	80 83       	st	Z, r24
						cube_setPlaneX( x );
     fb0:	80 91 21 01 	lds	r24, 0x0121
     fb4:	0e 94 b7 01 	call	0x36e	; 0x36e <cube_setPlaneX>
						patternCtrl.cycles--;
     fb8:	eb e2       	ldi	r30, 0x2B	; 43
     fba:	f1 e0       	ldi	r31, 0x01	; 1
     fbc:	80 81       	ld	r24, Z
     fbe:	81 50       	subi	r24, 0x01	; 1
     fc0:	80 83       	st	Z, r24
					}
					break;
		}
		delay = patternDelay;
     fc2:	80 91 24 01 	lds	r24, 0x0124
     fc6:	80 93 29 01 	sts	0x0129, r24
     fca:	08 95       	ret

00000fcc <pattern_Cube>:
	}
}


void pattern_Cube( TCUBETYPE x ) {
     fcc:	ef 92       	push	r14
     fce:	0f 93       	push	r16
     fd0:	cf 93       	push	r28
     fd2:	c8 2f       	mov	r28, r24
	if (delay > 0) {
     fd4:	90 91 29 01 	lds	r25, 0x0129
     fd8:	99 23       	and	r25, r25
     fda:	21 f0       	breq	.+8      	; 0xfe4 <pattern_Cube+0x18>
		delay--;
     fdc:	91 50       	subi	r25, 0x01	; 1
     fde:	90 93 29 01 	sts	0x0129, r25
     fe2:	8b c1       	rjmp	.+790    	; 0x12fa <pattern_Cube+0x32e>
	} else {
		switch (patternCtrl.state) {
     fe4:	e0 91 2a 01 	lds	r30, 0x012A
     fe8:	e2 95       	swap	r30
     fea:	e6 95       	lsr	r30
     fec:	e7 70       	andi	r30, 0x07	; 7
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	31 97       	sbiw	r30, 0x01	; 1
     ff2:	e7 30       	cpi	r30, 0x07	; 7
     ff4:	f1 05       	cpc	r31, r1
     ff6:	20 f4       	brcc	.+8      	; 0x1000 <pattern_Cube+0x34>
     ff8:	e6 5d       	subi	r30, 0xD6	; 214
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__tablejump2__>
			case 0:	cube_clear();
    1000:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
					patternCtrl.state++;
    1004:	ea e2       	ldi	r30, 0x2A	; 42
    1006:	f1 e0       	ldi	r31, 0x01	; 1
    1008:	80 81       	ld	r24, Z
    100a:	98 2f       	mov	r25, r24
    100c:	90 7e       	andi	r25, 0xE0	; 224
    100e:	90 5e       	subi	r25, 0xE0	; 224
    1010:	8f 71       	andi	r24, 0x1F	; 31
    1012:	89 2b       	or	r24, r25
    1014:	80 83       	st	Z, r24
					break;
    1016:	6d c1       	rjmp	.+730    	; 0x12f2 <pattern_Cube+0x326>
			case 1: cube_clear();
    1018:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
					switch(x) {						//3-4
    101c:	c1 30       	cpi	r28, 0x01	; 1
    101e:	79 f0       	breq	.+30     	; 0x103e <pattern_Cube+0x72>
    1020:	18 f0       	brcs	.+6      	; 0x1028 <pattern_Cube+0x5c>
    1022:	c2 30       	cpi	r28, 0x02	; 2
    1024:	b9 f0       	breq	.+46     	; 0x1054 <pattern_Cube+0x88>
    1026:	20 c0       	rjmp	.+64     	; 0x1068 <pattern_Cube+0x9c>
						case CUBE_FILLED: cube_Filled( 3, 3, 3, 4, 4, 4 );	break;
    1028:	68 94       	set
    102a:	ee 24       	eor	r14, r14
    102c:	e2 f8       	bld	r14, 2
    102e:	04 e0       	ldi	r16, 0x04	; 4
    1030:	24 e0       	ldi	r18, 0x04	; 4
    1032:	43 e0       	ldi	r20, 0x03	; 3
    1034:	63 e0       	ldi	r22, 0x03	; 3
    1036:	83 e0       	ldi	r24, 0x03	; 3
    1038:	0e 94 88 03 	call	0x710	; 0x710 <cube_Filled>
    103c:	15 c0       	rjmp	.+42     	; 0x1068 <pattern_Cube+0x9c>
						case CUBE_WALL:	  cube_Walls(  3, 3, 3, 4, 4, 4 );	break;
    103e:	68 94       	set
    1040:	ee 24       	eor	r14, r14
    1042:	e2 f8       	bld	r14, 2
    1044:	04 e0       	ldi	r16, 0x04	; 4
    1046:	24 e0       	ldi	r18, 0x04	; 4
    1048:	43 e0       	ldi	r20, 0x03	; 3
    104a:	63 e0       	ldi	r22, 0x03	; 3
    104c:	83 e0       	ldi	r24, 0x03	; 3
    104e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <cube_Walls>
    1052:	0a c0       	rjmp	.+20     	; 0x1068 <pattern_Cube+0x9c>
						case CUBE_EDGES:  cube_Edges(  3, 3, 3, 4, 4, 4 );	break;
    1054:	68 94       	set
    1056:	ee 24       	eor	r14, r14
    1058:	e2 f8       	bld	r14, 2
    105a:	04 e0       	ldi	r16, 0x04	; 4
    105c:	24 e0       	ldi	r18, 0x04	; 4
    105e:	43 e0       	ldi	r20, 0x03	; 3
    1060:	63 e0       	ldi	r22, 0x03	; 3
    1062:	83 e0       	ldi	r24, 0x03	; 3
    1064:	0e 94 78 04 	call	0x8f0	; 0x8f0 <cube_Edges>
					}
					patternCtrl.state++;
    1068:	ea e2       	ldi	r30, 0x2A	; 42
    106a:	f1 e0       	ldi	r31, 0x01	; 1
    106c:	80 81       	ld	r24, Z
    106e:	98 2f       	mov	r25, r24
    1070:	90 7e       	andi	r25, 0xE0	; 224
    1072:	90 5e       	subi	r25, 0xE0	; 224
    1074:	8f 71       	andi	r24, 0x1F	; 31
    1076:	89 2b       	or	r24, r25
    1078:	80 83       	st	Z, r24
					break;
    107a:	3b c1       	rjmp	.+630    	; 0x12f2 <pattern_Cube+0x326>
			case 2: cube_clear();
    107c:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
					switch(x) {						//2-5
    1080:	c1 30       	cpi	r28, 0x01	; 1
    1082:	81 f0       	breq	.+32     	; 0x10a4 <pattern_Cube+0xd8>
    1084:	18 f0       	brcs	.+6      	; 0x108c <pattern_Cube+0xc0>
    1086:	c2 30       	cpi	r28, 0x02	; 2
    1088:	c9 f0       	breq	.+50     	; 0x10bc <pattern_Cube+0xf0>
    108a:	23 c0       	rjmp	.+70     	; 0x10d2 <pattern_Cube+0x106>
						case CUBE_FILLED: cube_Filled( 2, 2, 2, 5, 5, 5 );	break;
    108c:	0f 2e       	mov	r0, r31
    108e:	f5 e0       	ldi	r31, 0x05	; 5
    1090:	ef 2e       	mov	r14, r31
    1092:	f0 2d       	mov	r31, r0
    1094:	05 e0       	ldi	r16, 0x05	; 5
    1096:	25 e0       	ldi	r18, 0x05	; 5
    1098:	42 e0       	ldi	r20, 0x02	; 2
    109a:	62 e0       	ldi	r22, 0x02	; 2
    109c:	82 e0       	ldi	r24, 0x02	; 2
    109e:	0e 94 88 03 	call	0x710	; 0x710 <cube_Filled>
    10a2:	17 c0       	rjmp	.+46     	; 0x10d2 <pattern_Cube+0x106>
						case CUBE_WALL:	  cube_Walls(  2, 2, 2, 5, 5, 5 );	break;
    10a4:	0f 2e       	mov	r0, r31
    10a6:	f5 e0       	ldi	r31, 0x05	; 5
    10a8:	ef 2e       	mov	r14, r31
    10aa:	f0 2d       	mov	r31, r0
    10ac:	05 e0       	ldi	r16, 0x05	; 5
    10ae:	25 e0       	ldi	r18, 0x05	; 5
    10b0:	42 e0       	ldi	r20, 0x02	; 2
    10b2:	62 e0       	ldi	r22, 0x02	; 2
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <cube_Walls>
    10ba:	0b c0       	rjmp	.+22     	; 0x10d2 <pattern_Cube+0x106>
						case CUBE_EDGES:  cube_Edges(  2, 2, 2, 5, 5, 5 );	break;
    10bc:	0f 2e       	mov	r0, r31
    10be:	f5 e0       	ldi	r31, 0x05	; 5
    10c0:	ef 2e       	mov	r14, r31
    10c2:	f0 2d       	mov	r31, r0
    10c4:	05 e0       	ldi	r16, 0x05	; 5
    10c6:	25 e0       	ldi	r18, 0x05	; 5
    10c8:	42 e0       	ldi	r20, 0x02	; 2
    10ca:	62 e0       	ldi	r22, 0x02	; 2
    10cc:	82 e0       	ldi	r24, 0x02	; 2
    10ce:	0e 94 78 04 	call	0x8f0	; 0x8f0 <cube_Edges>
					}
					patternCtrl.state++;
    10d2:	ea e2       	ldi	r30, 0x2A	; 42
    10d4:	f1 e0       	ldi	r31, 0x01	; 1
    10d6:	80 81       	ld	r24, Z
    10d8:	98 2f       	mov	r25, r24
    10da:	90 7e       	andi	r25, 0xE0	; 224
    10dc:	90 5e       	subi	r25, 0xE0	; 224
    10de:	8f 71       	andi	r24, 0x1F	; 31
    10e0:	89 2b       	or	r24, r25
    10e2:	80 83       	st	Z, r24
					break;
    10e4:	06 c1       	rjmp	.+524    	; 0x12f2 <pattern_Cube+0x326>

			case 3: cube_clear();
    10e6:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
					switch(x) {						//1-6
    10ea:	c1 30       	cpi	r28, 0x01	; 1
    10ec:	81 f0       	breq	.+32     	; 0x110e <pattern_Cube+0x142>
    10ee:	18 f0       	brcs	.+6      	; 0x10f6 <pattern_Cube+0x12a>
    10f0:	c2 30       	cpi	r28, 0x02	; 2
    10f2:	c9 f0       	breq	.+50     	; 0x1126 <pattern_Cube+0x15a>
    10f4:	23 c0       	rjmp	.+70     	; 0x113c <pattern_Cube+0x170>
						case CUBE_FILLED: cube_Filled( 1, 1, 1, 6, 6, 6 );	break;
    10f6:	0f 2e       	mov	r0, r31
    10f8:	f6 e0       	ldi	r31, 0x06	; 6
    10fa:	ef 2e       	mov	r14, r31
    10fc:	f0 2d       	mov	r31, r0
    10fe:	06 e0       	ldi	r16, 0x06	; 6
    1100:	26 e0       	ldi	r18, 0x06	; 6
    1102:	41 e0       	ldi	r20, 0x01	; 1
    1104:	61 e0       	ldi	r22, 0x01	; 1
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	0e 94 88 03 	call	0x710	; 0x710 <cube_Filled>
    110c:	17 c0       	rjmp	.+46     	; 0x113c <pattern_Cube+0x170>
						case CUBE_WALL:	  cube_Walls(  1, 1, 1, 6, 6, 6 );	break;
    110e:	0f 2e       	mov	r0, r31
    1110:	f6 e0       	ldi	r31, 0x06	; 6
    1112:	ef 2e       	mov	r14, r31
    1114:	f0 2d       	mov	r31, r0
    1116:	06 e0       	ldi	r16, 0x06	; 6
    1118:	26 e0       	ldi	r18, 0x06	; 6
    111a:	41 e0       	ldi	r20, 0x01	; 1
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	0e 94 e7 03 	call	0x7ce	; 0x7ce <cube_Walls>
    1124:	0b c0       	rjmp	.+22     	; 0x113c <pattern_Cube+0x170>
						case CUBE_EDGES:  cube_Edges(  1, 1, 1, 6, 6, 6 );	break;
    1126:	0f 2e       	mov	r0, r31
    1128:	f6 e0       	ldi	r31, 0x06	; 6
    112a:	ef 2e       	mov	r14, r31
    112c:	f0 2d       	mov	r31, r0
    112e:	06 e0       	ldi	r16, 0x06	; 6
    1130:	26 e0       	ldi	r18, 0x06	; 6
    1132:	41 e0       	ldi	r20, 0x01	; 1
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	0e 94 78 04 	call	0x8f0	; 0x8f0 <cube_Edges>
					}
					patternCtrl.state++;
    113c:	ea e2       	ldi	r30, 0x2A	; 42
    113e:	f1 e0       	ldi	r31, 0x01	; 1
    1140:	80 81       	ld	r24, Z
    1142:	98 2f       	mov	r25, r24
    1144:	90 7e       	andi	r25, 0xE0	; 224
    1146:	90 5e       	subi	r25, 0xE0	; 224
    1148:	8f 71       	andi	r24, 0x1F	; 31
    114a:	89 2b       	or	r24, r25
    114c:	80 83       	st	Z, r24
					break;
    114e:	d1 c0       	rjmp	.+418    	; 0x12f2 <pattern_Cube+0x326>
			case 4: cube_clear();
    1150:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
					switch(x) {						///0-7
    1154:	c1 30       	cpi	r28, 0x01	; 1
    1156:	81 f0       	breq	.+32     	; 0x1178 <pattern_Cube+0x1ac>
    1158:	18 f0       	brcs	.+6      	; 0x1160 <pattern_Cube+0x194>
    115a:	c2 30       	cpi	r28, 0x02	; 2
    115c:	c9 f0       	breq	.+50     	; 0x1190 <pattern_Cube+0x1c4>
    115e:	23 c0       	rjmp	.+70     	; 0x11a6 <pattern_Cube+0x1da>
						case CUBE_FILLED: cube_Filled( 0, 0, 0, 7, 7, 7 );	break;
    1160:	0f 2e       	mov	r0, r31
    1162:	f7 e0       	ldi	r31, 0x07	; 7
    1164:	ef 2e       	mov	r14, r31
    1166:	f0 2d       	mov	r31, r0
    1168:	07 e0       	ldi	r16, 0x07	; 7
    116a:	27 e0       	ldi	r18, 0x07	; 7
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	0e 94 88 03 	call	0x710	; 0x710 <cube_Filled>
    1176:	17 c0       	rjmp	.+46     	; 0x11a6 <pattern_Cube+0x1da>
						case CUBE_WALL:	  cube_Walls(  0, 0, 0, 7, 7, 7 );	break;
    1178:	0f 2e       	mov	r0, r31
    117a:	f7 e0       	ldi	r31, 0x07	; 7
    117c:	ef 2e       	mov	r14, r31
    117e:	f0 2d       	mov	r31, r0
    1180:	07 e0       	ldi	r16, 0x07	; 7
    1182:	27 e0       	ldi	r18, 0x07	; 7
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <cube_Walls>
    118e:	0b c0       	rjmp	.+22     	; 0x11a6 <pattern_Cube+0x1da>
						case CUBE_EDGES:  cube_Edges(  0, 0, 0, 7, 7, 7 );	break;
    1190:	0f 2e       	mov	r0, r31
    1192:	f7 e0       	ldi	r31, 0x07	; 7
    1194:	ef 2e       	mov	r14, r31
    1196:	f0 2d       	mov	r31, r0
    1198:	07 e0       	ldi	r16, 0x07	; 7
    119a:	27 e0       	ldi	r18, 0x07	; 7
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	0e 94 78 04 	call	0x8f0	; 0x8f0 <cube_Edges>
					}
					patternCtrl.state++;
    11a6:	ea e2       	ldi	r30, 0x2A	; 42
    11a8:	f1 e0       	ldi	r31, 0x01	; 1
    11aa:	80 81       	ld	r24, Z
    11ac:	98 2f       	mov	r25, r24
    11ae:	90 7e       	andi	r25, 0xE0	; 224
    11b0:	90 5e       	subi	r25, 0xE0	; 224
    11b2:	8f 71       	andi	r24, 0x1F	; 31
    11b4:	89 2b       	or	r24, r25
    11b6:	80 83       	st	Z, r24
					break;
    11b8:	9c c0       	rjmp	.+312    	; 0x12f2 <pattern_Cube+0x326>
			case 5: cube_clear();
    11ba:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
					switch(x) {						//1-6
    11be:	c1 30       	cpi	r28, 0x01	; 1
    11c0:	81 f0       	breq	.+32     	; 0x11e2 <pattern_Cube+0x216>
    11c2:	18 f0       	brcs	.+6      	; 0x11ca <pattern_Cube+0x1fe>
    11c4:	c2 30       	cpi	r28, 0x02	; 2
    11c6:	c9 f0       	breq	.+50     	; 0x11fa <pattern_Cube+0x22e>
    11c8:	23 c0       	rjmp	.+70     	; 0x1210 <pattern_Cube+0x244>
						case CUBE_FILLED: cube_Filled( 1, 1, 1, 6, 6, 6 );	break;
    11ca:	0f 2e       	mov	r0, r31
    11cc:	f6 e0       	ldi	r31, 0x06	; 6
    11ce:	ef 2e       	mov	r14, r31
    11d0:	f0 2d       	mov	r31, r0
    11d2:	06 e0       	ldi	r16, 0x06	; 6
    11d4:	26 e0       	ldi	r18, 0x06	; 6
    11d6:	41 e0       	ldi	r20, 0x01	; 1
    11d8:	61 e0       	ldi	r22, 0x01	; 1
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	0e 94 88 03 	call	0x710	; 0x710 <cube_Filled>
    11e0:	17 c0       	rjmp	.+46     	; 0x1210 <pattern_Cube+0x244>
						case CUBE_WALL:	  cube_Walls(  1, 1, 1, 6, 6, 6 );	break;
    11e2:	0f 2e       	mov	r0, r31
    11e4:	f6 e0       	ldi	r31, 0x06	; 6
    11e6:	ef 2e       	mov	r14, r31
    11e8:	f0 2d       	mov	r31, r0
    11ea:	06 e0       	ldi	r16, 0x06	; 6
    11ec:	26 e0       	ldi	r18, 0x06	; 6
    11ee:	41 e0       	ldi	r20, 0x01	; 1
    11f0:	61 e0       	ldi	r22, 0x01	; 1
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <cube_Walls>
    11f8:	0b c0       	rjmp	.+22     	; 0x1210 <pattern_Cube+0x244>
						case CUBE_EDGES:  cube_Edges(  1, 1, 1, 6, 6, 6 );	break;
    11fa:	0f 2e       	mov	r0, r31
    11fc:	f6 e0       	ldi	r31, 0x06	; 6
    11fe:	ef 2e       	mov	r14, r31
    1200:	f0 2d       	mov	r31, r0
    1202:	06 e0       	ldi	r16, 0x06	; 6
    1204:	26 e0       	ldi	r18, 0x06	; 6
    1206:	41 e0       	ldi	r20, 0x01	; 1
    1208:	61 e0       	ldi	r22, 0x01	; 1
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <cube_Edges>
					}
					patternCtrl.state++;
    1210:	ea e2       	ldi	r30, 0x2A	; 42
    1212:	f1 e0       	ldi	r31, 0x01	; 1
    1214:	80 81       	ld	r24, Z
    1216:	98 2f       	mov	r25, r24
    1218:	90 7e       	andi	r25, 0xE0	; 224
    121a:	90 5e       	subi	r25, 0xE0	; 224
    121c:	8f 71       	andi	r24, 0x1F	; 31
    121e:	89 2b       	or	r24, r25
    1220:	80 83       	st	Z, r24
					break;
    1222:	67 c0       	rjmp	.+206    	; 0x12f2 <pattern_Cube+0x326>

			case 6: cube_clear();
    1224:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
					switch(x) {						//2-5
    1228:	c1 30       	cpi	r28, 0x01	; 1
    122a:	81 f0       	breq	.+32     	; 0x124c <pattern_Cube+0x280>
    122c:	18 f0       	brcs	.+6      	; 0x1234 <pattern_Cube+0x268>
    122e:	c2 30       	cpi	r28, 0x02	; 2
    1230:	c9 f0       	breq	.+50     	; 0x1264 <pattern_Cube+0x298>
    1232:	23 c0       	rjmp	.+70     	; 0x127a <pattern_Cube+0x2ae>
						case CUBE_FILLED: cube_Filled( 2, 2, 2, 5, 5, 5 );	break;
    1234:	0f 2e       	mov	r0, r31
    1236:	f5 e0       	ldi	r31, 0x05	; 5
    1238:	ef 2e       	mov	r14, r31
    123a:	f0 2d       	mov	r31, r0
    123c:	05 e0       	ldi	r16, 0x05	; 5
    123e:	25 e0       	ldi	r18, 0x05	; 5
    1240:	42 e0       	ldi	r20, 0x02	; 2
    1242:	62 e0       	ldi	r22, 0x02	; 2
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	0e 94 88 03 	call	0x710	; 0x710 <cube_Filled>
    124a:	17 c0       	rjmp	.+46     	; 0x127a <pattern_Cube+0x2ae>
						case CUBE_WALL:	  cube_Walls(  2, 2, 2, 5, 5, 5 );	break;
    124c:	0f 2e       	mov	r0, r31
    124e:	f5 e0       	ldi	r31, 0x05	; 5
    1250:	ef 2e       	mov	r14, r31
    1252:	f0 2d       	mov	r31, r0
    1254:	05 e0       	ldi	r16, 0x05	; 5
    1256:	25 e0       	ldi	r18, 0x05	; 5
    1258:	42 e0       	ldi	r20, 0x02	; 2
    125a:	62 e0       	ldi	r22, 0x02	; 2
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <cube_Walls>
    1262:	0b c0       	rjmp	.+22     	; 0x127a <pattern_Cube+0x2ae>
						case CUBE_EDGES:  cube_Edges(  2, 2, 2, 5, 5, 5 );	break;
    1264:	0f 2e       	mov	r0, r31
    1266:	f5 e0       	ldi	r31, 0x05	; 5
    1268:	ef 2e       	mov	r14, r31
    126a:	f0 2d       	mov	r31, r0
    126c:	05 e0       	ldi	r16, 0x05	; 5
    126e:	25 e0       	ldi	r18, 0x05	; 5
    1270:	42 e0       	ldi	r20, 0x02	; 2
    1272:	62 e0       	ldi	r22, 0x02	; 2
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	0e 94 78 04 	call	0x8f0	; 0x8f0 <cube_Edges>
					}
					patternCtrl.state++;
    127a:	ea e2       	ldi	r30, 0x2A	; 42
    127c:	f1 e0       	ldi	r31, 0x01	; 1
    127e:	80 81       	ld	r24, Z
    1280:	98 2f       	mov	r25, r24
    1282:	90 7e       	andi	r25, 0xE0	; 224
    1284:	90 5e       	subi	r25, 0xE0	; 224
    1286:	8f 71       	andi	r24, 0x1F	; 31
    1288:	89 2b       	or	r24, r25
    128a:	80 83       	st	Z, r24
					break;
    128c:	32 c0       	rjmp	.+100    	; 0x12f2 <pattern_Cube+0x326>

			case 7: cube_clear();
    128e:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
					switch(x) {						//3-4
    1292:	c1 30       	cpi	r28, 0x01	; 1
    1294:	79 f0       	breq	.+30     	; 0x12b4 <pattern_Cube+0x2e8>
    1296:	18 f0       	brcs	.+6      	; 0x129e <pattern_Cube+0x2d2>
    1298:	c2 30       	cpi	r28, 0x02	; 2
    129a:	b9 f0       	breq	.+46     	; 0x12ca <pattern_Cube+0x2fe>
    129c:	20 c0       	rjmp	.+64     	; 0x12de <pattern_Cube+0x312>
						case CUBE_FILLED: cube_Filled( 3, 3, 3, 4, 4, 4 );	break;
    129e:	68 94       	set
    12a0:	ee 24       	eor	r14, r14
    12a2:	e2 f8       	bld	r14, 2
    12a4:	04 e0       	ldi	r16, 0x04	; 4
    12a6:	24 e0       	ldi	r18, 0x04	; 4
    12a8:	43 e0       	ldi	r20, 0x03	; 3
    12aa:	63 e0       	ldi	r22, 0x03	; 3
    12ac:	83 e0       	ldi	r24, 0x03	; 3
    12ae:	0e 94 88 03 	call	0x710	; 0x710 <cube_Filled>
    12b2:	15 c0       	rjmp	.+42     	; 0x12de <pattern_Cube+0x312>
						case CUBE_WALL:	  cube_Walls(  3, 3, 3, 4, 4, 4 );	break;
    12b4:	68 94       	set
    12b6:	ee 24       	eor	r14, r14
    12b8:	e2 f8       	bld	r14, 2
    12ba:	04 e0       	ldi	r16, 0x04	; 4
    12bc:	24 e0       	ldi	r18, 0x04	; 4
    12be:	43 e0       	ldi	r20, 0x03	; 3
    12c0:	63 e0       	ldi	r22, 0x03	; 3
    12c2:	83 e0       	ldi	r24, 0x03	; 3
    12c4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <cube_Walls>
    12c8:	0a c0       	rjmp	.+20     	; 0x12de <pattern_Cube+0x312>
						case CUBE_EDGES:  cube_Edges(  3, 3, 3, 4, 4, 4 );	break;
    12ca:	68 94       	set
    12cc:	ee 24       	eor	r14, r14
    12ce:	e2 f8       	bld	r14, 2
    12d0:	04 e0       	ldi	r16, 0x04	; 4
    12d2:	24 e0       	ldi	r18, 0x04	; 4
    12d4:	43 e0       	ldi	r20, 0x03	; 3
    12d6:	63 e0       	ldi	r22, 0x03	; 3
    12d8:	83 e0       	ldi	r24, 0x03	; 3
    12da:	0e 94 78 04 	call	0x8f0	; 0x8f0 <cube_Edges>
					}
					patternCtrl.state = 0;
    12de:	ea e2       	ldi	r30, 0x2A	; 42
    12e0:	f1 e0       	ldi	r31, 0x01	; 1
    12e2:	80 81       	ld	r24, Z
    12e4:	8f 71       	andi	r24, 0x1F	; 31
    12e6:	80 83       	st	Z, r24
					patternCtrl.cycles--;
    12e8:	eb e2       	ldi	r30, 0x2B	; 43
    12ea:	f1 e0       	ldi	r31, 0x01	; 1
    12ec:	80 81       	ld	r24, Z
    12ee:	81 50       	subi	r24, 0x01	; 1
    12f0:	80 83       	st	Z, r24
					break;
		}
		delay = patternDelay;
    12f2:	80 91 24 01 	lds	r24, 0x0124
    12f6:	80 93 29 01 	sts	0x0129, r24
	}
}
    12fa:	cf 91       	pop	r28
    12fc:	0f 91       	pop	r16
    12fe:	ef 90       	pop	r14
    1300:	08 95       	ret

00001302 <pattern_rain>:


void pattern_rain() {
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
	if (delay > 0) {
    1306:	80 91 29 01 	lds	r24, 0x0129
    130a:	88 23       	and	r24, r24
    130c:	21 f0       	breq	.+8      	; 0x1316 <pattern_rain+0x14>
		delay--;
    130e:	81 50       	subi	r24, 0x01	; 1
    1310:	80 93 29 01 	sts	0x0129, r24
    1314:	4a c0       	rjmp	.+148    	; 0x13aa <pattern_rain+0xa8>
	} else {
		cube_shift( AXIS_Z, -1 );
    1316:	6f ef       	ldi	r22, 0xFF	; 255
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <cube_shift>
		if ((patternCtrl.cycles % patternCtrl.state) == 0) {
    131e:	80 91 2b 01 	lds	r24, 0x012B
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	60 91 2a 01 	lds	r22, 0x012A
    1328:	62 95       	swap	r22
    132a:	66 95       	lsr	r22
    132c:	67 70       	andi	r22, 0x07	; 7
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	0e 94 55 10 	call	0x20aa	; 0x20aa <__divmodhi4>
    1334:	89 2b       	or	r24, r25
    1336:	81 f5       	brne	.+96     	; 0x1398 <pattern_rain+0x96>
			z = rand()%5;			//nr of raindrops created at once
    1338:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    133c:	65 e0       	ldi	r22, 0x05	; 5
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	0e 94 55 10 	call	0x20aa	; 0x20aa <__divmodhi4>
    1344:	80 93 25 01 	sts	0x0125, r24
			for ( i=0; i < z; i++ )	{
    1348:	10 92 27 01 	sts	0x0127, r1
    134c:	88 23       	and	r24, r24
    134e:	21 f1       	breq	.+72     	; 0x1398 <pattern_rain+0x96>
				cube_setVoxel( rand()%CUBE_MAX_X, rand()%CUBE_MAX_Y, CUBE_MAX_Z-1 );
    1350:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    1354:	ec 01       	movw	r28, r24
    1356:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    135a:	be 01       	movw	r22, r28
    135c:	67 70       	andi	r22, 0x07	; 7
    135e:	70 78       	andi	r23, 0x80	; 128
    1360:	77 23       	and	r23, r23
    1362:	34 f4       	brge	.+12     	; 0x1370 <pattern_rain+0x6e>
    1364:	61 50       	subi	r22, 0x01	; 1
    1366:	71 09       	sbc	r23, r1
    1368:	68 6f       	ori	r22, 0xF8	; 248
    136a:	7f 6f       	ori	r23, 0xFF	; 255
    136c:	6f 5f       	subi	r22, 0xFF	; 255
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	87 70       	andi	r24, 0x07	; 7
    1372:	90 78       	andi	r25, 0x80	; 128
    1374:	99 23       	and	r25, r25
    1376:	24 f4       	brge	.+8      	; 0x1380 <pattern_rain+0x7e>
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	88 6f       	ori	r24, 0xF8	; 248
    137c:	9f 6f       	ori	r25, 0xFF	; 255
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	47 e0       	ldi	r20, 0x07	; 7
    1382:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
		delay--;
	} else {
		cube_shift( AXIS_Z, -1 );
		if ((patternCtrl.cycles % patternCtrl.state) == 0) {
			z = rand()%5;			//nr of raindrops created at once
			for ( i=0; i < z; i++ )	{
    1386:	80 91 27 01 	lds	r24, 0x0127
    138a:	8f 5f       	subi	r24, 0xFF	; 255
    138c:	80 93 27 01 	sts	0x0127, r24
    1390:	90 91 25 01 	lds	r25, 0x0125
    1394:	89 17       	cp	r24, r25
    1396:	e0 f2       	brcs	.-72     	; 0x1350 <pattern_rain+0x4e>
				cube_setVoxel( rand()%CUBE_MAX_X, rand()%CUBE_MAX_Y, CUBE_MAX_Z-1 );
			} 
		}
		patternCtrl.cycles--;		//wird am Ende aller Zyklen = 0
    1398:	eb e2       	ldi	r30, 0x2B	; 43
    139a:	f1 e0       	ldi	r31, 0x01	; 1
    139c:	80 81       	ld	r24, Z
    139e:	81 50       	subi	r24, 0x01	; 1
    13a0:	80 83       	st	Z, r24
		delay = patternDelay;
    13a2:	80 91 24 01 	lds	r24, 0x0124
    13a6:	80 93 29 01 	sts	0x0129, r24
	}
	
}
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <pattern_SparkleFlash>:

void pattern_SparkleFlash() {
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
	if (delay > 0) {
    13b8:	80 91 29 01 	lds	r24, 0x0129
    13bc:	88 23       	and	r24, r24
    13be:	21 f0       	breq	.+8      	; 0x13c8 <pattern_SparkleFlash+0x18>
		delay--;
    13c0:	81 50       	subi	r24, 0x01	; 1
    13c2:	80 93 29 01 	sts	0x0129, r24
    13c6:	d2 c0       	rjmp	.+420    	; 0x156c <pattern_SparkleFlash+0x1bc>
	} else {
		cube_clear();
    13c8:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
		switch (patternCtrl.state) {
    13cc:	80 91 2a 01 	lds	r24, 0x012A
    13d0:	82 95       	swap	r24
    13d2:	86 95       	lsr	r24
    13d4:	87 70       	andi	r24, 0x07	; 7
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	91 05       	cpc	r25, r1
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <pattern_SparkleFlash+0x30>
    13de:	62 c0       	rjmp	.+196    	; 0x14a4 <pattern_SparkleFlash+0xf4>
    13e0:	82 30       	cpi	r24, 0x02	; 2
    13e2:	91 05       	cpc	r25, r1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <pattern_SparkleFlash+0x38>
    13e6:	b7 c0       	rjmp	.+366    	; 0x1556 <pattern_SparkleFlash+0x1a6>
    13e8:	89 2b       	or	r24, r25
    13ea:	09 f0       	breq	.+2      	; 0x13ee <pattern_SparkleFlash+0x3e>
    13ec:	bb c0       	rjmp	.+374    	; 0x1564 <pattern_SparkleFlash+0x1b4>
			case 0:	for (i=0; i<y; i++) {
    13ee:	10 92 27 01 	sts	0x0127, r1
    13f2:	20 91 28 01 	lds	r18, 0x0128
    13f6:	22 23       	and	r18, r18
    13f8:	89 f1       	breq	.+98     	; 0x145c <pattern_SparkleFlash+0xac>
						cube_setVoxel( rand()%CUBE_MAX_X, rand()%CUBE_MAX_Y, rand()%CUBE_MAX_Z );
    13fa:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    13fe:	8c 01       	movw	r16, r24
    1400:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    1404:	ec 01       	movw	r28, r24
    1406:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    140a:	a8 01       	movw	r20, r16
    140c:	47 70       	andi	r20, 0x07	; 7
    140e:	50 78       	andi	r21, 0x80	; 128
    1410:	55 23       	and	r21, r21
    1412:	34 f4       	brge	.+12     	; 0x1420 <pattern_SparkleFlash+0x70>
    1414:	41 50       	subi	r20, 0x01	; 1
    1416:	51 09       	sbc	r21, r1
    1418:	48 6f       	ori	r20, 0xF8	; 248
    141a:	5f 6f       	ori	r21, 0xFF	; 255
    141c:	4f 5f       	subi	r20, 0xFF	; 255
    141e:	5f 4f       	sbci	r21, 0xFF	; 255
    1420:	be 01       	movw	r22, r28
    1422:	67 70       	andi	r22, 0x07	; 7
    1424:	70 78       	andi	r23, 0x80	; 128
    1426:	77 23       	and	r23, r23
    1428:	34 f4       	brge	.+12     	; 0x1436 <pattern_SparkleFlash+0x86>
    142a:	61 50       	subi	r22, 0x01	; 1
    142c:	71 09       	sbc	r23, r1
    142e:	68 6f       	ori	r22, 0xF8	; 248
    1430:	7f 6f       	ori	r23, 0xFF	; 255
    1432:	6f 5f       	subi	r22, 0xFF	; 255
    1434:	7f 4f       	sbci	r23, 0xFF	; 255
    1436:	87 70       	andi	r24, 0x07	; 7
    1438:	90 78       	andi	r25, 0x80	; 128
    143a:	99 23       	and	r25, r25
    143c:	24 f4       	brge	.+8      	; 0x1446 <pattern_SparkleFlash+0x96>
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	88 6f       	ori	r24, 0xF8	; 248
    1442:	9f 6f       	ori	r25, 0xFF	; 255
    1444:	01 96       	adiw	r24, 0x01	; 1
    1446:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
	if (delay > 0) {
		delay--;
	} else {
		cube_clear();
		switch (patternCtrl.state) {
			case 0:	for (i=0; i<y; i++) {
    144a:	80 91 27 01 	lds	r24, 0x0127
    144e:	8f 5f       	subi	r24, 0xFF	; 255
    1450:	80 93 27 01 	sts	0x0127, r24
    1454:	20 91 28 01 	lds	r18, 0x0128
    1458:	82 17       	cp	r24, r18
    145a:	78 f2       	brcs	.-98     	; 0x13fa <pattern_SparkleFlash+0x4a>
						cube_setVoxel( rand()%CUBE_MAX_X, rand()%CUBE_MAX_Y, rand()%CUBE_MAX_Z );
					}
					loop--;
    145c:	80 91 22 01 	lds	r24, 0x0122
    1460:	90 91 23 01 	lds	r25, 0x0123
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	90 93 23 01 	sts	0x0123, r25
    146a:	80 93 22 01 	sts	0x0122, r24
					if (loop == 0 ) {
    146e:	89 2b       	or	r24, r25
    1470:	09 f0       	breq	.+2      	; 0x1474 <pattern_SparkleFlash+0xc4>
    1472:	78 c0       	rjmp	.+240    	; 0x1564 <pattern_SparkleFlash+0x1b4>
						loop = z;
    1474:	80 91 25 01 	lds	r24, 0x0125
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	90 93 23 01 	sts	0x0123, r25
    147e:	80 93 22 01 	sts	0x0122, r24
						y++;
    1482:	2f 5f       	subi	r18, 0xFF	; 255
    1484:	20 93 28 01 	sts	0x0128, r18
						if (y >= x) { y=x; patternCtrl.state = 1; }
    1488:	80 91 21 01 	lds	r24, 0x0121
    148c:	28 17       	cp	r18, r24
    148e:	08 f4       	brcc	.+2      	; 0x1492 <pattern_SparkleFlash+0xe2>
    1490:	69 c0       	rjmp	.+210    	; 0x1564 <pattern_SparkleFlash+0x1b4>
    1492:	80 93 28 01 	sts	0x0128, r24
    1496:	ea e2       	ldi	r30, 0x2A	; 42
    1498:	f1 e0       	ldi	r31, 0x01	; 1
    149a:	80 81       	ld	r24, Z
    149c:	8f 71       	andi	r24, 0x1F	; 31
    149e:	80 62       	ori	r24, 0x20	; 32
    14a0:	80 83       	st	Z, r24
    14a2:	60 c0       	rjmp	.+192    	; 0x1564 <pattern_SparkleFlash+0x1b4>
					}
					break;
			case 1: for (i=0; i<y; i++) {
    14a4:	10 92 27 01 	sts	0x0127, r1
    14a8:	20 91 28 01 	lds	r18, 0x0128
    14ac:	22 23       	and	r18, r18
    14ae:	89 f1       	breq	.+98     	; 0x1512 <pattern_SparkleFlash+0x162>
						cube_setVoxel( rand()%CUBE_MAX_X, rand()%CUBE_MAX_Y, rand()%CUBE_MAX_Z );
    14b0:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    14b4:	8c 01       	movw	r16, r24
    14b6:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    14ba:	ec 01       	movw	r28, r24
    14bc:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    14c0:	a8 01       	movw	r20, r16
    14c2:	47 70       	andi	r20, 0x07	; 7
    14c4:	50 78       	andi	r21, 0x80	; 128
    14c6:	55 23       	and	r21, r21
    14c8:	34 f4       	brge	.+12     	; 0x14d6 <pattern_SparkleFlash+0x126>
    14ca:	41 50       	subi	r20, 0x01	; 1
    14cc:	51 09       	sbc	r21, r1
    14ce:	48 6f       	ori	r20, 0xF8	; 248
    14d0:	5f 6f       	ori	r21, 0xFF	; 255
    14d2:	4f 5f       	subi	r20, 0xFF	; 255
    14d4:	5f 4f       	sbci	r21, 0xFF	; 255
    14d6:	be 01       	movw	r22, r28
    14d8:	67 70       	andi	r22, 0x07	; 7
    14da:	70 78       	andi	r23, 0x80	; 128
    14dc:	77 23       	and	r23, r23
    14de:	34 f4       	brge	.+12     	; 0x14ec <pattern_SparkleFlash+0x13c>
    14e0:	61 50       	subi	r22, 0x01	; 1
    14e2:	71 09       	sbc	r23, r1
    14e4:	68 6f       	ori	r22, 0xF8	; 248
    14e6:	7f 6f       	ori	r23, 0xFF	; 255
    14e8:	6f 5f       	subi	r22, 0xFF	; 255
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	87 70       	andi	r24, 0x07	; 7
    14ee:	90 78       	andi	r25, 0x80	; 128
    14f0:	99 23       	and	r25, r25
    14f2:	24 f4       	brge	.+8      	; 0x14fc <pattern_SparkleFlash+0x14c>
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	88 6f       	ori	r24, 0xF8	; 248
    14f8:	9f 6f       	ori	r25, 0xFF	; 255
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
						loop = z;
						y++;
						if (y >= x) { y=x; patternCtrl.state = 1; }
					}
					break;
			case 1: for (i=0; i<y; i++) {
    1500:	80 91 27 01 	lds	r24, 0x0127
    1504:	8f 5f       	subi	r24, 0xFF	; 255
    1506:	80 93 27 01 	sts	0x0127, r24
    150a:	20 91 28 01 	lds	r18, 0x0128
    150e:	82 17       	cp	r24, r18
    1510:	78 f2       	brcs	.-98     	; 0x14b0 <pattern_SparkleFlash+0x100>
						cube_setVoxel( rand()%CUBE_MAX_X, rand()%CUBE_MAX_Y, rand()%CUBE_MAX_Z );
					}
					loop--;
    1512:	80 91 22 01 	lds	r24, 0x0122
    1516:	90 91 23 01 	lds	r25, 0x0123
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	90 93 23 01 	sts	0x0123, r25
    1520:	80 93 22 01 	sts	0x0122, r24
					if (loop == 0) {
    1524:	89 2b       	or	r24, r25
    1526:	f1 f4       	brne	.+60     	; 0x1564 <pattern_SparkleFlash+0x1b4>
						loop = z;
    1528:	80 91 25 01 	lds	r24, 0x0125
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	90 93 23 01 	sts	0x0123, r25
    1532:	80 93 22 01 	sts	0x0122, r24
						y--;
    1536:	21 50       	subi	r18, 0x01	; 1
						if (y <= 1) { y=1; patternCtrl.state = 2; }
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	18 f0       	brcs	.+6      	; 0x1542 <pattern_SparkleFlash+0x192>
						cube_setVoxel( rand()%CUBE_MAX_X, rand()%CUBE_MAX_Y, rand()%CUBE_MAX_Z );
					}
					loop--;
					if (loop == 0) {
						loop = z;
						y--;
    153c:	20 93 28 01 	sts	0x0128, r18
    1540:	11 c0       	rjmp	.+34     	; 0x1564 <pattern_SparkleFlash+0x1b4>
						if (y <= 1) { y=1; patternCtrl.state = 2; }
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	80 93 28 01 	sts	0x0128, r24
    1548:	ea e2       	ldi	r30, 0x2A	; 42
    154a:	f1 e0       	ldi	r31, 0x01	; 1
    154c:	80 81       	ld	r24, Z
    154e:	8f 71       	andi	r24, 0x1F	; 31
    1550:	80 64       	ori	r24, 0x40	; 64
    1552:	80 83       	st	Z, r24
    1554:	07 c0       	rjmp	.+14     	; 0x1564 <pattern_SparkleFlash+0x1b4>
					}
					break;
			case 2:	cube_clear();
    1556:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
					patternCtrl.cycles--;		//wird am Ende aller Zyklen = 0
    155a:	eb e2       	ldi	r30, 0x2B	; 43
    155c:	f1 e0       	ldi	r31, 0x01	; 1
    155e:	80 81       	ld	r24, Z
    1560:	81 50       	subi	r24, 0x01	; 1
    1562:	80 83       	st	Z, r24
					break;
			default: ;
		}
		delay = patternDelay;
    1564:	80 91 24 01 	lds	r24, 0x0124
    1568:	80 93 29 01 	sts	0x0129, r24
	}
} 
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	08 95       	ret

00001576 <pattern_Tunnel>:


void pattern_Tunnel() {
	if (delay > 0) {
    1576:	80 91 29 01 	lds	r24, 0x0129
    157a:	88 23       	and	r24, r24
    157c:	21 f0       	breq	.+8      	; 0x1586 <pattern_Tunnel+0x10>
		delay--;
    157e:	81 50       	subi	r24, 0x01	; 1
    1580:	80 93 29 01 	sts	0x0129, r24
    1584:	08 95       	ret
	} else {
		switch (patternCtrl.state) {
    1586:	e0 91 2a 01 	lds	r30, 0x012A
    158a:	e2 95       	swap	r30
    158c:	e6 95       	lsr	r30
    158e:	e7 70       	andi	r30, 0x07	; 7
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	ef 5c       	subi	r30, 0xCF	; 207
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__tablejump2__>
			case 0: cube_setLineX( y, z );
    159a:	60 91 25 01 	lds	r22, 0x0125
    159e:	80 91 28 01 	lds	r24, 0x0128
    15a2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <cube_setLineX>
					if (y < CUBE_MAX_Y-1 ) { y++; } else { z++; patternCtrl.state = 1; }
    15a6:	80 91 28 01 	lds	r24, 0x0128
    15aa:	87 30       	cpi	r24, 0x07	; 7
    15ac:	20 f4       	brcc	.+8      	; 0x15b6 <pattern_Tunnel+0x40>
    15ae:	8f 5f       	subi	r24, 0xFF	; 255
    15b0:	80 93 28 01 	sts	0x0128, r24
    15b4:	be c0       	rjmp	.+380    	; 0x1732 <pattern_Tunnel+0x1bc>
    15b6:	80 91 25 01 	lds	r24, 0x0125
    15ba:	8f 5f       	subi	r24, 0xFF	; 255
    15bc:	80 93 25 01 	sts	0x0125, r24
    15c0:	ea e2       	ldi	r30, 0x2A	; 42
    15c2:	f1 e0       	ldi	r31, 0x01	; 1
    15c4:	80 81       	ld	r24, Z
    15c6:	8f 71       	andi	r24, 0x1F	; 31
    15c8:	80 62       	ori	r24, 0x20	; 32
    15ca:	80 83       	st	Z, r24
    15cc:	b2 c0       	rjmp	.+356    	; 0x1732 <pattern_Tunnel+0x1bc>
					break;
					
			case 1: cube_setLineX( y, z );
    15ce:	60 91 25 01 	lds	r22, 0x0125
    15d2:	80 91 28 01 	lds	r24, 0x0128
    15d6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <cube_setLineX>
					if (z < CUBE_MAX_Z-1 ) { z++; } else { y--; patternCtrl.state = 2; }
    15da:	80 91 25 01 	lds	r24, 0x0125
    15de:	87 30       	cpi	r24, 0x07	; 7
    15e0:	20 f4       	brcc	.+8      	; 0x15ea <pattern_Tunnel+0x74>
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	80 93 25 01 	sts	0x0125, r24
    15e8:	a4 c0       	rjmp	.+328    	; 0x1732 <pattern_Tunnel+0x1bc>
    15ea:	80 91 28 01 	lds	r24, 0x0128
    15ee:	81 50       	subi	r24, 0x01	; 1
    15f0:	80 93 28 01 	sts	0x0128, r24
    15f4:	ea e2       	ldi	r30, 0x2A	; 42
    15f6:	f1 e0       	ldi	r31, 0x01	; 1
    15f8:	80 81       	ld	r24, Z
    15fa:	8f 71       	andi	r24, 0x1F	; 31
    15fc:	80 64       	ori	r24, 0x40	; 64
    15fe:	80 83       	st	Z, r24
    1600:	98 c0       	rjmp	.+304    	; 0x1732 <pattern_Tunnel+0x1bc>
					break;
					
			case 2: cube_setLineX( y, z );
    1602:	60 91 25 01 	lds	r22, 0x0125
    1606:	80 91 28 01 	lds	r24, 0x0128
    160a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <cube_setLineX>
					if (y > 0 ) { y--; } else { z--; patternCtrl.state = 3; }
    160e:	80 91 28 01 	lds	r24, 0x0128
    1612:	88 23       	and	r24, r24
    1614:	21 f0       	breq	.+8      	; 0x161e <pattern_Tunnel+0xa8>
    1616:	81 50       	subi	r24, 0x01	; 1
    1618:	80 93 28 01 	sts	0x0128, r24
    161c:	8a c0       	rjmp	.+276    	; 0x1732 <pattern_Tunnel+0x1bc>
    161e:	80 91 25 01 	lds	r24, 0x0125
    1622:	81 50       	subi	r24, 0x01	; 1
    1624:	80 93 25 01 	sts	0x0125, r24
    1628:	ea e2       	ldi	r30, 0x2A	; 42
    162a:	f1 e0       	ldi	r31, 0x01	; 1
    162c:	80 81       	ld	r24, Z
    162e:	8f 71       	andi	r24, 0x1F	; 31
    1630:	80 66       	ori	r24, 0x60	; 96
    1632:	80 83       	st	Z, r24
    1634:	7e c0       	rjmp	.+252    	; 0x1732 <pattern_Tunnel+0x1bc>
					break;
			
			case 3: cube_setLineX( y, z );
    1636:	60 91 25 01 	lds	r22, 0x0125
    163a:	80 91 28 01 	lds	r24, 0x0128
    163e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <cube_setLineX>
					if (z > 0 ) { z--; } else { patternCtrl.state = 4; }
    1642:	80 91 25 01 	lds	r24, 0x0125
    1646:	88 23       	and	r24, r24
    1648:	21 f0       	breq	.+8      	; 0x1652 <pattern_Tunnel+0xdc>
    164a:	81 50       	subi	r24, 0x01	; 1
    164c:	80 93 25 01 	sts	0x0125, r24
    1650:	70 c0       	rjmp	.+224    	; 0x1732 <pattern_Tunnel+0x1bc>
    1652:	ea e2       	ldi	r30, 0x2A	; 42
    1654:	f1 e0       	ldi	r31, 0x01	; 1
    1656:	80 81       	ld	r24, Z
    1658:	8f 71       	andi	r24, 0x1F	; 31
    165a:	80 68       	ori	r24, 0x80	; 128
    165c:	80 83       	st	Z, r24
    165e:	69 c0       	rjmp	.+210    	; 0x1732 <pattern_Tunnel+0x1bc>
					break;
			
			
			case 4: cube_clearLineX( y, z );
    1660:	60 91 25 01 	lds	r22, 0x0125
    1664:	80 91 28 01 	lds	r24, 0x0128
    1668:	0e 94 62 03 	call	0x6c4	; 0x6c4 <cube_clearLineX>
					if (y < CUBE_MAX_Y-1 ) { y++; } else { z++; patternCtrl.state = 5; }
    166c:	80 91 28 01 	lds	r24, 0x0128
    1670:	87 30       	cpi	r24, 0x07	; 7
    1672:	20 f4       	brcc	.+8      	; 0x167c <pattern_Tunnel+0x106>
    1674:	8f 5f       	subi	r24, 0xFF	; 255
    1676:	80 93 28 01 	sts	0x0128, r24
    167a:	5b c0       	rjmp	.+182    	; 0x1732 <pattern_Tunnel+0x1bc>
    167c:	80 91 25 01 	lds	r24, 0x0125
    1680:	8f 5f       	subi	r24, 0xFF	; 255
    1682:	80 93 25 01 	sts	0x0125, r24
    1686:	ea e2       	ldi	r30, 0x2A	; 42
    1688:	f1 e0       	ldi	r31, 0x01	; 1
    168a:	80 81       	ld	r24, Z
    168c:	8f 71       	andi	r24, 0x1F	; 31
    168e:	80 6a       	ori	r24, 0xA0	; 160
    1690:	80 83       	st	Z, r24
    1692:	4f c0       	rjmp	.+158    	; 0x1732 <pattern_Tunnel+0x1bc>
					break;
			
			case 5: cube_clearLineX( y, z );
    1694:	60 91 25 01 	lds	r22, 0x0125
    1698:	80 91 28 01 	lds	r24, 0x0128
    169c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <cube_clearLineX>
					if (z < CUBE_MAX_Z-1 ) { z++; } else { y--; patternCtrl.state = 6; }
    16a0:	80 91 25 01 	lds	r24, 0x0125
    16a4:	87 30       	cpi	r24, 0x07	; 7
    16a6:	20 f4       	brcc	.+8      	; 0x16b0 <pattern_Tunnel+0x13a>
    16a8:	8f 5f       	subi	r24, 0xFF	; 255
    16aa:	80 93 25 01 	sts	0x0125, r24
    16ae:	41 c0       	rjmp	.+130    	; 0x1732 <pattern_Tunnel+0x1bc>
    16b0:	80 91 28 01 	lds	r24, 0x0128
    16b4:	81 50       	subi	r24, 0x01	; 1
    16b6:	80 93 28 01 	sts	0x0128, r24
    16ba:	ea e2       	ldi	r30, 0x2A	; 42
    16bc:	f1 e0       	ldi	r31, 0x01	; 1
    16be:	80 81       	ld	r24, Z
    16c0:	8f 71       	andi	r24, 0x1F	; 31
    16c2:	80 6c       	ori	r24, 0xC0	; 192
    16c4:	80 83       	st	Z, r24
    16c6:	35 c0       	rjmp	.+106    	; 0x1732 <pattern_Tunnel+0x1bc>
					break;
			
			case 6: cube_clearLineX( y, z );
    16c8:	60 91 25 01 	lds	r22, 0x0125
    16cc:	80 91 28 01 	lds	r24, 0x0128
    16d0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <cube_clearLineX>
					if (y > 0 ) { y--; } else { z--; patternCtrl.state = 7; }
    16d4:	80 91 28 01 	lds	r24, 0x0128
    16d8:	88 23       	and	r24, r24
    16da:	21 f0       	breq	.+8      	; 0x16e4 <pattern_Tunnel+0x16e>
    16dc:	81 50       	subi	r24, 0x01	; 1
    16de:	80 93 28 01 	sts	0x0128, r24
    16e2:	27 c0       	rjmp	.+78     	; 0x1732 <pattern_Tunnel+0x1bc>
    16e4:	80 91 25 01 	lds	r24, 0x0125
    16e8:	81 50       	subi	r24, 0x01	; 1
    16ea:	80 93 25 01 	sts	0x0125, r24
    16ee:	ea e2       	ldi	r30, 0x2A	; 42
    16f0:	f1 e0       	ldi	r31, 0x01	; 1
    16f2:	80 81       	ld	r24, Z
    16f4:	80 6e       	ori	r24, 0xE0	; 224
    16f6:	80 83       	st	Z, r24
    16f8:	1c c0       	rjmp	.+56     	; 0x1732 <pattern_Tunnel+0x1bc>
					break;
			
			case 7: cube_clearLineX( y, z );
    16fa:	60 91 25 01 	lds	r22, 0x0125
    16fe:	80 91 28 01 	lds	r24, 0x0128
    1702:	0e 94 62 03 	call	0x6c4	; 0x6c4 <cube_clearLineX>
					if (z > 0 ) { z--; } else { y=0; z=0; patternCtrl.state = 0; patternCtrl.cycles--;	}
    1706:	80 91 25 01 	lds	r24, 0x0125
    170a:	88 23       	and	r24, r24
    170c:	21 f0       	breq	.+8      	; 0x1716 <pattern_Tunnel+0x1a0>
    170e:	81 50       	subi	r24, 0x01	; 1
    1710:	80 93 25 01 	sts	0x0125, r24
    1714:	0e c0       	rjmp	.+28     	; 0x1732 <pattern_Tunnel+0x1bc>
    1716:	10 92 28 01 	sts	0x0128, r1
    171a:	10 92 25 01 	sts	0x0125, r1
    171e:	ea e2       	ldi	r30, 0x2A	; 42
    1720:	f1 e0       	ldi	r31, 0x01	; 1
    1722:	80 81       	ld	r24, Z
    1724:	8f 71       	andi	r24, 0x1F	; 31
    1726:	80 83       	st	Z, r24
    1728:	eb e2       	ldi	r30, 0x2B	; 43
    172a:	f1 e0       	ldi	r31, 0x01	; 1
    172c:	80 81       	ld	r24, Z
    172e:	81 50       	subi	r24, 0x01	; 1
    1730:	80 83       	st	Z, r24
					break;
			
			default: ;	
		}
		delay = patternDelay;
    1732:	80 91 24 01 	lds	r24, 0x0124
    1736:	80 93 29 01 	sts	0x0129, r24
    173a:	08 95       	ret

0000173c <pattern_RandomFill>:
	}
}

void pattern_RandomFill() {
	uint8_t done;
	if (delay > 0) {
    173c:	80 91 29 01 	lds	r24, 0x0129
    1740:	88 23       	and	r24, r24
    1742:	21 f0       	breq	.+8      	; 0x174c <pattern_RandomFill+0x10>
		delay--;
    1744:	81 50       	subi	r24, 0x01	; 1
    1746:	80 93 29 01 	sts	0x0129, r24
    174a:	08 95       	ret
	} else {
		done = 0;
		switch (patternCtrl.state) {
    174c:	80 91 2a 01 	lds	r24, 0x012A
    1750:	82 95       	swap	r24
    1752:	86 95       	lsr	r24
    1754:	87 70       	andi	r24, 0x07	; 7
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	21 f0       	breq	.+8      	; 0x1764 <pattern_RandomFill+0x28>
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	09 f4       	brne	.+2      	; 0x1762 <pattern_RandomFill+0x26>
    1760:	53 c0       	rjmp	.+166    	; 0x1808 <pattern_RandomFill+0xcc>
    1762:	a7 c0       	rjmp	.+334    	; 0x18b2 <pattern_RandomFill+0x176>
			case 0:	if (loop < 450) {		//fill
    1764:	80 91 22 01 	lds	r24, 0x0122
    1768:	90 91 23 01 	lds	r25, 0x0123
    176c:	82 3c       	cpi	r24, 0xC2	; 194
    176e:	91 40       	sbci	r25, 0x01	; 1
    1770:	08 f0       	brcs	.+2      	; 0x1774 <pattern_RandomFill+0x38>
    1772:	3f c0       	rjmp	.+126    	; 0x17f2 <pattern_RandomFill+0xb6>
						while (done == 0) {
							x = rand()%8;
    1774:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    1778:	87 70       	andi	r24, 0x07	; 7
    177a:	90 78       	andi	r25, 0x80	; 128
    177c:	99 23       	and	r25, r25
    177e:	24 f4       	brge	.+8      	; 0x1788 <pattern_RandomFill+0x4c>
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	88 6f       	ori	r24, 0xF8	; 248
    1784:	9f 6f       	ori	r25, 0xFF	; 255
    1786:	01 96       	adiw	r24, 0x01	; 1
    1788:	80 93 21 01 	sts	0x0121, r24
							y = rand()%8;
    178c:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    1790:	87 70       	andi	r24, 0x07	; 7
    1792:	90 78       	andi	r25, 0x80	; 128
    1794:	99 23       	and	r25, r25
    1796:	24 f4       	brge	.+8      	; 0x17a0 <pattern_RandomFill+0x64>
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	88 6f       	ori	r24, 0xF8	; 248
    179c:	9f 6f       	ori	r25, 0xFF	; 255
    179e:	01 96       	adiw	r24, 0x01	; 1
    17a0:	80 93 28 01 	sts	0x0128, r24
							z = rand()%8;
    17a4:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    17a8:	87 70       	andi	r24, 0x07	; 7
    17aa:	90 78       	andi	r25, 0x80	; 128
    17ac:	99 23       	and	r25, r25
    17ae:	24 f4       	brge	.+8      	; 0x17b8 <pattern_RandomFill+0x7c>
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	88 6f       	ori	r24, 0xF8	; 248
    17b4:	9f 6f       	ori	r25, 0xFF	; 255
    17b6:	01 96       	adiw	r24, 0x01	; 1
    17b8:	80 93 25 01 	sts	0x0125, r24
							if (cube_getVoxel( x, y, z ) == 0) {
    17bc:	48 2f       	mov	r20, r24
    17be:	60 91 28 01 	lds	r22, 0x0128
    17c2:	80 91 21 01 	lds	r24, 0x0121
    17c6:	0e 94 95 01 	call	0x32a	; 0x32a <cube_getVoxel>
    17ca:	81 11       	cpse	r24, r1
    17cc:	d3 cf       	rjmp	.-90     	; 0x1774 <pattern_RandomFill+0x38>
								cube_setVoxel(x,y,z);
    17ce:	40 91 25 01 	lds	r20, 0x0125
    17d2:	60 91 28 01 	lds	r22, 0x0128
    17d6:	80 91 21 01 	lds	r24, 0x0121
    17da:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
								loop++;
    17de:	80 91 22 01 	lds	r24, 0x0122
    17e2:	90 91 23 01 	lds	r25, 0x0123
    17e6:	01 96       	adiw	r24, 0x01	; 1
    17e8:	90 93 23 01 	sts	0x0123, r25
    17ec:	80 93 22 01 	sts	0x0122, r24
    17f0:	60 c0       	rjmp	.+192    	; 0x18b2 <pattern_RandomFill+0x176>
								done=1;
							}
						}
				
					} else {
						loop = 0;
    17f2:	10 92 23 01 	sts	0x0123, r1
    17f6:	10 92 22 01 	sts	0x0122, r1
						patternCtrl.state = 1;
    17fa:	ea e2       	ldi	r30, 0x2A	; 42
    17fc:	f1 e0       	ldi	r31, 0x01	; 1
    17fe:	80 81       	ld	r24, Z
    1800:	8f 71       	andi	r24, 0x1F	; 31
    1802:	80 62       	ori	r24, 0x20	; 32
    1804:	80 83       	st	Z, r24
    1806:	55 c0       	rjmp	.+170    	; 0x18b2 <pattern_RandomFill+0x176>
					}
					break;
			
			case 1:	if (loop < 445) {	//cleanup
    1808:	80 91 22 01 	lds	r24, 0x0122
    180c:	90 91 23 01 	lds	r25, 0x0123
    1810:	8d 3b       	cpi	r24, 0xBD	; 189
    1812:	91 40       	sbci	r25, 0x01	; 1
    1814:	08 f0       	brcs	.+2      	; 0x1818 <pattern_RandomFill+0xdc>
    1816:	3f c0       	rjmp	.+126    	; 0x1896 <pattern_RandomFill+0x15a>
						while (done == 0) {
							x = rand()%8;
    1818:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    181c:	87 70       	andi	r24, 0x07	; 7
    181e:	90 78       	andi	r25, 0x80	; 128
    1820:	99 23       	and	r25, r25
    1822:	24 f4       	brge	.+8      	; 0x182c <pattern_RandomFill+0xf0>
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	88 6f       	ori	r24, 0xF8	; 248
    1828:	9f 6f       	ori	r25, 0xFF	; 255
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	80 93 21 01 	sts	0x0121, r24
							y = rand()%8;
    1830:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    1834:	87 70       	andi	r24, 0x07	; 7
    1836:	90 78       	andi	r25, 0x80	; 128
    1838:	99 23       	and	r25, r25
    183a:	24 f4       	brge	.+8      	; 0x1844 <pattern_RandomFill+0x108>
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	88 6f       	ori	r24, 0xF8	; 248
    1840:	9f 6f       	ori	r25, 0xFF	; 255
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	80 93 28 01 	sts	0x0128, r24
							z = rand()%8;
    1848:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    184c:	87 70       	andi	r24, 0x07	; 7
    184e:	90 78       	andi	r25, 0x80	; 128
    1850:	99 23       	and	r25, r25
    1852:	24 f4       	brge	.+8      	; 0x185c <pattern_RandomFill+0x120>
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	88 6f       	ori	r24, 0xF8	; 248
    1858:	9f 6f       	ori	r25, 0xFF	; 255
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	80 93 25 01 	sts	0x0125, r24
							if (cube_getVoxel( x, y, z ) == 1) {
    1860:	48 2f       	mov	r20, r24
    1862:	60 91 28 01 	lds	r22, 0x0128
    1866:	80 91 21 01 	lds	r24, 0x0121
    186a:	0e 94 95 01 	call	0x32a	; 0x32a <cube_getVoxel>
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	99 f6       	brne	.-90     	; 0x1818 <pattern_RandomFill+0xdc>
								cube_clearVoxel(x,y,z);
    1872:	40 91 25 01 	lds	r20, 0x0125
    1876:	60 91 28 01 	lds	r22, 0x0128
    187a:	80 91 21 01 	lds	r24, 0x0121
    187e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <cube_clearVoxel>
								loop++;
    1882:	80 91 22 01 	lds	r24, 0x0122
    1886:	90 91 23 01 	lds	r25, 0x0123
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	90 93 23 01 	sts	0x0123, r25
    1890:	80 93 22 01 	sts	0x0122, r24
    1894:	0e c0       	rjmp	.+28     	; 0x18b2 <pattern_RandomFill+0x176>
								done=1;
							}
						}
				
					} else {
						loop = 0;
    1896:	10 92 23 01 	sts	0x0123, r1
    189a:	10 92 22 01 	sts	0x0122, r1
						patternCtrl.state = 0;
    189e:	ea e2       	ldi	r30, 0x2A	; 42
    18a0:	f1 e0       	ldi	r31, 0x01	; 1
    18a2:	80 81       	ld	r24, Z
    18a4:	8f 71       	andi	r24, 0x1F	; 31
    18a6:	80 83       	st	Z, r24
						patternCtrl.cycles--;		//wird am Ende aller Zyklen = 0
    18a8:	eb e2       	ldi	r30, 0x2B	; 43
    18aa:	f1 e0       	ldi	r31, 0x01	; 1
    18ac:	80 81       	ld	r24, Z
    18ae:	81 50       	subi	r24, 0x01	; 1
    18b0:	80 83       	st	Z, r24
					}
					break;
			default: ;
		}
		delay = patternDelay;
    18b2:	80 91 24 01 	lds	r24, 0x0124
    18b6:	80 93 29 01 	sts	0x0129, r24
    18ba:	08 95       	ret

000018bc <pattern_Test>:
}




void pattern_Test() {
    18bc:	ef 92       	push	r14
    18be:	0f 93       	push	r16
	if (delay > 0) {
    18c0:	80 91 29 01 	lds	r24, 0x0129
    18c4:	88 23       	and	r24, r24
    18c6:	21 f0       	breq	.+8      	; 0x18d0 <pattern_Test+0x14>
		delay--;
    18c8:	81 50       	subi	r24, 0x01	; 1
    18ca:	80 93 29 01 	sts	0x0129, r24
    18ce:	d4 c0       	rjmp	.+424    	; 0x1a78 <pattern_Test+0x1bc>
	} else {
		switch (patternCtrl.state) {
    18d0:	80 91 2a 01 	lds	r24, 0x012A
    18d4:	82 95       	swap	r24
    18d6:	86 95       	lsr	r24
    18d8:	87 70       	andi	r24, 0x07	; 7
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	91 05       	cpc	r25, r1
    18e0:	d1 f1       	breq	.+116    	; 0x1956 <pattern_Test+0x9a>
    18e2:	1c f4       	brge	.+6      	; 0x18ea <pattern_Test+0x2e>
    18e4:	89 2b       	or	r24, r25
    18e6:	49 f0       	breq	.+18     	; 0x18fa <pattern_Test+0x3e>
    18e8:	c3 c0       	rjmp	.+390    	; 0x1a70 <pattern_Test+0x1b4>
    18ea:	82 30       	cpi	r24, 0x02	; 2
    18ec:	91 05       	cpc	r25, r1
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <pattern_Test+0x36>
    18f0:	60 c0       	rjmp	.+192    	; 0x19b2 <pattern_Test+0xf6>
    18f2:	03 97       	sbiw	r24, 0x03	; 3
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <pattern_Test+0x3c>
    18f6:	8d c0       	rjmp	.+282    	; 0x1a12 <pattern_Test+0x156>
    18f8:	bb c0       	rjmp	.+374    	; 0x1a70 <pattern_Test+0x1b4>
			case 0:	cube_clear();		//Anfang auf z=0  Ende auf y=7
    18fa:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
					for (i=0; i<CUBE_MAX_X; i++ ) {
    18fe:	10 92 27 01 	sts	0x0127, r1
    1902:	80 e0       	ldi	r24, 0x00	; 0
						cube_Line( i, y, 0, i, 7, z );
    1904:	e0 90 25 01 	lds	r14, 0x0125
    1908:	07 e0       	ldi	r16, 0x07	; 7
    190a:	28 2f       	mov	r18, r24
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	60 91 28 01 	lds	r22, 0x0128
    1912:	0e 94 16 05 	call	0xa2c	; 0xa2c <cube_Line>
	if (delay > 0) {
		delay--;
	} else {
		switch (patternCtrl.state) {
			case 0:	cube_clear();		//Anfang auf z=0  Ende auf y=7
					for (i=0; i<CUBE_MAX_X; i++ ) {
    1916:	80 91 27 01 	lds	r24, 0x0127
    191a:	8f 5f       	subi	r24, 0xFF	; 255
    191c:	80 93 27 01 	sts	0x0127, r24
    1920:	88 30       	cpi	r24, 0x08	; 8
    1922:	80 f3       	brcs	.-32     	; 0x1904 <pattern_Test+0x48>
						cube_Line( i, y, 0, i, 7, z );
					}	
					y++;
    1924:	80 91 28 01 	lds	r24, 0x0128
    1928:	8f 5f       	subi	r24, 0xFF	; 255
    192a:	80 93 28 01 	sts	0x0128, r24
					z++;
    192e:	90 91 25 01 	lds	r25, 0x0125
    1932:	9f 5f       	subi	r25, 0xFF	; 255
    1934:	90 93 25 01 	sts	0x0125, r25
					if (y >= CUBE_MAX_Y) {		
    1938:	88 30       	cpi	r24, 0x08	; 8
    193a:	08 f4       	brcc	.+2      	; 0x193e <pattern_Test+0x82>
    193c:	99 c0       	rjmp	.+306    	; 0x1a70 <pattern_Test+0x1b4>
						patternCtrl.state = 1;
    193e:	ea e2       	ldi	r30, 0x2A	; 42
    1940:	f1 e0       	ldi	r31, 0x01	; 1
    1942:	80 81       	ld	r24, Z
    1944:	8f 71       	andi	r24, 0x1F	; 31
    1946:	80 62       	ori	r24, 0x20	; 32
    1948:	80 83       	st	Z, r24
						z = 0;
    194a:	10 92 25 01 	sts	0x0125, r1
						y = 7;	
    194e:	87 e0       	ldi	r24, 0x07	; 7
    1950:	80 93 28 01 	sts	0x0128, r24
    1954:	8d c0       	rjmp	.+282    	; 0x1a70 <pattern_Test+0x1b4>
					}  
					break;
					
			case 1:	cube_clear();	//Anfang auf y=7  Ende auf z=7
    1956:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
					for (i=0; i<CUBE_MAX_X; i++ ) {
    195a:	10 92 27 01 	sts	0x0127, r1
    195e:	80 e0       	ldi	r24, 0x00	; 0
						cube_Line( i, y, 7, i, 7, z );
    1960:	e0 90 25 01 	lds	r14, 0x0125
    1964:	07 e0       	ldi	r16, 0x07	; 7
    1966:	28 2f       	mov	r18, r24
    1968:	47 e0       	ldi	r20, 0x07	; 7
    196a:	60 91 28 01 	lds	r22, 0x0128
    196e:	0e 94 16 05 	call	0xa2c	; 0xa2c <cube_Line>
						y = 7;	
					}  
					break;
					
			case 1:	cube_clear();	//Anfang auf y=7  Ende auf z=7
					for (i=0; i<CUBE_MAX_X; i++ ) {
    1972:	80 91 27 01 	lds	r24, 0x0127
    1976:	8f 5f       	subi	r24, 0xFF	; 255
    1978:	80 93 27 01 	sts	0x0127, r24
    197c:	88 30       	cpi	r24, 0x08	; 8
    197e:	80 f3       	brcs	.-32     	; 0x1960 <pattern_Test+0xa4>
						cube_Line( i, y, 7, i, 7, z );
					}
					y--;
    1980:	80 91 28 01 	lds	r24, 0x0128
    1984:	81 50       	subi	r24, 0x01	; 1
    1986:	80 93 28 01 	sts	0x0128, r24
					z++;
    198a:	80 91 25 01 	lds	r24, 0x0125
    198e:	8f 5f       	subi	r24, 0xFF	; 255
    1990:	80 93 25 01 	sts	0x0125, r24
					if (z >= CUBE_MAX_Z) {
    1994:	88 30       	cpi	r24, 0x08	; 8
    1996:	08 f4       	brcc	.+2      	; 0x199a <pattern_Test+0xde>
    1998:	6b c0       	rjmp	.+214    	; 0x1a70 <pattern_Test+0x1b4>
						patternCtrl.state = 2;
    199a:	ea e2       	ldi	r30, 0x2A	; 42
    199c:	f1 e0       	ldi	r31, 0x01	; 1
    199e:	80 81       	ld	r24, Z
    19a0:	8f 71       	andi	r24, 0x1F	; 31
    19a2:	80 64       	ori	r24, 0x40	; 64
    19a4:	80 83       	st	Z, r24
						z = 7;
    19a6:	87 e0       	ldi	r24, 0x07	; 7
    19a8:	80 93 25 01 	sts	0x0125, r24
						y = 7;
    19ac:	80 93 28 01 	sts	0x0128, r24
    19b0:	5f c0       	rjmp	.+190    	; 0x1a70 <pattern_Test+0x1b4>
					}
					break;
					
			case 2:	cube_clear();	//
    19b2:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
					for (i=0; i<CUBE_MAX_X; i++ ) {
    19b6:	10 92 27 01 	sts	0x0127, r1
    19ba:	80 e0       	ldi	r24, 0x00	; 0
						cube_Line( i, 0, z, i, y, 7 );
    19bc:	0f 2e       	mov	r0, r31
    19be:	f7 e0       	ldi	r31, 0x07	; 7
    19c0:	ef 2e       	mov	r14, r31
    19c2:	f0 2d       	mov	r31, r0
    19c4:	00 91 28 01 	lds	r16, 0x0128
    19c8:	28 2f       	mov	r18, r24
    19ca:	40 91 25 01 	lds	r20, 0x0125
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	0e 94 16 05 	call	0xa2c	; 0xa2c <cube_Line>
						y = 7;
					}
					break;
					
			case 2:	cube_clear();	//
					for (i=0; i<CUBE_MAX_X; i++ ) {
    19d4:	80 91 27 01 	lds	r24, 0x0127
    19d8:	8f 5f       	subi	r24, 0xFF	; 255
    19da:	80 93 27 01 	sts	0x0127, r24
    19de:	88 30       	cpi	r24, 0x08	; 8
    19e0:	68 f3       	brcs	.-38     	; 0x19bc <pattern_Test+0x100>
						cube_Line( i, 0, z, i, y, 7 );
					}
					y--;
    19e2:	80 91 28 01 	lds	r24, 0x0128
    19e6:	81 50       	subi	r24, 0x01	; 1
    19e8:	80 93 28 01 	sts	0x0128, r24
					z--;
    19ec:	80 91 25 01 	lds	r24, 0x0125
    19f0:	81 50       	subi	r24, 0x01	; 1
    19f2:	80 93 25 01 	sts	0x0125, r24
					if (z < CUBE_MAX_Z) {	//Unterlauf führt zu z=255
    19f6:	88 30       	cpi	r24, 0x08	; 8
    19f8:	d8 f5       	brcc	.+118    	; 0x1a70 <pattern_Test+0x1b4>
						patternCtrl.state = 3;
    19fa:	ea e2       	ldi	r30, 0x2A	; 42
    19fc:	f1 e0       	ldi	r31, 0x01	; 1
    19fe:	80 81       	ld	r24, Z
    1a00:	8f 71       	andi	r24, 0x1F	; 31
    1a02:	80 66       	ori	r24, 0x60	; 96
    1a04:	80 83       	st	Z, r24
						z = 7;
    1a06:	87 e0       	ldi	r24, 0x07	; 7
    1a08:	80 93 25 01 	sts	0x0125, r24
						y = 0;
    1a0c:	10 92 28 01 	sts	0x0128, r1
    1a10:	2f c0       	rjmp	.+94     	; 0x1a70 <pattern_Test+0x1b4>
					}
					break;
			case 3:	cube_clear();	//
    1a12:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
					for (i=0; i<CUBE_MAX_X; i++ ) {
    1a16:	10 92 27 01 	sts	0x0127, r1
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
						cube_Line( i, 0, z, i, y, 0 );
    1a1c:	e1 2c       	mov	r14, r1
    1a1e:	00 91 28 01 	lds	r16, 0x0128
    1a22:	28 2f       	mov	r18, r24
    1a24:	40 91 25 01 	lds	r20, 0x0125
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	0e 94 16 05 	call	0xa2c	; 0xa2c <cube_Line>
						z = 7;
						y = 0;
					}
					break;
			case 3:	cube_clear();	//
					for (i=0; i<CUBE_MAX_X; i++ ) {
    1a2e:	80 91 27 01 	lds	r24, 0x0127
    1a32:	8f 5f       	subi	r24, 0xFF	; 255
    1a34:	80 93 27 01 	sts	0x0127, r24
    1a38:	88 30       	cpi	r24, 0x08	; 8
    1a3a:	80 f3       	brcs	.-32     	; 0x1a1c <pattern_Test+0x160>
						cube_Line( i, 0, z, i, y, 0 );
					}
					y++;
    1a3c:	80 91 28 01 	lds	r24, 0x0128
    1a40:	8f 5f       	subi	r24, 0xFF	; 255
    1a42:	80 93 28 01 	sts	0x0128, r24
					z--;
    1a46:	90 91 25 01 	lds	r25, 0x0125
    1a4a:	91 50       	subi	r25, 0x01	; 1
    1a4c:	90 93 25 01 	sts	0x0125, r25
					if (y >= CUBE_MAX_Y) {	
    1a50:	88 30       	cpi	r24, 0x08	; 8
    1a52:	48 f0       	brcs	.+18     	; 0x1a66 <pattern_Test+0x1aa>
						patternCtrl.state = 0;
    1a54:	ea e2       	ldi	r30, 0x2A	; 42
    1a56:	f1 e0       	ldi	r31, 0x01	; 1
    1a58:	80 81       	ld	r24, Z
    1a5a:	8f 71       	andi	r24, 0x1F	; 31
    1a5c:	80 83       	st	Z, r24
						z = 0;
    1a5e:	10 92 25 01 	sts	0x0125, r1
						y = 0;
    1a62:	10 92 28 01 	sts	0x0128, r1
					}
					patternCtrl.cycles--;		//wird am Ende aller Zyklen = 0
    1a66:	eb e2       	ldi	r30, 0x2B	; 43
    1a68:	f1 e0       	ldi	r31, 0x01	; 1
    1a6a:	80 81       	ld	r24, Z
    1a6c:	81 50       	subi	r24, 0x01	; 1
    1a6e:	80 83       	st	Z, r24
					break;
					
			default: ;
		
		}
		delay = patternDelay;
    1a70:	80 91 24 01 	lds	r24, 0x0124
    1a74:	80 93 29 01 	sts	0x0129, r24
	}
}
    1a78:	0f 91       	pop	r16
    1a7a:	ef 90       	pop	r14
    1a7c:	08 95       	ret

00001a7e <pattern_stop>:
	patternCtrl.bDirX=0;
	patternCtrl.bDirY=0;
	patternCtrl.bDirZ=0;
	patternCtrl.bStart=0;		//starten
	patternCtrl.bStop=0;
	patternCtrl.state=0;
    1a7e:	10 92 2a 01 	sts	0x012A, r1
	patternDelay = 5;
    1a82:	85 e0       	ldi	r24, 0x05	; 5
    1a84:	80 93 24 01 	sts	0x0124, r24
	pattern = P_NONE;
    1a88:	8a e0       	ldi	r24, 0x0A	; 10
    1a8a:	80 93 26 01 	sts	0x0126, r24
    1a8e:	08 95       	ret

00001a90 <pattern_start>:
}

void pattern_start( TPatternTyp pt ) {
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	c8 2f       	mov	r28, r24
	pattern_stop();
    1a96:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <pattern_stop>
	pattern = pt;
    1a9a:	c0 93 26 01 	sts	0x0126, r28
	cube_clear();
    1a9e:	0e 94 24 01 	call	0x248	; 0x248 <cube_clear>
	uart_puts( "starting " ); uart_putc( pt ); uart_putc( '\n' );
    1aa2:	8b e8       	ldi	r24, 0x8B	; 139
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 34 10 	call	0x2068	; 0x2068 <uart_puts>
    1aaa:	8c 2f       	mov	r24, r28
    1aac:	0e 94 23 10 	call	0x2046	; 0x2046 <uart_putc>
    1ab0:	8a e0       	ldi	r24, 0x0A	; 10
    1ab2:	0e 94 23 10 	call	0x2046	; 0x2046 <uart_putc>
	switch ( pt ) {
    1ab6:	8c 2f       	mov	r24, r28
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	8a 30       	cpi	r24, 0x0A	; 10
    1abc:	91 05       	cpc	r25, r1
    1abe:	08 f0       	brcs	.+2      	; 0x1ac2 <pattern_start+0x32>
    1ac0:	08 c1       	rjmp	.+528    	; 0x1cd2 <pattern_start+0x242>
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	e7 5c       	subi	r30, 0xC7	; 199
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__tablejump2__>
		case P_RUNNING_POINT:	x=0; y=0; z=0;
    1acc:	10 92 21 01 	sts	0x0121, r1
    1ad0:	10 92 28 01 	sts	0x0128, r1
    1ad4:	10 92 25 01 	sts	0x0125, r1
								patternCtrl.cycles = 1;		//nur 1 Runde
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	80 93 2b 01 	sts	0x012B, r24
								cube_setVoxel(x,y,z);
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
								patternDelay = 2;		    //nur alle 2 * 10ms
    1ae8:	82 e0       	ldi	r24, 0x02	; 2
    1aea:	80 93 24 01 	sts	0x0124, r24
								delay = patternDelay;
    1aee:	80 93 29 01 	sts	0x0129, r24
								break;						
    1af2:	ef c0       	rjmp	.+478    	; 0x1cd2 <pattern_start+0x242>
								
		case P_PLANES:			x=0; y=0; z=0;
    1af4:	10 92 21 01 	sts	0x0121, r1
    1af8:	10 92 28 01 	sts	0x0128, r1
    1afc:	10 92 25 01 	sts	0x0125, r1
								patternCtrl.cycles = 3;
    1b00:	83 e0       	ldi	r24, 0x03	; 3
    1b02:	80 93 2b 01 	sts	0x012B, r24
								cube_setPlaneX( x );
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	0e 94 b7 01 	call	0x36e	; 0x36e <cube_setPlaneX>
								patternCtrl.state = 0;
    1b0c:	ea e2       	ldi	r30, 0x2A	; 42
    1b0e:	f1 e0       	ldi	r31, 0x01	; 1
    1b10:	80 81       	ld	r24, Z
    1b12:	8f 71       	andi	r24, 0x1F	; 31
    1b14:	80 83       	st	Z, r24
								patternDelay = 7;
    1b16:	87 e0       	ldi	r24, 0x07	; 7
    1b18:	80 93 24 01 	sts	0x0124, r24
								delay = patternDelay;
    1b1c:	80 93 29 01 	sts	0x0129, r24
								break;
    1b20:	d8 c0       	rjmp	.+432    	; 0x1cd2 <pattern_start+0x242>
						
		case P_CUBE_OUTLINE:	x=0; y=0; z=0;
    1b22:	10 92 21 01 	sts	0x0121, r1
    1b26:	10 92 28 01 	sts	0x0128, r1
    1b2a:	10 92 25 01 	sts	0x0125, r1
								patternCtrl.cycles = 2;
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	80 93 2b 01 	sts	0x012B, r24
								patternCtrl.state = 0;
    1b34:	ea e2       	ldi	r30, 0x2A	; 42
    1b36:	f1 e0       	ldi	r31, 0x01	; 1
    1b38:	80 81       	ld	r24, Z
    1b3a:	8f 71       	andi	r24, 0x1F	; 31
    1b3c:	80 83       	st	Z, r24
								patternDelay = 7;
    1b3e:	87 e0       	ldi	r24, 0x07	; 7
    1b40:	80 93 24 01 	sts	0x0124, r24
								delay = patternDelay;
    1b44:	80 93 29 01 	sts	0x0129, r24
								break;						
    1b48:	c4 c0       	rjmp	.+392    	; 0x1cd2 <pattern_start+0x242>
								
		case P_CUBE_WALL:		x=0; y=0; z=0;
    1b4a:	10 92 21 01 	sts	0x0121, r1
    1b4e:	10 92 28 01 	sts	0x0128, r1
    1b52:	10 92 25 01 	sts	0x0125, r1
								patternCtrl.cycles = 2;
    1b56:	82 e0       	ldi	r24, 0x02	; 2
    1b58:	80 93 2b 01 	sts	0x012B, r24
								patternCtrl.state = 0;
    1b5c:	ea e2       	ldi	r30, 0x2A	; 42
    1b5e:	f1 e0       	ldi	r31, 0x01	; 1
    1b60:	80 81       	ld	r24, Z
    1b62:	8f 71       	andi	r24, 0x1F	; 31
    1b64:	80 83       	st	Z, r24
								patternDelay = 7;
    1b66:	87 e0       	ldi	r24, 0x07	; 7
    1b68:	80 93 24 01 	sts	0x0124, r24
								delay = patternDelay;
    1b6c:	80 93 29 01 	sts	0x0129, r24
								break;
    1b70:	b0 c0       	rjmp	.+352    	; 0x1cd2 <pattern_start+0x242>
								
		case P_CUBE_FILLED:		x=0; y=0; z=0;
    1b72:	10 92 21 01 	sts	0x0121, r1
    1b76:	10 92 28 01 	sts	0x0128, r1
    1b7a:	10 92 25 01 	sts	0x0125, r1
								patternCtrl.cycles = 2;
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	80 93 2b 01 	sts	0x012B, r24
								patternCtrl.state = 0;
    1b84:	ea e2       	ldi	r30, 0x2A	; 42
    1b86:	f1 e0       	ldi	r31, 0x01	; 1
    1b88:	80 81       	ld	r24, Z
    1b8a:	8f 71       	andi	r24, 0x1F	; 31
    1b8c:	80 83       	st	Z, r24
								patternDelay = 7;
    1b8e:	87 e0       	ldi	r24, 0x07	; 7
    1b90:	80 93 24 01 	sts	0x0124, r24
								delay = patternDelay;
    1b94:	80 93 29 01 	sts	0x0129, r24
								break;
    1b98:	9c c0       	rjmp	.+312    	; 0x1cd2 <pattern_start+0x242>
								
		case P_RAIN:			//for (x=0; x < CUBE_MAX_X; x++) {
								//	cube_setVoxel( x, x, 7 );
								//	cube_setVoxel( x, CUBE_MAX_Y-1-x, 7 );
								//}
								for (z=0; z < (rand()%4); z++ ) {
    1b9a:	10 92 25 01 	sts	0x0125, r1
    1b9e:	20 c0       	rjmp	.+64     	; 0x1be0 <pattern_start+0x150>
									cube_setVoxel( rand()%CUBE_MAX_X, rand()%CUBE_MAX_Y, CUBE_MAX_Z-1 );
    1ba0:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    1ba4:	ec 01       	movw	r28, r24
    1ba6:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    1baa:	be 01       	movw	r22, r28
    1bac:	67 70       	andi	r22, 0x07	; 7
    1bae:	70 78       	andi	r23, 0x80	; 128
    1bb0:	77 23       	and	r23, r23
    1bb2:	34 f4       	brge	.+12     	; 0x1bc0 <pattern_start+0x130>
    1bb4:	61 50       	subi	r22, 0x01	; 1
    1bb6:	71 09       	sbc	r23, r1
    1bb8:	68 6f       	ori	r22, 0xF8	; 248
    1bba:	7f 6f       	ori	r23, 0xFF	; 255
    1bbc:	6f 5f       	subi	r22, 0xFF	; 255
    1bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc0:	87 70       	andi	r24, 0x07	; 7
    1bc2:	90 78       	andi	r25, 0x80	; 128
    1bc4:	99 23       	and	r25, r25
    1bc6:	24 f4       	brge	.+8      	; 0x1bd0 <pattern_start+0x140>
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	88 6f       	ori	r24, 0xF8	; 248
    1bcc:	9f 6f       	ori	r25, 0xFF	; 255
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	47 e0       	ldi	r20, 0x07	; 7
    1bd2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <cube_setVoxel>
								
		case P_RAIN:			//for (x=0; x < CUBE_MAX_X; x++) {
								//	cube_setVoxel( x, x, 7 );
								//	cube_setVoxel( x, CUBE_MAX_Y-1-x, 7 );
								//}
								for (z=0; z < (rand()%4); z++ ) {
    1bd6:	80 91 25 01 	lds	r24, 0x0125
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	80 93 25 01 	sts	0x0125, r24
    1be0:	c0 91 25 01 	lds	r28, 0x0125
    1be4:	d0 e0       	ldi	r29, 0x00	; 0
    1be6:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <rand>
    1bea:	83 70       	andi	r24, 0x03	; 3
    1bec:	90 78       	andi	r25, 0x80	; 128
    1bee:	99 23       	and	r25, r25
    1bf0:	24 f4       	brge	.+8      	; 0x1bfa <pattern_start+0x16a>
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	8c 6f       	ori	r24, 0xFC	; 252
    1bf6:	9f 6f       	ori	r25, 0xFF	; 255
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	c8 17       	cp	r28, r24
    1bfc:	d9 07       	cpc	r29, r25
    1bfe:	84 f2       	brlt	.-96     	; 0x1ba0 <pattern_start+0x110>
									cube_setVoxel( rand()%CUBE_MAX_X, rand()%CUBE_MAX_Y, CUBE_MAX_Z-1 );
								}
								patternCtrl.cycles = 100;
    1c00:	84 e6       	ldi	r24, 0x64	; 100
    1c02:	80 93 2b 01 	sts	0x012B, r24
								patternCtrl.state = 2;		//Wie oft neue Regentropfen erzeugt werden sollen
    1c06:	ea e2       	ldi	r30, 0x2A	; 42
    1c08:	f1 e0       	ldi	r31, 0x01	; 1
    1c0a:	80 81       	ld	r24, Z
    1c0c:	8f 71       	andi	r24, 0x1F	; 31
    1c0e:	80 64       	ori	r24, 0x40	; 64
    1c10:	80 83       	st	Z, r24
								patternDelay = 10;
    1c12:	8a e0       	ldi	r24, 0x0A	; 10
    1c14:	80 93 24 01 	sts	0x0124, r24
								delay = patternDelay;
    1c18:	80 93 29 01 	sts	0x0129, r24
								break;
    1c1c:	5a c0       	rjmp	.+180    	; 0x1cd2 <pattern_start+0x242>
								
		case P_SPARKLE:			x=20;	//max. nr of voxels
    1c1e:	94 e1       	ldi	r25, 0x14	; 20
    1c20:	90 93 21 01 	sts	0x0121, r25
								y=1;	//start with this nr of voxels 
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	80 93 28 01 	sts	0x0128, r24
								z=5;	//loop every nr of voxels
    1c2a:	85 e0       	ldi	r24, 0x05	; 5
    1c2c:	80 93 25 01 	sts	0x0125, r24
								patternCtrl.cycles = 20;
    1c30:	90 93 2b 01 	sts	0x012B, r25
								patternCtrl.state = 0;
    1c34:	ea e2       	ldi	r30, 0x2A	; 42
    1c36:	f1 e0       	ldi	r31, 0x01	; 1
    1c38:	90 81       	ld	r25, Z
    1c3a:	9f 71       	andi	r25, 0x1F	; 31
    1c3c:	90 83       	st	Z, r25
								patternDelay = 5;
    1c3e:	80 93 24 01 	sts	0x0124, r24
								delay = patternDelay;
    1c42:	80 93 29 01 	sts	0x0129, r24
								loop  = z;
    1c46:	85 e0       	ldi	r24, 0x05	; 5
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	90 93 23 01 	sts	0x0123, r25
    1c4e:	80 93 22 01 	sts	0x0122, r24
								break;		
    1c52:	3f c0       	rjmp	.+126    	; 0x1cd2 <pattern_start+0x242>
								
		case P_TUNNEL:			x=0; y=0; z=0;
    1c54:	10 92 21 01 	sts	0x0121, r1
    1c58:	10 92 28 01 	sts	0x0128, r1
    1c5c:	10 92 25 01 	sts	0x0125, r1
								patternCtrl.cycles = 2;
    1c60:	82 e0       	ldi	r24, 0x02	; 2
    1c62:	80 93 2b 01 	sts	0x012B, r24
								patternCtrl.state = 0;
    1c66:	ea e2       	ldi	r30, 0x2A	; 42
    1c68:	f1 e0       	ldi	r31, 0x01	; 1
    1c6a:	80 81       	ld	r24, Z
    1c6c:	8f 71       	andi	r24, 0x1F	; 31
    1c6e:	80 83       	st	Z, r24
								patternDelay = 5;
    1c70:	85 e0       	ldi	r24, 0x05	; 5
    1c72:	80 93 24 01 	sts	0x0124, r24
								delay = patternDelay;
    1c76:	80 93 29 01 	sts	0x0129, r24
								break;
    1c7a:	2b c0       	rjmp	.+86     	; 0x1cd2 <pattern_start+0x242>

		case P_RANDOMFILL:		x=0; y=0; z=0;								
    1c7c:	10 92 21 01 	sts	0x0121, r1
    1c80:	10 92 28 01 	sts	0x0128, r1
    1c84:	10 92 25 01 	sts	0x0125, r1
								patternCtrl.cycles = 1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	80 93 2b 01 	sts	0x012B, r24
								patternCtrl.state = 0;
    1c8e:	ea e2       	ldi	r30, 0x2A	; 42
    1c90:	f1 e0       	ldi	r31, 0x01	; 1
    1c92:	80 81       	ld	r24, Z
    1c94:	8f 71       	andi	r24, 0x1F	; 31
    1c96:	80 83       	st	Z, r24
								patternDelay = 2;
    1c98:	82 e0       	ldi	r24, 0x02	; 2
    1c9a:	80 93 24 01 	sts	0x0124, r24
								delay = patternDelay;
    1c9e:	80 93 29 01 	sts	0x0129, r24
								break;
    1ca2:	17 c0       	rjmp	.+46     	; 0x1cd2 <pattern_start+0x242>
								
								
								
		case P_TEST:			x=0; 
    1ca4:	10 92 21 01 	sts	0x0121, r1
								y=0; 
    1ca8:	10 92 28 01 	sts	0x0128, r1
								z=0;	
    1cac:	10 92 25 01 	sts	0x0125, r1
								patternCtrl.cycles = 4;
    1cb0:	84 e0       	ldi	r24, 0x04	; 4
    1cb2:	80 93 2b 01 	sts	0x012B, r24
								patternCtrl.state = 0;
    1cb6:	ea e2       	ldi	r30, 0x2A	; 42
    1cb8:	f1 e0       	ldi	r31, 0x01	; 1
    1cba:	80 81       	ld	r24, Z
    1cbc:	8f 71       	andi	r24, 0x1F	; 31
    1cbe:	80 83       	st	Z, r24
								patternDelay = 100;
    1cc0:	84 e6       	ldi	r24, 0x64	; 100
    1cc2:	80 93 24 01 	sts	0x0124, r24
								delay = patternDelay;
    1cc6:	80 93 29 01 	sts	0x0129, r24
								loop = 0;
    1cca:	10 92 23 01 	sts	0x0123, r1
    1cce:	10 92 22 01 	sts	0x0122, r1
								break;									
													
		case P_NONE:	break;
	}
	
}
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	08 95       	ret

00001cd8 <pattern_do>:
	}
}


void pattern_do() {		//alle 10ms:
	switch (pattern) {
    1cd8:	80 91 26 01 	lds	r24, 0x0126
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	8a 30       	cpi	r24, 0x0A	; 10
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	08 f0       	brcs	.+2      	; 0x1ce6 <pattern_do+0xe>
    1ce4:	69 c0       	rjmp	.+210    	; 0x1db8 <pattern_do+0xe0>
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	ed 5b       	subi	r30, 0xBD	; 189
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__tablejump2__>
		case P_RUNNING_POINT:	pattern_RunningPoint();	
    1cf0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <pattern_RunningPoint>
								if (patternCtrl.cycles == 0) {
    1cf4:	80 91 2b 01 	lds	r24, 0x012B
    1cf8:	81 11       	cpse	r24, r1
    1cfa:	5e c0       	rjmp	.+188    	; 0x1db8 <pattern_do+0xe0>
									pattern_start( P_PLANES );
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <pattern_start>
    1d02:	08 95       	ret
								}
								break;
		case P_PLANES:			pattern_Planes();		
    1d04:	0e 94 33 07 	call	0xe66	; 0xe66 <pattern_Planes>
								if (patternCtrl.cycles == 0) {
    1d08:	80 91 2b 01 	lds	r24, 0x012B
    1d0c:	81 11       	cpse	r24, r1
    1d0e:	54 c0       	rjmp	.+168    	; 0x1db8 <pattern_do+0xe0>
									pattern_start( P_CUBE_OUTLINE );
    1d10:	82 e0       	ldi	r24, 0x02	; 2
    1d12:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <pattern_start>
    1d16:	08 95       	ret
								}
								break;
		case P_CUBE_OUTLINE:	pattern_Cube( CUBE_EDGES );  
    1d18:	82 e0       	ldi	r24, 0x02	; 2
    1d1a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <pattern_Cube>
								if (patternCtrl.cycles == 0) {
    1d1e:	80 91 2b 01 	lds	r24, 0x012B
    1d22:	81 11       	cpse	r24, r1
    1d24:	49 c0       	rjmp	.+146    	; 0x1db8 <pattern_do+0xe0>
									pattern_start( P_CUBE_WALL );
    1d26:	83 e0       	ldi	r24, 0x03	; 3
    1d28:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <pattern_start>
    1d2c:	08 95       	ret
								}
								break;
		case P_CUBE_WALL:		pattern_Cube( CUBE_WALL );
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	0e 94 e6 07 	call	0xfcc	; 0xfcc <pattern_Cube>
								if (patternCtrl.cycles == 0) {
    1d34:	80 91 2b 01 	lds	r24, 0x012B
    1d38:	81 11       	cpse	r24, r1
    1d3a:	3e c0       	rjmp	.+124    	; 0x1db8 <pattern_do+0xe0>
									pattern_start( P_CUBE_FILLED );
    1d3c:	84 e0       	ldi	r24, 0x04	; 4
    1d3e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <pattern_start>
    1d42:	08 95       	ret
								}
								break;
		case P_CUBE_FILLED:		pattern_Cube( CUBE_FILLED );
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	0e 94 e6 07 	call	0xfcc	; 0xfcc <pattern_Cube>
								if (patternCtrl.cycles == 0) {
    1d4a:	80 91 2b 01 	lds	r24, 0x012B
    1d4e:	81 11       	cpse	r24, r1
    1d50:	33 c0       	rjmp	.+102    	; 0x1db8 <pattern_do+0xe0>
									pattern_start( P_RAIN );
    1d52:	85 e0       	ldi	r24, 0x05	; 5
    1d54:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <pattern_start>
    1d58:	08 95       	ret
								}
								break;
								
		case P_RAIN:			pattern_rain();
    1d5a:	0e 94 81 09 	call	0x1302	; 0x1302 <pattern_rain>
								if (patternCtrl.cycles == 0) {
    1d5e:	80 91 2b 01 	lds	r24, 0x012B
    1d62:	81 11       	cpse	r24, r1
    1d64:	29 c0       	rjmp	.+82     	; 0x1db8 <pattern_do+0xe0>
									pattern_start( P_SPARKLE );
    1d66:	86 e0       	ldi	r24, 0x06	; 6
    1d68:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <pattern_start>
    1d6c:	08 95       	ret
								}
								break;
								
		case P_SPARKLE:			pattern_SparkleFlash();								
    1d6e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <pattern_SparkleFlash>
								if (patternCtrl.cycles == 0) {
    1d72:	80 91 2b 01 	lds	r24, 0x012B
    1d76:	81 11       	cpse	r24, r1
    1d78:	1f c0       	rjmp	.+62     	; 0x1db8 <pattern_do+0xe0>
									pattern_start( P_TUNNEL );
    1d7a:	87 e0       	ldi	r24, 0x07	; 7
    1d7c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <pattern_start>
    1d80:	08 95       	ret
								}
								break;
								
		case P_TUNNEL:			pattern_Tunnel();
    1d82:	0e 94 bb 0a 	call	0x1576	; 0x1576 <pattern_Tunnel>
								if (patternCtrl.cycles == 0) {
    1d86:	80 91 2b 01 	lds	r24, 0x012B
    1d8a:	81 11       	cpse	r24, r1
    1d8c:	15 c0       	rjmp	.+42     	; 0x1db8 <pattern_do+0xe0>
									pattern_start( P_RANDOMFILL );
    1d8e:	88 e0       	ldi	r24, 0x08	; 8
    1d90:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <pattern_start>
    1d94:	08 95       	ret
								}
								break;

		case P_RANDOMFILL:		pattern_RandomFill();
    1d96:	0e 94 9e 0b 	call	0x173c	; 0x173c <pattern_RandomFill>
								if (patternCtrl.cycles == 0) {
    1d9a:	80 91 2b 01 	lds	r24, 0x012B
    1d9e:	81 11       	cpse	r24, r1
    1da0:	0b c0       	rjmp	.+22     	; 0x1db8 <pattern_do+0xe0>
									pattern_start( P_RUNNING_POINT );
    1da2:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <pattern_start>
    1da6:	08 95       	ret
								}
								break;
								
								
		case P_TEST:			pattern_Test();
    1da8:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <pattern_Test>
								if (patternCtrl.cycles == 0) {
    1dac:	80 91 2b 01 	lds	r24, 0x012B
    1db0:	81 11       	cpse	r24, r1
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <pattern_do+0xe0>
//									pattern_start( P_RAIN );
									pattern_start( P_RUNNING_POINT );
    1db4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <pattern_start>
    1db8:	08 95       	ret

00001dba <timerInit>:
		Die Bestimmung des Wertes für das Register OCR0 wird jetzt mit Hilfe des 
		Symbols F_CPU ausgeführt, anstelle eines festen Wertes von 16MHz. \n
		Die Funktion muss zum Programmstart einmal aufgerufen werden.
*/
void timerInit( void ) {
  timerFlags.all = 0;                       			// Alle Flags auf einmal zurücksetzen  
    1dba:	10 92 e0 00 	sts	0x00E0, r1

  TCCR0 = (1<<WGM01) | (1 << CS01) | (1 << CS00);		// CTC-Modus aktivieren, Vorteiler=64
    1dbe:	8b e0       	ldi	r24, 0x0B	; 11
    1dc0:	83 bf       	out	0x33, r24	; 51
  //OCR0  = (249);                     					// Ergibt eine Aufruffrequenz des IRQ-Handlers von 1000Hz bzw. 1ms
  OCR0 = ((uint32_t)(F_CPU) / (64UL * TIMER_FREQ)) - 1;
    1dc2:	89 ef       	ldi	r24, 0xF9	; 249
    1dc4:	8c bf       	out	0x3c, r24	; 60
  TIMSK = (1 << OCIE0) | (1<<TOIE0);					// Interrupt aktivieren bei Timer0-Compare
    1dc6:	83 e0       	ldi	r24, 0x03	; 3
    1dc8:	89 bf       	out	0x39, r24	; 57
    1dca:	08 95       	ret

00001dcc <doMilli>:
}
//-------------------------------------------------------------------------
// alle 1 ms
//-------------------------------------------------------------------------
void doMilli( void ) {
	if (CB_Event_1MS != NULL) { CB_Event_1MS(); }
    1dcc:	e0 91 99 00 	lds	r30, 0x0099
    1dd0:	f0 91 9a 00 	lds	r31, 0x009A
    1dd4:	30 97       	sbiw	r30, 0x00	; 0
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <doMilli+0xe>
    1dd8:	09 95       	icall
    1dda:	08 95       	ret

00001ddc <__vector_10>:
/** 
 @brief Interrupt-Service-Routine des Timers
		 Wird alle 1 ms aufgerufen. 
		 Aus dieser Routine leiten sich die anderen Takte ab.
*/
ISR(TIMER0_COMP_vect) {                               //  wird alle 1ms aufgerufen 
    1ddc:	1f 92       	push	r1
    1dde:	0f 92       	push	r0
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	0f 92       	push	r0
    1de4:	11 24       	eor	r1, r1
    1de6:	2f 93       	push	r18
    1de8:	3f 93       	push	r19
    1dea:	4f 93       	push	r20
    1dec:	5f 93       	push	r21
    1dee:	6f 93       	push	r22
    1df0:	7f 93       	push	r23
    1df2:	8f 93       	push	r24
    1df4:	9f 93       	push	r25
    1df6:	af 93       	push	r26
    1df8:	bf 93       	push	r27
    1dfa:	ef 93       	push	r30
    1dfc:	ff 93       	push	r31

  timerFlags.flags.bMilli = 1;
    1dfe:	80 91 e0 00 	lds	r24, 0x00E0
    1e02:	81 60       	ori	r24, 0x01	; 1
    1e04:	80 93 e0 00 	sts	0x00E0, r24
  doMilli();
    1e08:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <doMilli>
  
  cnt2Milli--;
    1e0c:	80 91 6a 00 	lds	r24, 0x006A
    1e10:	81 50       	subi	r24, 0x01	; 1
    1e12:	80 93 6a 00 	sts	0x006A, r24
  if (cnt2Milli == 0) {
    1e16:	80 91 6a 00 	lds	r24, 0x006A
    1e1a:	81 11       	cpse	r24, r1
    1e1c:	08 c0       	rjmp	.+16     	; 0x1e2e <__vector_10+0x52>
	  timerFlags.flags.b2Milli = 1;
    1e1e:	80 91 e0 00 	lds	r24, 0x00E0
    1e22:	82 60       	ori	r24, 0x02	; 2
    1e24:	80 93 e0 00 	sts	0x00E0, r24
	  cnt2Milli = 2;
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	80 93 6a 00 	sts	0x006A, r24
	  do2Milli();
  }
  
  cnt5Milli--;
    1e2e:	80 91 69 00 	lds	r24, 0x0069
    1e32:	81 50       	subi	r24, 0x01	; 1
    1e34:	80 93 69 00 	sts	0x0069, r24
  if (cnt5Milli == 0) {
    1e38:	80 91 69 00 	lds	r24, 0x0069
    1e3c:	81 11       	cpse	r24, r1
    1e3e:	08 c0       	rjmp	.+16     	; 0x1e50 <__vector_10+0x74>
	timerFlags.flags.b5Milli = 1;	  
    1e40:	80 91 e0 00 	lds	r24, 0x00E0
    1e44:	84 60       	ori	r24, 0x04	; 4
    1e46:	80 93 e0 00 	sts	0x00E0, r24
	cnt5Milli = 5;
    1e4a:	85 e0       	ldi	r24, 0x05	; 5
    1e4c:	80 93 69 00 	sts	0x0069, r24
	do5Milli();
  }
  
  cntcenti--;
    1e50:	80 91 68 00 	lds	r24, 0x0068
    1e54:	81 50       	subi	r24, 0x01	; 1
    1e56:	80 93 68 00 	sts	0x0068, r24
  if (cntcenti == 0) { 
    1e5a:	80 91 68 00 	lds	r24, 0x0068
    1e5e:	81 11       	cpse	r24, r1
    1e60:	4c c0       	rjmp	.+152    	; 0x1efa <__vector_10+0x11e>
	timerFlags.flags.bCenti = 1;
    1e62:	80 91 e0 00 	lds	r24, 0x00E0
    1e66:	88 60       	ori	r24, 0x08	; 8
    1e68:	80 93 e0 00 	sts	0x00E0, r24
  	cntcenti = 10; 
    1e6c:	8a e0       	ldi	r24, 0x0A	; 10
    1e6e:	80 93 68 00 	sts	0x0068, r24
	doCenti();
	
	cntdezi--;
    1e72:	80 91 67 00 	lds	r24, 0x0067
    1e76:	81 50       	subi	r24, 0x01	; 1
    1e78:	80 93 67 00 	sts	0x0067, r24
	if (cntdezi == 0) {
    1e7c:	80 91 67 00 	lds	r24, 0x0067
    1e80:	81 11       	cpse	r24, r1
    1e82:	3b c0       	rjmp	.+118    	; 0x1efa <__vector_10+0x11e>
	  timerFlags.flags.bDezi = 1;
    1e84:	80 91 e0 00 	lds	r24, 0x00E0
    1e88:	80 61       	ori	r24, 0x10	; 16
    1e8a:	80 93 e0 00 	sts	0x00E0, r24
	  cntdezi = 10;
    1e8e:	8a e0       	ldi	r24, 0x0A	; 10
    1e90:	80 93 67 00 	sts	0x0067, r24
	  doDezi();

	  cntsek--;
    1e94:	80 91 66 00 	lds	r24, 0x0066
    1e98:	81 50       	subi	r24, 0x01	; 1
    1e9a:	80 93 66 00 	sts	0x0066, r24
	  if (cntsek == 0) {
    1e9e:	80 91 66 00 	lds	r24, 0x0066
    1ea2:	81 11       	cpse	r24, r1
    1ea4:	2a c0       	rjmp	.+84     	; 0x1efa <__vector_10+0x11e>
		timerFlags.flags.bSek = 1;
    1ea6:	80 91 e0 00 	lds	r24, 0x00E0
    1eaa:	80 62       	ori	r24, 0x20	; 32
    1eac:	80 93 e0 00 	sts	0x00E0, r24
		cntsek = 10;
    1eb0:	8a e0       	ldi	r24, 0x0A	; 10
    1eb2:	80 93 66 00 	sts	0x0066, r24
		doSek();

		cnt10sek--;
    1eb6:	80 91 65 00 	lds	r24, 0x0065
    1eba:	81 50       	subi	r24, 0x01	; 1
    1ebc:	80 93 65 00 	sts	0x0065, r24
        if ( cnt10sek == 0) {
    1ec0:	80 91 65 00 	lds	r24, 0x0065
    1ec4:	81 11       	cpse	r24, r1
    1ec6:	19 c0       	rjmp	.+50     	; 0x1efa <__vector_10+0x11e>
  		  timerFlags.flags.b10Sek = 1;
    1ec8:	80 91 e0 00 	lds	r24, 0x00E0
    1ecc:	80 64       	ori	r24, 0x40	; 64
    1ece:	80 93 e0 00 	sts	0x00E0, r24
		  cnt10sek = 10;
    1ed2:	8a e0       	ldi	r24, 0x0A	; 10
    1ed4:	80 93 65 00 	sts	0x0065, r24
		  do10Sek();

		  cntMin--;
    1ed8:	80 91 64 00 	lds	r24, 0x0064
    1edc:	81 50       	subi	r24, 0x01	; 1
    1ede:	80 93 64 00 	sts	0x0064, r24
		  if ( cntMin == 0) {
    1ee2:	80 91 64 00 	lds	r24, 0x0064
    1ee6:	81 11       	cpse	r24, r1
    1ee8:	08 c0       	rjmp	.+16     	; 0x1efa <__vector_10+0x11e>
  		    timerFlags.flags.bMin = 1;
    1eea:	80 91 e0 00 	lds	r24, 0x00E0
    1eee:	80 68       	ori	r24, 0x80	; 128
    1ef0:	80 93 e0 00 	sts	0x00E0, r24
		    cntMin = 6;
    1ef4:	86 e0       	ldi	r24, 0x06	; 6
    1ef6:	80 93 64 00 	sts	0x0064, r24
		  }
		}
	  }
	}
  }
}
    1efa:	ff 91       	pop	r31
    1efc:	ef 91       	pop	r30
    1efe:	bf 91       	pop	r27
    1f00:	af 91       	pop	r26
    1f02:	9f 91       	pop	r25
    1f04:	8f 91       	pop	r24
    1f06:	7f 91       	pop	r23
    1f08:	6f 91       	pop	r22
    1f0a:	5f 91       	pop	r21
    1f0c:	4f 91       	pop	r20
    1f0e:	3f 91       	pop	r19
    1f10:	2f 91       	pop	r18
    1f12:	0f 90       	pop	r0
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	0f 90       	pop	r0
    1f18:	1f 90       	pop	r1
    1f1a:	18 95       	reti

00001f1c <timerClearMilli>:
  cnt10sek  = 10;				
  cntMin    = 6;		
}
//------------------------------------------------------------------------- 
void timerClearMilli( void ) {
  timerFlags.flags.bMilli = 0;
    1f1c:	80 91 e0 00 	lds	r24, 0x00E0
    1f20:	8e 7f       	andi	r24, 0xFE	; 254
    1f22:	80 93 e0 00 	sts	0x00E0, r24
    1f26:	08 95       	ret

00001f28 <timerClearCenti>:
void timerClear5Milli( void ) {
	timerFlags.flags.b5Milli = 0;
}
//------------------------------------------------------------------------- 
void timerClearCenti( void ) {
  timerFlags.flags.bCenti = 0;
    1f28:	80 91 e0 00 	lds	r24, 0x00E0
    1f2c:	87 7f       	andi	r24, 0xF7	; 247
    1f2e:	80 93 e0 00 	sts	0x00E0, r24
    1f32:	08 95       	ret

00001f34 <timerClearDezi>:
}
//------------------------------------------------------------------------- 
void timerClearDezi( void ) {
  timerFlags.flags.bDezi = 0;
    1f34:	80 91 e0 00 	lds	r24, 0x00E0
    1f38:	8f 7e       	andi	r24, 0xEF	; 239
    1f3a:	80 93 e0 00 	sts	0x00E0, r24
    1f3e:	08 95       	ret

00001f40 <__vector_13>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1f40:	1f 92       	push	r1
    1f42:	0f 92       	push	r0
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	0f 92       	push	r0
    1f48:	11 24       	eor	r1, r1
    1f4a:	2f 93       	push	r18
    1f4c:	8f 93       	push	r24
    1f4e:	9f 93       	push	r25
    1f50:	ef 93       	push	r30
    1f52:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
    1f54:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
    1f56:	2c b1       	in	r18, 0x0c	; 12
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
    1f58:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    1f5a:	e0 91 9d 00 	lds	r30, 0x009D
    1f5e:	ef 5f       	subi	r30, 0xFF	; 255
    1f60:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    1f62:	90 91 9c 00 	lds	r25, 0x009C
    1f66:	e9 17       	cp	r30, r25
    1f68:	39 f0       	breq	.+14     	; 0x1f78 <__vector_13+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    1f6a:	e0 93 9d 00 	sts	0x009D, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	e0 56       	subi	r30, 0x60	; 96
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	20 83       	st	Z, r18
    1f76:	01 c0       	rjmp	.+2      	; 0x1f7a <__vector_13+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1f78:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
    1f7a:	90 91 9b 00 	lds	r25, 0x009B
    1f7e:	89 2b       	or	r24, r25
    1f80:	80 93 9b 00 	sts	0x009B, r24
}
    1f84:	ff 91       	pop	r31
    1f86:	ef 91       	pop	r30
    1f88:	9f 91       	pop	r25
    1f8a:	8f 91       	pop	r24
    1f8c:	2f 91       	pop	r18
    1f8e:	0f 90       	pop	r0
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	0f 90       	pop	r0
    1f94:	1f 90       	pop	r1
    1f96:	18 95       	reti

00001f98 <__vector_14>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    1f98:	1f 92       	push	r1
    1f9a:	0f 92       	push	r0
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	0f 92       	push	r0
    1fa0:	11 24       	eor	r1, r1
    1fa2:	8f 93       	push	r24
    1fa4:	9f 93       	push	r25
    1fa6:	ef 93       	push	r30
    1fa8:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    1faa:	90 91 9f 00 	lds	r25, 0x009F
    1fae:	80 91 9e 00 	lds	r24, 0x009E
    1fb2:	98 17       	cp	r25, r24
    1fb4:	61 f0       	breq	.+24     	; 0x1fce <__vector_14+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1fb6:	e0 91 9e 00 	lds	r30, 0x009E
    1fba:	ef 5f       	subi	r30, 0xFF	; 255
    1fbc:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    1fbe:	e0 93 9e 00 	sts	0x009E, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	e0 54       	subi	r30, 0x40	; 64
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	80 81       	ld	r24, Z
    1fca:	8c b9       	out	0x0c, r24	; 12
    1fcc:	01 c0       	rjmp	.+2      	; 0x1fd0 <__vector_14+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1fce:	55 98       	cbi	0x0a, 5	; 10
    }
}
    1fd0:	ff 91       	pop	r31
    1fd2:	ef 91       	pop	r30
    1fd4:	9f 91       	pop	r25
    1fd6:	8f 91       	pop	r24
    1fd8:	0f 90       	pop	r0
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	0f 90       	pop	r0
    1fde:	1f 90       	pop	r1
    1fe0:	18 95       	reti

00001fe2 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    1fe2:	10 92 9f 00 	sts	0x009F, r1
    UART_TxTail = 0;
    1fe6:	10 92 9e 00 	sts	0x009E, r1
    UART_RxHead = 0;
    1fea:	10 92 9d 00 	sts	0x009D, r1
    UART_RxTail = 0;
    1fee:	10 92 9c 00 	sts	0x009C, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
    1ff2:	99 23       	and	r25, r25
    1ff4:	14 f4       	brge	.+4      	; 0x1ffa <uart_init+0x18>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
    1ff6:	22 e0       	ldi	r18, 0x02	; 2
    1ff8:	2b b9       	out	0x0b, r18	; 11
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
    1ffa:	90 78       	andi	r25, 0x80	; 128
    1ffc:	90 bd       	out	0x20, r25	; 32
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
    1ffe:	89 b9       	out	0x09, r24	; 9
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
    2000:	88 e9       	ldi	r24, 0x98	; 152
    2002:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    2004:	86 e8       	ldi	r24, 0x86	; 134
    2006:	80 bd       	out	0x20, r24	; 32
    2008:	08 95       	ret

0000200a <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
    200a:	90 91 9d 00 	lds	r25, 0x009D
    200e:	80 91 9c 00 	lds	r24, 0x009C
    2012:	98 17       	cp	r25, r24
    2014:	a9 f0       	breq	.+42     	; 0x2040 <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    2016:	90 91 9c 00 	lds	r25, 0x009C
    201a:	9f 5f       	subi	r25, 0xFF	; 255
    201c:	9f 71       	andi	r25, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    201e:	e9 2f       	mov	r30, r25
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	e0 56       	subi	r30, 0x60	; 96
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
    2028:	80 91 9b 00 	lds	r24, 0x009B
    
    /* store buffer index */
    UART_RxTail = tmptail; 
    202c:	90 93 9c 00 	sts	0x009C, r25
    
    UART_LastRxError = 0;
    2030:	10 92 9b 00 	sts	0x009B, r1
    return (lastRxError << 8) + data;
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	98 2f       	mov	r25, r24
    2038:	88 27       	eor	r24, r24
    203a:	82 0f       	add	r24, r18
    203c:	91 1d       	adc	r25, r1
    203e:	08 95       	ret
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	91 e0       	ldi	r25, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
    2044:	08 95       	ret

00002046 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    2046:	20 91 9f 00 	lds	r18, 0x009F
    204a:	2f 5f       	subi	r18, 0xFF	; 255
    204c:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    204e:	90 91 9e 00 	lds	r25, 0x009E
    2052:	29 17       	cp	r18, r25
    2054:	e1 f3       	breq	.-8      	; 0x204e <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    2056:	e2 2f       	mov	r30, r18
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	e0 54       	subi	r30, 0x40	; 64
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    2060:	20 93 9f 00 	sts	0x009F, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    2064:	55 9a       	sbi	0x0a, 5	; 10
    2066:	08 95       	ret

00002068 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    2068:	cf 93       	push	r28
    206a:	df 93       	push	r29
    206c:	ec 01       	movw	r28, r24
    while (*s) 
    206e:	88 81       	ld	r24, Y
    2070:	88 23       	and	r24, r24
    2072:	31 f0       	breq	.+12     	; 0x2080 <uart_puts+0x18>
    2074:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
    2076:	0e 94 23 10 	call	0x2046	; 0x2046 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    207a:	89 91       	ld	r24, Y+
    207c:	81 11       	cpse	r24, r1
    207e:	fb cf       	rjmp	.-10     	; 0x2076 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	08 95       	ret

00002086 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    208a:	ec 01       	movw	r28, r24
    208c:	21 96       	adiw	r28, 0x01	; 1
    208e:	fc 01       	movw	r30, r24
    2090:	84 91       	lpm	r24, Z
    2092:	88 23       	and	r24, r24
    2094:	39 f0       	breq	.+14     	; 0x20a4 <uart_puts_p+0x1e>
      uart_putc(c);
    2096:	0e 94 23 10 	call	0x2046	; 0x2046 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    209a:	fe 01       	movw	r30, r28
    209c:	84 91       	lpm	r24, Z
    209e:	21 96       	adiw	r28, 0x01	; 1
    20a0:	81 11       	cpse	r24, r1
    20a2:	f9 cf       	rjmp	.-14     	; 0x2096 <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	08 95       	ret

000020aa <__divmodhi4>:
    20aa:	97 fb       	bst	r25, 7
    20ac:	07 2e       	mov	r0, r23
    20ae:	16 f4       	brtc	.+4      	; 0x20b4 <__divmodhi4+0xa>
    20b0:	00 94       	com	r0
    20b2:	07 d0       	rcall	.+14     	; 0x20c2 <__divmodhi4_neg1>
    20b4:	77 fd       	sbrc	r23, 7
    20b6:	09 d0       	rcall	.+18     	; 0x20ca <__divmodhi4_neg2>
    20b8:	0e 94 6f 10 	call	0x20de	; 0x20de <__udivmodhi4>
    20bc:	07 fc       	sbrc	r0, 7
    20be:	05 d0       	rcall	.+10     	; 0x20ca <__divmodhi4_neg2>
    20c0:	3e f4       	brtc	.+14     	; 0x20d0 <__divmodhi4_exit>

000020c2 <__divmodhi4_neg1>:
    20c2:	90 95       	com	r25
    20c4:	81 95       	neg	r24
    20c6:	9f 4f       	sbci	r25, 0xFF	; 255
    20c8:	08 95       	ret

000020ca <__divmodhi4_neg2>:
    20ca:	70 95       	com	r23
    20cc:	61 95       	neg	r22
    20ce:	7f 4f       	sbci	r23, 0xFF	; 255

000020d0 <__divmodhi4_exit>:
    20d0:	08 95       	ret

000020d2 <__tablejump2__>:
    20d2:	ee 0f       	add	r30, r30
    20d4:	ff 1f       	adc	r31, r31

000020d6 <__tablejump__>:
    20d6:	05 90       	lpm	r0, Z+
    20d8:	f4 91       	lpm	r31, Z
    20da:	e0 2d       	mov	r30, r0
    20dc:	09 94       	ijmp

000020de <__udivmodhi4>:
    20de:	aa 1b       	sub	r26, r26
    20e0:	bb 1b       	sub	r27, r27
    20e2:	51 e1       	ldi	r21, 0x11	; 17
    20e4:	07 c0       	rjmp	.+14     	; 0x20f4 <__udivmodhi4_ep>

000020e6 <__udivmodhi4_loop>:
    20e6:	aa 1f       	adc	r26, r26
    20e8:	bb 1f       	adc	r27, r27
    20ea:	a6 17       	cp	r26, r22
    20ec:	b7 07       	cpc	r27, r23
    20ee:	10 f0       	brcs	.+4      	; 0x20f4 <__udivmodhi4_ep>
    20f0:	a6 1b       	sub	r26, r22
    20f2:	b7 0b       	sbc	r27, r23

000020f4 <__udivmodhi4_ep>:
    20f4:	88 1f       	adc	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	5a 95       	dec	r21
    20fa:	a9 f7       	brne	.-22     	; 0x20e6 <__udivmodhi4_loop>
    20fc:	80 95       	com	r24
    20fe:	90 95       	com	r25
    2100:	bc 01       	movw	r22, r24
    2102:	cd 01       	movw	r24, r26
    2104:	08 95       	ret

00002106 <do_rand>:
    2106:	8f 92       	push	r8
    2108:	9f 92       	push	r9
    210a:	af 92       	push	r10
    210c:	bf 92       	push	r11
    210e:	cf 92       	push	r12
    2110:	df 92       	push	r13
    2112:	ef 92       	push	r14
    2114:	ff 92       	push	r15
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	ec 01       	movw	r28, r24
    211c:	68 81       	ld	r22, Y
    211e:	79 81       	ldd	r23, Y+1	; 0x01
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	9b 81       	ldd	r25, Y+3	; 0x03
    2124:	61 15       	cp	r22, r1
    2126:	71 05       	cpc	r23, r1
    2128:	81 05       	cpc	r24, r1
    212a:	91 05       	cpc	r25, r1
    212c:	21 f4       	brne	.+8      	; 0x2136 <do_rand+0x30>
    212e:	64 e2       	ldi	r22, 0x24	; 36
    2130:	79 ed       	ldi	r23, 0xD9	; 217
    2132:	8b e5       	ldi	r24, 0x5B	; 91
    2134:	97 e0       	ldi	r25, 0x07	; 7
    2136:	2d e1       	ldi	r18, 0x1D	; 29
    2138:	33 ef       	ldi	r19, 0xF3	; 243
    213a:	41 e0       	ldi	r20, 0x01	; 1
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__divmodsi4>
    2142:	49 01       	movw	r8, r18
    2144:	5a 01       	movw	r10, r20
    2146:	9b 01       	movw	r18, r22
    2148:	ac 01       	movw	r20, r24
    214a:	a7 ea       	ldi	r26, 0xA7	; 167
    214c:	b1 e4       	ldi	r27, 0x41	; 65
    214e:	0e 94 00 11 	call	0x2200	; 0x2200 <__muluhisi3>
    2152:	6b 01       	movw	r12, r22
    2154:	7c 01       	movw	r14, r24
    2156:	ac ee       	ldi	r26, 0xEC	; 236
    2158:	b4 ef       	ldi	r27, 0xF4	; 244
    215a:	a5 01       	movw	r20, r10
    215c:	94 01       	movw	r18, r8
    215e:	0e 94 0e 11 	call	0x221c	; 0x221c <__mulohisi3>
    2162:	c6 0e       	add	r12, r22
    2164:	d7 1e       	adc	r13, r23
    2166:	e8 1e       	adc	r14, r24
    2168:	f9 1e       	adc	r15, r25
    216a:	f7 fe       	sbrs	r15, 7
    216c:	06 c0       	rjmp	.+12     	; 0x217a <do_rand+0x74>
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	c8 1a       	sub	r12, r24
    2172:	d1 08       	sbc	r13, r1
    2174:	e1 08       	sbc	r14, r1
    2176:	80 e8       	ldi	r24, 0x80	; 128
    2178:	f8 0a       	sbc	r15, r24
    217a:	c8 82       	st	Y, r12
    217c:	d9 82       	std	Y+1, r13	; 0x01
    217e:	ea 82       	std	Y+2, r14	; 0x02
    2180:	fb 82       	std	Y+3, r15	; 0x03
    2182:	c6 01       	movw	r24, r12
    2184:	9f 77       	andi	r25, 0x7F	; 127
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	ff 90       	pop	r15
    218c:	ef 90       	pop	r14
    218e:	df 90       	pop	r13
    2190:	cf 90       	pop	r12
    2192:	bf 90       	pop	r11
    2194:	af 90       	pop	r10
    2196:	9f 90       	pop	r9
    2198:	8f 90       	pop	r8
    219a:	08 95       	ret

0000219c <rand_r>:
    219c:	0e 94 83 10 	call	0x2106	; 0x2106 <do_rand>
    21a0:	08 95       	ret

000021a2 <rand>:
    21a2:	80 e6       	ldi	r24, 0x60	; 96
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	0e 94 83 10 	call	0x2106	; 0x2106 <do_rand>
    21aa:	08 95       	ret

000021ac <srand>:
    21ac:	a0 e0       	ldi	r26, 0x00	; 0
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	80 93 60 00 	sts	0x0060, r24
    21b4:	90 93 61 00 	sts	0x0061, r25
    21b8:	a0 93 62 00 	sts	0x0062, r26
    21bc:	b0 93 63 00 	sts	0x0063, r27
    21c0:	08 95       	ret

000021c2 <__divmodsi4>:
    21c2:	05 2e       	mov	r0, r21
    21c4:	97 fb       	bst	r25, 7
    21c6:	1e f4       	brtc	.+6      	; 0x21ce <__divmodsi4+0xc>
    21c8:	00 94       	com	r0
    21ca:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__negsi2>
    21ce:	57 fd       	sbrc	r21, 7
    21d0:	07 d0       	rcall	.+14     	; 0x21e0 <__divmodsi4_neg2>
    21d2:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodsi4>
    21d6:	07 fc       	sbrc	r0, 7
    21d8:	03 d0       	rcall	.+6      	; 0x21e0 <__divmodsi4_neg2>
    21da:	4e f4       	brtc	.+18     	; 0x21ee <__divmodsi4_exit>
    21dc:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__negsi2>

000021e0 <__divmodsi4_neg2>:
    21e0:	50 95       	com	r21
    21e2:	40 95       	com	r20
    21e4:	30 95       	com	r19
    21e6:	21 95       	neg	r18
    21e8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ea:	4f 4f       	sbci	r20, 0xFF	; 255
    21ec:	5f 4f       	sbci	r21, 0xFF	; 255

000021ee <__divmodsi4_exit>:
    21ee:	08 95       	ret

000021f0 <__negsi2>:
    21f0:	90 95       	com	r25
    21f2:	80 95       	com	r24
    21f4:	70 95       	com	r23
    21f6:	61 95       	neg	r22
    21f8:	7f 4f       	sbci	r23, 0xFF	; 255
    21fa:	8f 4f       	sbci	r24, 0xFF	; 255
    21fc:	9f 4f       	sbci	r25, 0xFF	; 255
    21fe:	08 95       	ret

00002200 <__muluhisi3>:
    2200:	0e 94 35 11 	call	0x226a	; 0x226a <__umulhisi3>
    2204:	a5 9f       	mul	r26, r21
    2206:	90 0d       	add	r25, r0
    2208:	b4 9f       	mul	r27, r20
    220a:	90 0d       	add	r25, r0
    220c:	a4 9f       	mul	r26, r20
    220e:	80 0d       	add	r24, r0
    2210:	91 1d       	adc	r25, r1
    2212:	11 24       	eor	r1, r1
    2214:	08 95       	ret

00002216 <__mulshisi3>:
    2216:	b7 ff       	sbrs	r27, 7
    2218:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__muluhisi3>

0000221c <__mulohisi3>:
    221c:	0e 94 00 11 	call	0x2200	; 0x2200 <__muluhisi3>
    2220:	82 1b       	sub	r24, r18
    2222:	93 0b       	sbc	r25, r19
    2224:	08 95       	ret

00002226 <__udivmodsi4>:
    2226:	a1 e2       	ldi	r26, 0x21	; 33
    2228:	1a 2e       	mov	r1, r26
    222a:	aa 1b       	sub	r26, r26
    222c:	bb 1b       	sub	r27, r27
    222e:	fd 01       	movw	r30, r26
    2230:	0d c0       	rjmp	.+26     	; 0x224c <__udivmodsi4_ep>

00002232 <__udivmodsi4_loop>:
    2232:	aa 1f       	adc	r26, r26
    2234:	bb 1f       	adc	r27, r27
    2236:	ee 1f       	adc	r30, r30
    2238:	ff 1f       	adc	r31, r31
    223a:	a2 17       	cp	r26, r18
    223c:	b3 07       	cpc	r27, r19
    223e:	e4 07       	cpc	r30, r20
    2240:	f5 07       	cpc	r31, r21
    2242:	20 f0       	brcs	.+8      	; 0x224c <__udivmodsi4_ep>
    2244:	a2 1b       	sub	r26, r18
    2246:	b3 0b       	sbc	r27, r19
    2248:	e4 0b       	sbc	r30, r20
    224a:	f5 0b       	sbc	r31, r21

0000224c <__udivmodsi4_ep>:
    224c:	66 1f       	adc	r22, r22
    224e:	77 1f       	adc	r23, r23
    2250:	88 1f       	adc	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	1a 94       	dec	r1
    2256:	69 f7       	brne	.-38     	; 0x2232 <__udivmodsi4_loop>
    2258:	60 95       	com	r22
    225a:	70 95       	com	r23
    225c:	80 95       	com	r24
    225e:	90 95       	com	r25
    2260:	9b 01       	movw	r18, r22
    2262:	ac 01       	movw	r20, r24
    2264:	bd 01       	movw	r22, r26
    2266:	cf 01       	movw	r24, r30
    2268:	08 95       	ret

0000226a <__umulhisi3>:
    226a:	a2 9f       	mul	r26, r18
    226c:	b0 01       	movw	r22, r0
    226e:	b3 9f       	mul	r27, r19
    2270:	c0 01       	movw	r24, r0
    2272:	a3 9f       	mul	r26, r19
    2274:	70 0d       	add	r23, r0
    2276:	81 1d       	adc	r24, r1
    2278:	11 24       	eor	r1, r1
    227a:	91 1d       	adc	r25, r1
    227c:	b2 9f       	mul	r27, r18
    227e:	70 0d       	add	r23, r0
    2280:	81 1d       	adc	r24, r1
    2282:	11 24       	eor	r1, r1
    2284:	91 1d       	adc	r25, r1
    2286:	08 95       	ret

00002288 <_exit>:
    2288:	f8 94       	cli

0000228a <__stop_program>:
    228a:	ff cf       	rjmp	.-2      	; 0x228a <__stop_program>
